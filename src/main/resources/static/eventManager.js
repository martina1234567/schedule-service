/**
 * Event Management Module - –ü–û–ü–†–ê–í–ï–ù–ê –í–ï–†–°–ò–Ø –ë–ï–ó TITLE –î–£–ë–õ–ò–†–ê–ù–ï
 * Handles event creation, editing, and form management for calendar events
 * –û–ë–ù–û–í–ï–ù: –í–∫–ª—é—á–≤–∞ copy —Ä–µ–∂–∏–º, –ø—Ä–∞–≤–∏–ª–µ–Ω datetime —Ñ–æ—Ä–º–∞—Ç –∏ —Å–µ–¥–º–∏—á–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
 */

/**
 * Initializes event management functionality
 * Sets up form handlers and leave type interactions
 */
function initializeEventManager() {
    console.log('üìã Event Manager starting initialization...');

    try {
        setupEventFormHandlers();
        setupLeaveTypeHandlers();
        setupEditFormHandlers();
        console.log('‚úÖ Event Manager initialized successfully');
    } catch (error) {
        console.error('‚ùå Error initializing Event Manager:', error);
        throw error;
    }
}

/**
 * Sets up event handlers for the main event creation form
 */
function setupEventFormHandlers() {
    const form = document.getElementById('event-form');

    if (!form) {
        console.error('‚ùå Event form not found!');
        return;
    }

    // Handle form submission for creating new events
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        console.log('üìù Event form submitted');
        handleEventCreation(); // Async function
    });

    console.log('‚úÖ Event form handlers set up');
}

/**
 * Sets up handlers for leave type selection and related UI changes
 */
function setupLeaveTypeHandlers() {
    const leaveTypeInput = document.getElementById('leaveType');
    const startInput = document.getElementById('start-time');
    const endInput = document.getElementById('end-time');
    const activityInput = document.getElementById('activityInput');

    if (!leaveTypeInput || !startInput || !endInput || !activityInput) {
        console.error('‚ùå Some leave type form elements not found');
        return;
    }

    // Handle leave type selection changes
    leaveTypeInput.addEventListener('change', function() {
        const isLeave = leaveTypeInput.value !== "";

        // Disable/enable time and activity inputs based on leave selection
        startInput.disabled = isLeave;
        endInput.disabled = isLeave;
        activityInput.disabled = isLeave;

        if (isLeave) {
            // Set default values for leave days
            startInput.value = "00:00";
            endInput.value = "00:00";
            activityInput.value = "";
        } else {
            // Clear values for manual input
            startInput.value = "";
            endInput.value = "";
            activityInput.value = "";
        }
    });

    console.log('‚úÖ Leave type handlers set up');
}

/**
 * Sets up handlers for the event editing form
 */
function setupEditFormHandlers() {
    const saveEditBtn = document.getElementById('save-edit-btn');

    if (!saveEditBtn) {
        console.error('‚ùå Save edit button not found');
        return;
    }

    // Handle edit form submission
    saveEditBtn.addEventListener('click', function(event) {
        event.preventDefault();
        console.log('‚úèÔ∏è Edit form submitted');
        handleEventUpdate(); // Async function
    });

    console.log('‚úÖ Edit form handlers set up');
}

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–Ø
 * –ü–æ–¥–¥—ä—Ä–∂–∞ COPY MODE –∏ –Ω–æ—Ä–º–∞–ª–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ —Å –ø—Ä–∞–≤–∏–ª–µ–Ω datetime —Ñ–æ—Ä–º–∞—Ç
 */
async function handleEventCreation() {
    console.log('üìù Starting event creation process...');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤ copy —Ä–µ–∂–∏–º
        const isCopyingEventInput = document.getElementById('is-copying-event');
        const copyFromEventIdInput = document.getElementById('copy-from-event-id');
        const isCopyMode = isCopyingEventInput && isCopyingEventInput.value === 'true';
        const sourceEventId = copyFromEventIdInput ? copyFromEventIdInput.value : '';

        if (isCopyMode) {
            console.log('üìã Creating event in COPY MODE');
            console.log('üìã Source event ID:', sourceEventId);
        } else {
            console.log('üìù Creating event in NORMAL MODE');
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª
        const employeeSelect = document.getElementById('employeeSelect');
        const employeeId = employeeSelect.value.trim();

        if (!employeeId) {
            alert('Please select an employee first.');
            console.log('‚ùå No employee selected');
            return;
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        const selectedDate = document.getElementById('selected-date').value;
        const startTime = document.getElementById('start-time').value;
        const endTime = document.getElementById('end-time').value;
        const activity = document.getElementById('activityInput').value;
        const leaveType = document.getElementById('leaveType').value;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
        if (!selectedDate) {
            alert('Please select a date.');
            console.log('‚ùå No date selected');
            return;
        }

        // –†–∞–∑–ª–∏—á–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏ —Å–º–µ–Ω–∏ –∏ –æ—Ç–ø—É—Å–∫–∏
        if (leaveType) {
            console.log('üìÖ Creating leave event:', leaveType);
        } else {
            // –ó–∞ —Ä–∞–±–æ—Ç–Ω–∏ —Å–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
            if (!startTime || !endTime) {
                alert('Please enter both start and end times for work shifts.');
                console.log('‚ùå Missing time information for work shift');
                return;
            }

            if (!activity) {
                alert('Please select an activity for work shifts.');
                console.log('‚ùå No activity selected for work shift');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–∏ —á–∞—Å–æ–≤–µ
            if (startTime >= endTime) {
                alert('End time must be after start time.');
                console.log('‚ùå Invalid time range');
                return;
            }

            // –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –†–ê–ë–û–¢–ù–ò–¢–ï –ß–ê–°–û–í–ï (–∞–∫–æ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
            if (typeof validateWorkingHours === 'function') {
                console.log('‚è∞ Validating working hours...');
                const validationResult = await validateWorkingHours(employeeId, selectedDate, startTime, endTime, activity);

                if (!validationResult.isValid) {
                    alert(validationResult.message);
                    console.log('‚ùå Working hours validation failed:', validationResult.message);
                    return;
                }
                console.log('‚úÖ Working hours validation passed');
            }
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ backend - –ü–†–ê–í–ò–õ–ï–ù –§–û–†–ú–ê–¢
        let startDateTime, endDateTime;

        if (leaveType) {
            // –ó–∞ –æ—Ç–ø—É—Å–∫–∏ –∑–∞–¥–∞–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ 00:00
            startDateTime = formatDateTimeForApi(selectedDate, '00:00');
            endDateTime = formatDateTimeForApi(selectedDate, '00:00');
        } else {
            // –ó–∞ —Ä–∞–±–æ—Ç–Ω–∏ —Å–º–µ–Ω–∏ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–µ–∞–ª–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
            startDateTime = formatDateTimeForApi(selectedDate, startTime);
            endDateTime = formatDateTimeForApi(selectedDate, endTime);
        }

        // –ü–û–ü–†–ê–í–ï–ù–ê –õ–û–ì–ò–ö–ê –ó–ê TITLE - –ë–ï–ó –î–£–ë–õ–ò–†–ê–ù–ï
        const employeeName = employeeSelect.options[employeeSelect.selectedIndex].text;
        const firstName = employeeName.split(' ')[0]; // –ò–∑–≤–ª–∏—á–∞–º–µ —Å–∞–º–æ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ

        // –í–ò–ù–ê–ì–ò –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–∞–º–æ —á–∏—Å—Ç–æ—Ç–æ –ø—ä—Ä–≤–æ –∏–º–µ (–∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –¥—É–±–ª–∏—Ä–∞–Ω–µ)
        const eventTitle = firstName;

        console.log('üë§ Event title will be:', eventTitle);
        console.log('üìã Copy mode:', isCopyMode ? 'YES' : 'NO');

        const eventData = {
            title: eventTitle,
            start: startDateTime,
            end: endDateTime,
            activity: leaveType ? null : activity,
            leaveType: leaveType || null,
            employee: {
                id: parseInt(employeeId)
            }
        };

        console.log('üì¶ Event data prepared for backend:', eventData);
        console.log('üïê Formatted start time:', startDateTime);
        console.log('üïê Formatted end time:', endDateTime);

        // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –∫—ä–º backend
        console.log('üì° Sending event data to backend...');

        const response = await fetch('http://localhost:8080/events', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(eventData)
        });

        console.log('üì° Backend response status:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Backend error response:', errorText);
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const newEvent = await response.json();
        console.log('‚úÖ Event created successfully:', newEvent);

        // –î–æ–±–∞–≤—è–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        if (window.calendar) {
            const calendarEvent = {
                id: newEvent.id,
                title: newEvent.title,
                start: newEvent.start,
                end: newEvent.end,
                backgroundColor: newEvent.backgroundColor,
                borderColor: newEvent.borderColor,
                textColor: newEvent.textColor,
                extendedProps: {
                    employeeId: newEvent.employeeId,
                    activity: newEvent.activity,
                    leaveType: newEvent.leaveType,
                    employeeName: newEvent.employeeName
                }
            };

            // –†–µ—Ñ—Ä–µ—à–≤–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ (–∑–∞—Ä–µ–∂–¥–∞ –æ—Ç–Ω–æ–≤–æ –æ—Ç backend)
            window.calendar.refetchEvents();
            console.log('üìÖ Event added to calendar');
        } else {
            console.warn('‚ö†Ô∏è Calendar not available - page may need refresh');
        }

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ (–∞–∫–æ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
        if (typeof refreshWeeklyScheduleForEmployee === 'function') {
            console.log('üîÑ Refreshing weekly schedule...');
            await refreshWeeklyScheduleForEmployee(employeeId);
            console.log('‚úÖ Weekly schedule updated');
        }

        // –ü–æ–∫–∞–∑–≤–∞–º–µ success —Å—ä–æ–±—â–µ–Ω–∏–µ
        if (isCopyMode) {
            alert('‚úÖ New shift created successfully from copied data!');
            console.log('üéâ Copy mode event creation completed successfully');
        } else {
            alert('‚úÖ Event created successfully!');
            console.log('üéâ Normal event creation completed successfully');
        }

        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
        clearFormAfterSuccess();

    } catch (error) {
        console.error('‚ùå Error creating event:', error);
        alert(`Error creating event: ${error.message}`);
    }
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥–∞—Ç–∞ –∏ —á–∞—Å –∑–∞ API –∑–∞—è–≤–∫–∏
 * @param {string} dateStr - Date string –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
 * @param {string} timeStr - Time string –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω datetime string –∑–∞ API (YYYY-MM-DD HH:MM:SS)
 */
function formatDateTimeForApi(dateStr, timeStr) {
    const [year, month, day] = dateStr.split('-');
    const [hours, minutes] = timeStr.split(':');

    // –í—Ä—ä—â–∞–º–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS (—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–µ —Å T)
    return `${year}-${month}-${day} ${hours}:${minutes}:00`;
}

/**
 * –§–£–ù–ö–¶–ò–Ø –ó–ê –û–ë–ù–û–í–Ø–í–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–ï
 * –ò–∑–ø–æ–ª–∑–≤–∞ —Å—ä—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ datetime —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ
 */
async function handleEventUpdate() {
    console.log('üìù Starting event update process...');

    try {
        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        const eventId = document.getElementById('edit-event-id').value;
        const startInput = document.getElementById('edit-start-time');
        const endInput = document.getElementById('edit-end-time');
        const activityInput = document.getElementById('edit-activity');
        const leaveTypeInput = document.getElementById('leaveType');
        const date = document.getElementById('current-event-date').value;

        const startTime = startInput.value;
        const endTime = endInput.value;
        const activity = activityInput.value;
        const leaveType = leaveTypeInput ? leaveTypeInput.value : '';

        console.log("üìù Updating event with data:", {
            eventId: eventId,
            startTime: startTime,
            endTime: endTime,
            activity: activity,
            leaveType: leaveType,
            date: date
        });

        // –û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è (–Ω–µ –∑–∞ –æ—Ç–ø—É—Å–∫–∏)
        if (!leaveType) {
            if (!startTime || !endTime) {
                alert('Please fill in start and end time.');
                return;
            }

            if (startTime >= endTime) {
                alert('End time must be after start time.');
                return;
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ datetime strings –∑–∞ API —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
        const start = formatDateTimeForApi(date, leaveType ? "00:00" : startTime);
        const end = formatDateTimeForApi(date, leaveType ? "00:00" : endTime);

        console.log('üïê Formatted update start time:', start);
        console.log('üïê Formatted update end time:', end);

        // –°—ä–∑–¥–∞–≤–∞–º–µ update payload
        const updateData = {
            id: eventId,
            start: start,
            end: end,
            activity: leaveType ? null : activity,
            leaveType: leaveType || null
        };

        console.log('üì¶ Update data prepared:', updateData);

        // –ò–∑–ø—Ä–∞—â–∞–º–µ PUT –∑–∞—è–≤–∫–∞ –∫—ä–º backend
        const response = await fetch(`http://localhost:8080/events/${eventId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData)
        });

        console.log('üì° Update response status:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Backend update error:', errorText);
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const updatedEvent = await response.json();
        console.log('‚úÖ Event updated successfully:', updatedEvent);

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        if (window.calendar) {
            const calendarEvent = window.calendar.getEventById(eventId);
            if (calendarEvent) {
                calendarEvent.setProp('title', updatedEvent.title);
                calendarEvent.setStart(updatedEvent.start);
                calendarEvent.setEnd(updatedEvent.end);
                calendarEvent.setExtendedProp('activity', updatedEvent.activity);
                calendarEvent.setExtendedProp('leaveType', updatedEvent.leaveType);
                console.log('üìÖ Calendar event updated');
            }
        }

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞
        const employeeSelect = document.getElementById('employeeSelect');
        const employeeId = employeeSelect.value.trim();

        if (typeof refreshWeeklyScheduleForEmployee === 'function' && employeeId) {
            console.log('üîÑ Refreshing weekly schedule after update...');
            await refreshWeeklyScheduleForEmployee(employeeId);
            console.log('‚úÖ Weekly schedule updated after event update');
        }

        // –°–∫—Ä–∏–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞
        document.getElementById('edit-event-form').style.display = 'none';

        // –ü–æ–∫–∞–∑–≤–∞–º–µ success notification
        if (typeof showDragDropNotification === 'function') {
            showDragDropNotification('Event updated successfully!', 'success');
        } else {
            alert('Event updated successfully!');
        }

        console.log('üéâ Event update completed with all UI updates');

    } catch (error) {
        console.error('‚ùå Error updating event:', error);

        // –ü–æ–∫–∞–∑–≤–∞–º–µ error notification
        if (typeof showDragDropNotification === 'function') {
            showDragDropNotification(`Error updating event: ${error.message}`, 'error');
        } else {
            alert(`Error updating event: ${error.message}`);
        }
    }
}

/**
 * –ò–∑—á–∏—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ copy —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥ —É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ
 */
function clearFormAfterSuccess() {
    console.log('üßπ Clearing form after successful creation...');

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ copy —Ä–µ–∂–∏–º–∞ (–∞–∫–æ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω)
    if (typeof clearCopyMode === 'function') {
        clearCopyMode();
    }

    // –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'none';
        console.log('üîí Event form hidden');
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞
    const startTimeInput = document.getElementById('start-time');
    const endTimeInput = document.getElementById('end-time');
    const activityInput = document.getElementById('activityInput');
    const leaveTypeInput = document.getElementById('leaveType');
    const selectedDateInput = document.getElementById('selected-date');

    if (startTimeInput) {
        startTimeInput.value = '';
        startTimeInput.disabled = false;
    }
    if (endTimeInput) {
        endTimeInput.value = '';
        endTimeInput.disabled = false;
    }
    if (activityInput) {
        activityInput.value = '';
        activityInput.disabled = false;
    }
    if (leaveTypeInput) leaveTypeInput.value = '';
    if (selectedDateInput) selectedDateInput.value = '';

    console.log('‚úÖ Form cleared successfully');
}

/**
 * Resets the main event creation form to its initial state
 */
function resetEventForm() {
    const form = document.getElementById('event-form');
    if (form) {
        form.reset(); // Reset all form fields
        form.style.display = 'none'; // Hide the form
    }
}

/**
 * Opens the edit form with pre-populated data
 * @param {Object} eventData - Event data object
 */
function openEditForm(eventData) {
    const startDateTime = new Date(eventData.start);
    const endDateTime = new Date(eventData.end);

    // Populate edit form fields
    document.getElementById('edit-event-id').value = eventData.id;
    document.getElementById('edit-start-time').value = startDateTime.toTimeString().slice(0, 5);
    document.getElementById('edit-end-time').value = endDateTime.toTimeString().slice(0, 5);
    document.getElementById('edit-activity').value = eventData.extendedProps?.activity || "";

    // Extract date only (guaranteed correct format)
    const dateOnly = startDateTime.toISOString().split('T')[0];
    document.getElementById('current-event-date').value = dateOnly;

    // Show the edit form
    document.getElementById('edit-event-form').style.display = "block";
}

/**
 * –û—Ç–º–µ–Ω—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ –±–µ–∑ –¥–∞ –∑–∞–ø–∞–∑–≤–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ
 */
function cancelEventEditForm() {
    console.log("‚ùå Cancelling event edit form...");

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –Ω–µ—Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏
    const hasUnsavedChanges = checkForUnsavedEventChanges();

    if (hasUnsavedChanges) {
        const confirmCancel = confirm("Are you sure you want to cancel? Any unsaved changes will be lost.");

        if (!confirmCancel) {
            console.log("üìù User chose to continue editing");
            return; // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–∑–±—Ä–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ—Ç–æ
        }
    }

    // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –ø–æ—Ç–≤—ä—Ä–¥–∏ –æ—Ç–º—è–Ω–∞—Ç–∞ –∏–ª–∏ –Ω—è–º–∞ –Ω–µ—Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏
    console.log("‚úÖ Cancelling edit form confirmed");
    resetEventEditForm();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ –Ω–µ—Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏ –≤ edit —Ñ–æ—Ä–º–∞—Ç–∞
 */
function checkForUnsavedEventChanges() {
    // –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞ –∞–∫–æ –µ –Ω—É–∂–Ω–∞
    // –ó–∞ —Å–µ–≥–∞ –≤—Ä—ä—â–∞–º–µ false
    return false;
}

/**
 * –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ edit —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ—Ç–æ –π —Å—ä—Å—Ç–æ—è–Ω–∏–µ
 */
function resetEventEditForm() {
    console.log("üîÑ Resetting event edit form...");

    // –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm) {
        editEventForm.style.display = 'none';
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø–æ–ª–µ—Ç–∞—Ç–∞
    const editEventId = document.getElementById('edit-event-id');
    const editStartTime = document.getElementById('edit-start-time');
    const editEndTime = document.getElementById('edit-end-time');
    const editActivity = document.getElementById('edit-activity');
    const currentEventDate = document.getElementById('current-event-date');

    if (editEventId) editEventId.value = '';
    if (editStartTime) editStartTime.value = '';
    if (editEndTime) editEndTime.value = '';
    if (editActivity) editActivity.value = '';
    if (currentEventDate) currentEventDate.value = '';

    console.log("‚úÖ Event edit form reset completed");
}

/**
 * –û–ë–©–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –ò–ó–¢–†–ò–í–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–ï
 * @param {string} eventId - ID –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
 */
function deleteEventById(eventId) {
    console.log(`üóëÔ∏è Deleting event with ID: ${eventId}`);

    // –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
    if (!confirm("Are you sure you want to delete this event?")) {
        console.log("‚ùå Event deletion cancelled by user");
        return;
    }

    fetch(`http://localhost:8080/events/${eventId}`, {
        method: 'DELETE'
    })
    .then(response => {
        console.log('üì° Delete response status:', response.status);

        if (response.ok) {
            // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –æ—Ç FullCalendar
            const calendarEvent = window.calendar.getEventById(eventId);
            if (calendarEvent) {
                calendarEvent.remove();
                console.log('üìÖ Event removed from calendar');
            }

            // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞
            const employeeSelect = document.getElementById('employeeSelect');
            const employeeId = employeeSelect.value.trim();

            if (typeof refreshWeeklyScheduleForEmployee === 'function' && employeeId) {
                refreshWeeklyScheduleForEmployee(employeeId)
                    .then(() => console.log('‚úÖ Weekly schedule updated after deletion'))
                    .catch(error => console.error('‚ùå Error updating weekly schedule:', error));
            }

            // –°–∫—Ä–∏–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞ –∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞
            const editForm = document.getElementById('edit-event-form');
            if (editForm) {
                editForm.style.display = 'none';
            }

            alert("‚úÖ Event deleted successfully!");
            console.log('üéâ Event deletion completed successfully');
        } else {
            alert("‚ö†Ô∏è Failed to delete event.");
            console.error('‚ùå Failed to delete event, status:', response.status);
        }
    })
    .catch(error => {
        console.error("‚ùå Error deleting event:", error);
        alert("‚ö†Ô∏è An error occurred while deleting the event.");
    });
}

/**
 * Remove —Å—ä–±–∏—Ç–∏–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ - –∏–∑–ø–æ–ª–∑–≤–∞ –æ–±—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞
 */
function removeEventFromForm() {
    console.log("üóëÔ∏è Remove button clicked from edit form");

    // –ü–æ–ª—É—á–∞–≤–∞–º–µ event ID –æ—Ç —Å–∫—Ä–∏—Ç–æ—Ç–æ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∞
    const eventId = document.getElementById('edit-event-id').value;

    if (!eventId) {
        console.error("‚ùå No event ID found in form");
        alert("Error: No event selected for removal.");
        return;
    }

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –æ–±—â–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    deleteEventById(eventId);
}

/**
 * –ü–æ–∫–∞–∑–≤–∞ edit –∏ delete –±—É—Ç–æ–Ω–∏—Ç–µ
 */
function showEditDeleteButtons() {
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏ –∏ –≥–∏ –ø–æ–∫–∞–∑–≤–∞–º–µ
    if (window.currentlyVisibleEditButton) {
        window.currentlyVisibleEditButton.style.display = 'inline-block';
        console.log('üëÅÔ∏è Edit button shown again');
    }
    if (window.currentlyVisibleDeleteButton) {
        window.currentlyVisibleDeleteButton.style.display = 'inline-block';
        console.log('üëÅÔ∏è Delete button shown again');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–ª–µ–¥ drag & drop –æ–ø–µ—Ä–∞—Ü–∏—è
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 */
async function updateWeeklyScheduleAfterDragDrop(employeeId) {
    if (typeof refreshWeeklyScheduleForEmployee === 'function' && employeeId) {
        try {
            console.log('üîÑ Refreshing weekly schedule after drag & drop...');
            await refreshWeeklyScheduleForEmployee(employeeId);
            console.log('‚úÖ Weekly schedule updated successfully after drag & drop');
        } catch (error) {
            console.error('‚ùå Error updating weekly schedule after drag & drop:', error);
        }
    } else {
        console.warn('‚ö†Ô∏è Cannot update weekly schedule - function not available or no employee ID');
    }
}

// ========================================
// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –ù–ê –§–£–ù–ö–¶–ò–ò–¢–ï
// Export functions for global use
// ========================================

// –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –≤–µ–¥–Ω–∞–≥–∞ —Å–ª–µ–¥ –¥–µ—Ñ–∏–Ω–∏—Ü–∏–∏—Ç–µ
window.initializeEventManager = initializeEventManager;
window.handleEventCreation = handleEventCreation;
window.handleEventUpdate = handleEventUpdate;
window.clearFormAfterSuccess = clearFormAfterSuccess;
window.formatDateTimeForApi = formatDateTimeForApi;
window.openEditForm = openEditForm;
window.cancelEventEditForm = cancelEventEditForm;
window.checkForUnsavedEventChanges = checkForUnsavedEventChanges;
window.resetEventEditForm = resetEventEditForm;
window.showEditDeleteButtons = showEditDeleteButtons;
window.deleteEventById = deleteEventById;
window.removeEventFromForm = removeEventFromForm;
window.updateWeeklyScheduleAfterDragDrop = updateWeeklyScheduleAfterDragDrop;

// Debug log –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('üîß Event Manager functions exported:');
console.log('- initializeEventManager:', typeof window.initializeEventManager);
console.log('- handleEventCreation:', typeof window.handleEventCreation);
console.log('- handleEventUpdate:', typeof window.handleEventUpdate);
console.log('- formatDateTimeForApi:', typeof window.formatDateTimeForApi);

// Debug: –ü–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–º–µ —á–µ —Ñ–∞–π–ª—ä—Ç –µ –∑–∞—Ä–µ–¥–µ–Ω
console.log('‚úÖ eventManager.js loaded successfully without title duplication issue!');