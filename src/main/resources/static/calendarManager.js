/**
 * Calendar Management Module
 * Handles FullCalendar initialization, event rendering, and calendar interactions
 * –ü–û–ü–†–ê–í–ï–ù–ê –í–ï–†–°–ò–Ø: –†–µ—à–∞–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å tooltip-–æ–≤–µ—Ç–µ –ø—Ä–∏ drag & drop
 */

// Global calendar instance
let calendar = null;

// Global variables for event management
let currentlyVisibleEditButton = null; // Tracks currently visible edit button
let currentlyVisibleDeleteButton = null; // Tracks currently visible delete button

// –ù–û–í–ò –ì–õ–û–ë–ê–õ–ù–ò –ü–†–û–ú–ï–ù–õ–ò–í–ò –ó–ê TOOLTIP –£–ü–†–ê–í–õ–ï–ù–ò–ï
let activeTooltips = new Set(); // –ù–∞–±–æ—Ä –æ—Ç –∞–∫—Ç–∏–≤–Ω–∏ tooltip-–æ–≤–µ
let isDragging = false; // –§–ª–∞–≥ –¥–∞–ª–∏ –∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è

/**
 * Initializes the FullCalendar instance with responsive configurations
 */
/**
 * Initializes the FullCalendar instance with scrollable popover
 */
function initializeCalendar() {
    const calendarEl = document.getElementById('calendar');
    const employeeSelect = document.getElementById('employeeSelect');

    // –û–ø—Ä–µ–¥–µ–ª—è–º–µ initial view —Å–ø–æ—Ä–µ–¥ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
    let initialView = 'dayGridMonth';
    const windowWidth = window.innerWidth;

    if (windowWidth <= 480) {
        initialView = 'listWeek';
    } else if (windowWidth <= 768) {
        initialView = 'dayGridWeek';
    } else {
        initialView = 'dayGridMonth';
    }

    console.log(`üìÖ Initializing calendar with drag & drop - view: ${initialView}`);

    // Create new FullCalendar instance
    calendar = new FullCalendar.Calendar(calendarEl, {
        // ========================================
        // –ü–û–ü–†–ê–í–ï–ù–ò DRAG & DROP –ù–ê–°–¢–†–û–ô–ö–ò
        // ========================================
        editable: true,         // ‚úÖ –í–ê–õ–ò–î–ù–ê –û–ü–¶–ò–Ø: –ü–æ–∑–≤–æ–ª—è–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è
        droppable: true,        // ‚úÖ –í–ê–õ–ò–î–ù–ê –û–ü–¶–ò–Ø: –ü–æ–∑–≤–æ–ª—è–≤–∞ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è

        // ========================================
        // RESPONSIVE CALENDAR –ù–ê–°–¢–†–û–ô–ö–ò
        // ========================================
        initialView: initialView,
        selectable: true,
        displayEventTime: windowWidth > 768,

        // –ö–õ–Æ–ß–û–í–ê –ù–ê–°–¢–†–û–ô–ö–ê: dayMaxEvents –æ–ø—Ä–µ–¥–µ–ª—è –∫–æ–≥–∞ –¥–∞ —Å–µ –ø–æ–∫–∞–∑–≤–∞ "+more"
        dayMaxEvents: 3,

        // –í–ê–ñ–ù–û: moreLinkClick —Å custom —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å–∫—Ä–æ–ª–µ—Ä
        moreLinkClick: function(info) {
            console.log('üìã +more clicked, showing scrollable popover');
            const popover = 'popover';
            setTimeout(() => {
                addScrollToPopover();
            }, 100);
            return popover;
        },

        // Responsive header toolbar
        headerToolbar: {
            left: windowWidth <= 480 ? 'prev,next' : 'prev,next today',
            center: 'title',
            right: windowWidth <= 480 ? 'listWeek' :
                   windowWidth <= 768 ? 'dayGridWeek,dayGridMonth' :
                   'dayGridMonth,dayGridWeek,listWeek'
        },

        // Responsive height
        height: 'auto',
        contentHeight: 'auto',

        // Time formatting
        eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        },

        // Responsive dayMaxEvents —Å–ø–æ—Ä–µ–¥ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
        views: {
            dayGridMonth: {
                dayMaxEvents: 3,
            },
            dayGridWeek: {
                dayMaxEvents: 5,
            },
            listWeek: {
                dayMaxEvents: false
            }
        },

        // Event rendering
        eventDidMount: function(info) {
            handleEventRendering(info);
        },

        // Event loading
        events: function(fetchInfo, successCallback, failureCallback) {
            loadCalendarEvents(employeeSelect, successCallback, failureCallback);
        },

        // Date selection
        select: function(info) {
            handleDateSelection(info, employeeSelect);
        },

        // ========================================
        // –ü–û–ü–†–ê–í–ï–ù–ò DRAG & DROP CALLBACKS
        // ========================================

        // –ö–æ–≥–∞—Ç–æ —Å—ä–±–∏—Ç–∏–µ —Å–µ –∑–∞–ø–æ—á–Ω–µ –¥–∞ drag-–≤–∞
        eventDragStart: function(info) {
            console.log('üñ±Ô∏è Started dragging event:', info.event.title);

            // –ö–†–ò–¢–ò–ß–ù–û: –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ tooltip-–æ–≤–µ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
            isDragging = true;
            hideAllTooltips();

            // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ edit/delete –±—É—Ç–æ–Ω–∏ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ drag
            if (typeof removeExistingButtons === 'function') {
                removeExistingButtons();
            }

            // –î–æ–±–∞–≤—è–º–µ –≤–∏–∑—É–∞–ª–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ drag
            info.el.style.opacity = '0.7';
            info.el.style.transform = 'scale(1.05)';
        },

        // –í–ê–õ–ò–î–ù–ê –û–ü–¶–ò–Ø: eventDrop —Å–µ –∏–∑–≤–∏–∫–≤–∞ –∫–æ–≥–∞—Ç–æ —Å—ä–±–∏—Ç–∏–µ —Å–µ –ø—É—Å–Ω–µ –Ω–∞ –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—è
        eventDrop: function(info) {
            console.log('üéØ Event dropped! Updating backend...');
            handleEventDrop(info); // –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ async
        },

        // –ö–æ–≥–∞—Ç–æ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ —Å–µ –æ—Ç–º–µ–Ω–∏
        eventDragStop: function(info) {
            console.log('üñ±Ô∏è Stopped dragging event');

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –≤–∏–∑—É–∞–ª–Ω–∏—è —Å—Ç–∏–ª
            info.el.style.opacity = '';
            info.el.style.transform = '';

            // –ö–†–ò–¢–ò–ß–ù–û: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ tooltip —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ —Å–ª–µ–¥ –ø—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
            setTimeout(() => {
                isDragging = false;
                console.log('‚úÖ Drag operation completed - tooltips re-enabled');
            }, 200);
        },

        // Window resize handler
        windowResize: function(arg) {
            console.log('üìê Calendar resized, updating responsive settings...');
            updateCalendarResponsiveSettings();
        }
    });

    // Render the calendar
    calendar.render();
    window.calendar = calendar;

    // –ù–û–í–û: –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∏—Ç–µ drag listeners
    setupGlobalDragListeners();

    // Setup employee selection change handler
    setupEmployeeChangeHandler(employeeSelect);

    // Apply initial responsive adjustments
    setTimeout(() => {
        updateCalendarResponsiveSettings();
    }, 100);

    console.log('‚úÖ Calendar with FIXED drag & drop initialized successfully');
}

/**
 * –ü–û–ü–†–ê–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–≤–∞ event drop —Å tooltip cleanup
 */
async function handleEventDrop(info) {
    console.log('üñ±Ô∏è Starting FIXED drag & drop process...');

    // –ö–†–ò–¢–ò–ß–ù–û: –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ tooltip-–æ–≤–µ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
    hideAllTooltips();
    isDragging = true;

    const event = info.event;
    const eventId = event.id;
    const newStart = event.start;
    const newEnd = event.end;

    console.log('üìä Event drop details:', {
        eventId: eventId,
        title: event.title,
        oldStart: info.oldEvent.start,
        newStart: newStart,
        oldEnd: info.oldEvent.end,
        newEnd: newEnd
    });

    // –ü–æ–∫–∞–∑–≤–∞–º–µ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    event.setProp('title', event.title + ' (Checking...)');
    event.setExtendedProp('isUpdating', true);

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
    const validationData = {
        start: formatDateTimeForBackend(newStart),
        end: formatDateTimeForBackend(newEnd),
        activity: event.extendedProps.activity || null,
        leaveType: event.extendedProps.leaveType || null
    };

    console.log('üîç Validation data for drag & drop:', validationData);

    // ========================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –†–ê–ë–û–¢–ù–ò–¢–ï –ß–ê–°–û–í–ï
    // ========================================

    // –ü–æ–ª—É—á–∞–≤–∞–º–µ employeeId –∑–∞ —Ç–æ–≤–∞ —Å—ä–±–∏—Ç–∏–µ
    let employeeId = null;

    try {
        // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –ø–æ–ª—É—á–∏–º employeeId –æ—Ç event properties
        if (event.extendedProps && event.extendedProps.employeeId) {
            employeeId = event.extendedProps.employeeId;
        } else {
            // –ê–∫–æ –Ω—è–º–∞ –≤ extendedProps, –ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º backend
            console.log('üîç Getting employee ID from backend for drag & drop...');

            const response = await fetch(`http://localhost:8080/events/${eventId}`);
            if (response.ok) {
                const eventDetails = await response.json();
                employeeId = eventDetails.employee?.id;
                console.log('üì° Employee ID retrieved for drag & drop:', employeeId);
            } else {
                throw new Error('Failed to get event details for validation');
            }
        }

    } catch (error) {
        console.error('‚ö†Ô∏è Error getting employee ID for drag & drop:', error);
        // –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –≤—Ä—ä—â–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        console.log('üîÑ Reverting drag & drop due to employee ID error');
        info.revert();
        event.setProp('title', event.title.replace(' (Checking...)', ''));
        event.setExtendedProp('isUpdating', false);
        showDragDropNotification('Error validating move. Please try again.', 'error');

        // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ tooltip —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
        setTimeout(() => {
            isDragging = false;
        }, 300);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –µ –Ω–∞–ª–∏—á–Ω–∞
    if (typeof validateAndNotify === 'function' && employeeId) {
        console.log('üîç Starting work hours validation for drag & drop...');

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ loading —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
        event.setProp('title', event.title.replace(' (Checking...)', ' (Validating...)'));

        try {
            // –ò–∑–≤—ä—Ä—à–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ —Å originalEventId –∑–∞ –¥–∞ –∏–∑–∫–ª—é—á–∏–º —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
            const isValid = await validateAndNotify(validationData, employeeId, eventId);

            if (!isValid) {
                // –ê–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –º–∏–Ω–µ, –≤—Ä—ä—â–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
                console.log('‚ö†Ô∏è Drag & drop blocked due to validation errors');
                info.revert();

                // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                event.setProp('title', event.title.replace(' (Validating...)', ''));
                event.setExtendedProp('isUpdating', false);

                // Validation notification –≤–µ—á–µ –µ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—Ç validateAndNotify()

                // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ tooltip —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
                setTimeout(() => {
                    isDragging = false;
                }, 300);
                return; // –ò–∑–ª–∏–∑–∞–º–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –±–µ–∑ –¥–∞ –ø—Ä–∞–≤–∏–º update
            }

            console.log('‚úÖ Validation passed for drag & drop, proceeding with update');

        } catch (error) {
            console.error('‚ö†Ô∏è Error during drag & drop validation:', error);
            // –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –≤—Ä—ä—â–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
            info.revert();
            event.setProp('title', event.title.replace(' (Validating...)', ''));
            event.setExtendedProp('isUpdating', false);
            showDragDropNotification('Error validating move. Please try again.', 'error');

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ tooltip —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
            setTimeout(() => {
                isDragging = false;
            }, 300);
            return;
        }
    } else {
        if (!employeeId) {
            console.warn('‚ö†Ô∏è Employee ID not available for drag & drop validation');
        } else {
            console.warn('‚ö†Ô∏è Validation function not available for drag & drop');
        }
    }

    // ========================================
    // –û–ë–ù–û–í–Ø–í–ê–ù–ï –í BACKEND
    // ========================================

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ loading —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
    event.setProp('title', event.title.replace(' (Validating...)', ' (Updating...)').replace(' (Checking...)', ' (Updating...)'));

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ backend –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
    const updateData = {
        id: eventId,
        start: formatDateTimeForBackend(newStart),
        end: formatDateTimeForBackend(newEnd),
        activity: event.extendedProps.activity || null,
        leaveType: event.extendedProps.leaveType || null
    };

    console.log('üöÄ Sending drag & drop update to backend:', updateData);

    try {
        // –ò–∑–ø—Ä–∞—â–∞–º–µ PUT –∑–∞—è–≤–∫–∞ –∫—ä–º backend
        const response = await fetch(`http://localhost:8080/events/${eventId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(updateData)
        });

        console.log('üì° Drag & drop backend response status:', response.status);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: Failed to update event`);
        }

        const updatedEvent = await response.json();
        console.log('‚úÖ Drag & drop event updated successfully in backend:', updatedEvent);

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        console.log('üîÑ Refreshing calendar after drag & drop...');
        if (window.calendar) {
            window.calendar.refetchEvents();
            console.log('üìÖ Calendar refreshed with correct titles');
        }

        // üÜï –î–ò–†–ï–ö–¢–ù–û –û–ë–ù–û–í–Ø–í–ê–ù–ï –ù–ê –°–ï–î–ú–ò–ß–ù–ò–¢–ï –î–ê–ù–ù–ò (–∑–∞–æ–±–∏–∫–∞–ª—è–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏—Ç–µ)
        try {
            const employeeSelect = document.getElementById('employeeSelect');
            const currentEmployeeId = employeeSelect ? employeeSelect.value : employeeId;
            const employeeName = employeeSelect && employeeSelect.options[employeeSelect.selectedIndex]
                ? employeeSelect.options[employeeSelect.selectedIndex].textContent.trim()
                : 'Employee';

            if (currentEmployeeId && typeof loadAndShowWeeklySchedule === 'function') {
                console.log('üîÑ Directly reloading weekly schedule after drag & drop...');

                // –ü–æ–∫–∞–∑–≤–∞–º–µ weekly schedule –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∞–∫–æ –µ —Å–∫—Ä–∏—Ç
                const weeklyContainer = document.getElementById('weekly-schedule-section');
                if (weeklyContainer) {
                    weeklyContainer.classList.remove('hidden');
                }

                // –î–∏—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
                await loadAndShowWeeklySchedule(currentEmployeeId, employeeName);
                console.log('‚úÖ Weekly schedule reloaded successfully after drag & drop');
            } else {
                console.warn('‚ö†Ô∏è Cannot reload weekly schedule - missing data or function');
            }
        } catch (error) {
            console.error('‚ö†Ô∏è Error reloading weekly schedule:', error);
        }

        // –ü–æ–∫–∞–∑–≤–∞–º–µ success —Å—ä–æ–±—â–µ–Ω–∏–µ
        showDragDropNotification('Event moved successfully!', 'success');

        console.log('üéØ Drag & drop completed successfully');

    } catch (error) {
        console.error('‚ö†Ô∏è Error updating event via drag & drop:', error);

        // –í—Ä—ä—â–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
        console.log('üîÑ Reverting event to original position due to backend error');
        info.revert();

        // –ü–æ–∫–∞–∑–≤–∞–º–µ error —Å—ä–æ–±—â–µ–Ω–∏–µ
        showDragDropNotification('Failed to move event. Please try again.', 'error');
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ tooltip —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ —Å–ª–µ–¥ –ø—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
    setTimeout(() => {
        isDragging = false;
        console.log('‚úÖ Drag operation completed - tooltips re-enabled');
    }, 300); // –î–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –¥–∞ –ø—Ä–∏–∫–ª—é—á–∏ —Ü—è–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ –≥–ª–æ–±–∞–ª–Ω–∏ drag listeners –∑–∞ —Ü—è–ª–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function setupGlobalDragListeners() {
    console.log('üîß Setting up global drag listeners for tooltip management');

    // –ì–ª–æ–±–∞–ª–µ–Ω listener –∑–∞ drag –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.addEventListener('dragstart', function(e) {
        console.log('üåç Global drag start detected');
        isDragging = true;
        hideAllTooltips();
    });

    document.addEventListener('dragend', function(e) {
        console.log('üåç Global drag end detected');
        setTimeout(() => {
            isDragging = false;
            console.log('‚úÖ Global drag ended - tooltips re-enabled');
        }, 200);
    });

    // Listener –∑–∞ FullCalendar —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ drag –æ–ø–µ—Ä–∞—Ü–∏–∏
    document.addEventListener('mousedown', function(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–µ –∫–ª–∏–∫–≤–∞ –≤—ä—Ä—Ö—É FullCalendar event
        if (e.target.closest('.fc-event')) {
            console.log('üìÖ Potential FullCalendar drag detected');
            setTimeout(() => {
                hideAllTooltips();
            }, 50);
        }
    });
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥–∞—Ç–∞ –∑–∞ backend API
 * @param {Date} date - JavaScript Date –æ–±–µ–∫—Ç
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM:SS"
 */
function formatDateTimeForBackend(date) {
    if (!date) return null;

    // –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ —á–µ –∏–º–∞–º–µ Date –æ–±–µ–∫—Ç
    const d = new Date(date);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–π—Ç–æ –æ—á–∞–∫–≤–∞ backend: "YYYY-MM-DD HH:MM:SS"
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    const seconds = String(d.getSeconds()).padStart(2, '0');

    const formatted = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log(`üìÖ Formatted date: ${date} -> ${formatted}`);

    return formatted;
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ notification –∑–∞ drag & drop –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {string} message - –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ
 * @param {string} type - –¢–∏–ø–∞ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ ('success', 'error', 'info')
 */
function showDragDropNotification(message, type = 'info') {
    // –°—ä–∑–¥–∞–≤–∞–º–µ notification –µ–ª–µ–º–µ–Ω—Ç
    const notification = document.createElement('div');
    notification.className = `drag-drop-notification ${type}`;
    notification.textContent = message;

    // –î–æ–±–∞–≤—è–º–µ —Å—Ç–∏–ª–æ–≤–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        z-index: 10000;
        opacity: 0;
        transform: translateX(300px);
        transition: all 0.3s ease;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;

    // –¶–≤–µ—Ç–æ–≤–µ —Å–ø–æ—Ä–µ–¥ —Ç–∏–ø–∞
    switch(type) {
        case 'success':
            notification.style.backgroundColor = '#28a745';
            break;
        case 'error':
            notification.style.backgroundColor = '#dc3545';
            break;
        default:
            notification.style.backgroundColor = '#007bff';
    }

    // –î–æ–±–∞–≤—è–º–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞ –ø–æ—è–≤—è–≤–∞–Ω–µ
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ —Å–ª–µ–¥ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(300px)';

        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);

    console.log(`üì¢ Notification shown: ${message} (${type})`);
}

/**
 * –°–¢–™–ü–ö–ê 2: –ü—Ä–æ—Å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–∫—Ä–æ–ª–µ—Ä –∫—ä–º popover
 */
/**
 * –ü–û–î–û–ë–†–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –°–ö–†–û–õ–ï–† –° DEBUGGING
 * –†–µ—à–∞–≤–∞ –ø—Ä–æ–±–ª–µ–º–∏ —Å –ø–æ—è–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å–∫—Ä–æ–ª–µ—Ä –≤ popover –ø—Ä–æ–∑–æ—Ä—á–µ—Ç–æ
 */
function addScrollToPopover() {
    console.log('üîß FIXED: Starting addScrollToPopover with height debugging...');

    try {
        let attempts = 0;
        const maxAttempts = 5;

        const findAndProcessPopover = () => {
            attempts++;
            console.log(`üîç Attempt ${attempts}: Looking for popovers...`);

            const popovers = document.querySelectorAll('.fc-popover');

            if (popovers.length === 0) {
                if (attempts < maxAttempts) {
                    setTimeout(findAndProcessPopover, 100);
                    return;
                }
                console.error('‚ùå No popovers found after all attempts');
                return;
            }

            popovers.forEach((popover, index) => {
                const popoverBody = popover.querySelector('.fc-popover-body');

                if (!popoverBody) {
                    console.warn(`‚ö†Ô∏è No popover body found in popover ${index + 1}`);
                    return;
                }

                const events = popoverBody.querySelectorAll('.fc-event');
                const eventCount = events.length;

                console.log(`üìä Found ${eventCount} events in popover ${index + 1}`);

                // –ò–ó–ú–ï–†–í–ê–ú–ï –í–ò–°–û–ß–ò–ù–ò –ü–†–ï–î–ò –ü–†–û–ú–Ø–ù–ê
                const originalHeight = popoverBody.offsetHeight;
                const originalScrollHeight = popoverBody.scrollHeight;

                console.log(`üìè BEFORE - Height: ${originalHeight}px, ScrollHeight: ${originalScrollHeight}px`);

                if (eventCount > 5) {
                    console.log(`üéØ FIXING SCROLL for ${eventCount} events`);

                    // –°–¢–™–ü–ö–ê 1: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –µ–¥–Ω–æ —Å—ä–±–∏—Ç–∏–µ
                    const firstEvent = events[0];
                    const eventHeight = firstEvent ? firstEvent.offsetHeight : 30;
                    const eventMargin = 4; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ margin –º–µ–∂–¥—É —Å—ä–±–∏—Ç–∏—è—Ç–∞
                    const singleEventTotalHeight = eventHeight + eventMargin;

                    console.log(`üìê Single event height: ${eventHeight}px + ${eventMargin}px margin = ${singleEventTotalHeight}px total`);

                    // –°–¢–™–ü–ö–ê 2: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–æ–ª–∫–æ —Å—ä–±–∏—Ç–∏—è –∏—Å–∫–∞–º–µ –¥–∞ –ø–æ–∫–∞–∂–µ–º –±–µ–∑ —Å–∫—Ä–æ–ª–µ—Ä
                    const visibleEvents = 3; // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ 3 —Å—ä–±–∏—Ç–∏—è, –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ - —Å–∫—Ä–æ–ª–µ—Ä
                    const calculatedMaxHeight = visibleEvents * singleEventTotalHeight + 20; // +20px –∑–∞ padding

                    console.log(`üßÆ Calculated maxHeight: ${visibleEvents} events √ó ${singleEventTotalHeight}px + 20px = ${calculatedMaxHeight}px`);

                    // –°–¢–™–ü–ö–ê 3: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ-–º–∞–ª–∫–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –º–µ–∂–¥—É –∏–∑—á–∏—Å–ª–µ–Ω–∞—Ç–∞ –∏ 150px
                    const finalMaxHeight = Math.min(calculatedMaxHeight, 150);

                    console.log(`üéØ Final maxHeight will be: ${finalMaxHeight}px`);

                    // –°–¢–™–ü–ö–ê 4: –ü—Ä–∏–ª–∞–≥–∞–º–µ —Å—Ç–∏–ª–æ–≤–µ—Ç–µ —Å form-—Ñ–æ—Ä—Å–∏—Ä–∞–Ω–∞ –º–∞–ª–∫–∞ –≤–∏—Å–æ—á–∏–Ω–∞
                    popoverBody.style.maxHeight = finalMaxHeight + 'px';
                    popoverBody.style.overflowY = 'auto';
                    popoverBody.style.overflowX = 'hidden';
                    popoverBody.style.overscrollBehavior = 'contain';

                    // –î–æ–±–∞–≤—è–º–µ —Ö—É–±–∞–≤ —Å–∫—Ä–æ–ª–µ—Ä
                    popoverBody.style.scrollbarWidth = 'thin';
                    popoverBody.style.scrollbarColor = '#888 #f1f1f1';

                    // –ó–∞ webkit –±—Ä–∞—É–∑—ä—Ä–∏
                    const style = document.createElement('style');
                    style.textContent = `
                        .fc-popover-body::-webkit-scrollbar {
                            width: 8px;
                        }
                        .fc-popover-body::-webkit-scrollbar-track {
                            background: #f1f1f1;
                            border-radius: 4px;
                        }
                        .fc-popover-body::-webkit-scrollbar-thumb {
                            background: #888;
                            border-radius: 4px;
                        }
                        .fc-popover-body::-webkit-scrollbar-thumb:hover {
                            background: #555;
                        }
                    `;
                    document.head.appendChild(style);

                    // –°–¢–™–ü–ö–ê 5: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ —Å–ª–µ–¥ 100ms
                    setTimeout(() => {
                        const newHeight = popoverBody.offsetHeight;
                        const newScrollHeight = popoverBody.scrollHeight;

                        console.log(`üìè AFTER - Height: ${newHeight}px, ScrollHeight: ${newScrollHeight}px`);

                        if (newScrollHeight > newHeight) {
                            console.log('‚úÖ SUCCESS: Scroll is now working - content is taller than container');
                            console.log(`üìä Scrollable area: ${newScrollHeight - newHeight}px`);
                        } else {
                            console.log('‚ö†Ô∏è Still no scroll needed - trying even smaller height');

                            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ —Å–∫—Ä–æ–ª–µ—Ä, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –æ—â–µ –ø–æ-–º–∞–ª–∫–∞ –≤–∏—Å–æ—á–∏–Ω–∞
                            const evenSmallerHeight = Math.min(100, finalMaxHeight - 30);
                            popoverBody.style.maxHeight = evenSmallerHeight + 'px';

                            console.log(`üîß Trying smaller height: ${evenSmallerHeight}px`);

                            setTimeout(() => {
                                const finalHeight = popoverBody.offsetHeight;
                                const finalScrollHeight = popoverBody.scrollHeight;
                                console.log(`üìè FINAL - Height: ${finalHeight}px, ScrollHeight: ${finalScrollHeight}px`);

                                if (finalScrollHeight > finalHeight) {
                                    console.log('‚úÖ SUCCESS: Scroll finally working!');
                                } else {
                                    console.log('‚ùå FAILED: Still no scroll - may need CSS inspection');
                                }
                            }, 100);
                        }
                    }, 100);

                    console.log('‚úÖ Scroll styles applied with calculated height');

                } else {
                    console.log(`‚ÑπÔ∏è No scroll needed - only ${eventCount} events`);
                }
            });
        };

        findAndProcessPopover();

    } catch (error) {
        console.error('‚ùå Error in addScrollToPopover:', error);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä—Å–∏—Ä–∞–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–∫—Ä–æ–ª–µ—Ä –∫—ä–º –≤—Å–∏—á–∫–∏ popover –µ–ª–µ–º–µ–Ω—Ç–∏
 */
function forceAddScrollToAllPopovers() {
    console.log('üî® FORCE: Adding scroll to ALL popover-like elements...');

    // –¢—ä—Ä—Å–∏–º –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ popover –µ–ª–µ–º–µ–Ω—Ç–∏
    const selectors = [
        '.fc-popover',
        '[class*="popover"]',
        '[class*="popup"]',
        '[class*="tooltip"]'
    ];

    selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        console.log(`üîç Found ${elements.length} elements for selector: ${selector}`);

        elements.forEach((element, index) => {
            console.log(`üéØ Processing element ${index + 1} for ${selector}:`, element);

            // –ü—Ä–∏–ª–∞–≥–∞–º–µ —Å–∫—Ä–æ–ª–µ—Ä –¥–∏—Ä–µ–∫—Ç–Ω–æ –∫—ä–º –µ–ª–µ–º–µ–Ω—Ç–∞
            element.style.maxHeight = '250px';
            element.style.overflowY = 'auto';
            element.style.overflowX = 'hidden';

            // –°—ä—â–æ –∏ –∫—ä–º –¥–µ—Ü–∞—Ç–∞ –º—É
            const children = element.querySelectorAll('*');
            children.forEach(child => {
                if (child.children.length > 5) {  // –ê–∫–æ –∏–º–∞ –º–Ω–æ–≥–æ –¥–µ—Ü–∞
                    child.style.maxHeight = '250px';
                    child.style.overflowY = 'auto';
                    child.style.overflowX = 'hidden';
                }
            });
        });
    });
}

/**
 * Handles the rendering and styling of individual events
 * @param {Object} info - FullCalendar event info object
 */
function handleEventRendering(info) {
    const leaveType = info.event.extendedProps.leaveType;
    const employeeId = document.getElementById('employeeSelect')?.value?.trim();
    const isSingleEmployeeSelected = employeeId !== '';

    // Apply styling and icons only if a single employee is selected
    if (leaveType && isSingleEmployeeSelected) {
        applyLeaveTypeStyling(info, leaveType);
    }

    // Ensure proper event title display based on view mode
    updateEventTitle(info, isSingleEmployeeSelected);

    // Always add tooltip functionality
    addEventTooltip(info);

    // Add click handlers for edit/delete buttons
    addEventClickHandlers(info);
}

/**
 * Updates event title based on whether we're viewing single or all employees
 * @param {Object} info - FullCalendar event info object
 * @param {boolean} isSingleEmployeeSelected - Whether a single employee is selected
 */
function updateEventTitle(info, isSingleEmployeeSelected) {
    const titleElement = info.el.querySelector('.fc-event-title');
    if (!titleElement) return;

    const leaveType = info.event.extendedProps.leaveType;
    const eventTitle = info.event.title; // This contains the first name
    const employeeName = info.event.extendedProps.employeeName; // Full name if available

    let displayTitle = '';

    if (isSingleEmployeeSelected) {
        // Single employee view - show only first name
        displayTitle = eventTitle; // Just the first name
    } else {
        // All employees view - show first name only (no activity)
        displayTitle = eventTitle; // Just the first name
    }

    // Exception: for leave types, show the leave type instead of name
    if (leaveType) {
        if (isSingleEmployeeSelected) {
            displayTitle = leaveType; // Show leave type for single employee view
        } else {
            displayTitle = `${eventTitle}: ${leaveType}`; // Show name + leave type for all employees view
        }
    }

    titleElement.textContent = displayTitle;
    console.log(`üè∑Ô∏è Event title updated: "${displayTitle}" (Single employee: ${isSingleEmployeeSelected})`);
}

/**
 * Applies CSS classes and icons based on leave type
 * @param {Object} info - FullCalendar event info object
 * @param {string} leaveType - Type of leave (e.g., "Paid leave", "Sick leave")
 */
function applyLeaveTypeStyling(info, leaveType) {
    // Generate CSS class name from leave type
    const className = `leave-${leaveType.toLowerCase().replace(/\s+/g, '-')}`;
    const cellEl = info.el.closest('.fc-daygrid-day');

    if (cellEl) {
        cellEl.classList.add(className);

        // Remove existing icon if present (for re-renders)
        const existingIcon = cellEl.querySelector('.leave-icon');
        if (existingIcon) {
            existingIcon.remove();
        }

        // Add appropriate icon based on leave type
        const icon = getLeaveTypeIcon(leaveType);
        if (icon) {
            const iconEl = document.createElement('div');
            iconEl.className = 'leave-icon';
            if (typeof icon === 'string' && icon.endsWith('.png')) {
                const img = document.createElement('img');
                img.src = icon;
                img.alt = leaveType;
                img.style.width = '20px';
                img.style.height = '20px';
                iconEl.appendChild(img);
            } else {
                iconEl.textContent = icon; // –ê–∫–æ –µ emoji
            }
            cellEl.appendChild(iconEl);
        }
    }
}

/**
 * Returns the appropriate emoji icon for a leave type
 * @param {string} leaveType - Type of leave
 * @returns {string} Emoji icon
 */
function getLeaveTypeIcon(leaveType) {
    switch (leaveType.toLowerCase()) {
        case 'paid leave':
        case 'unpaid leave':
            return 'üõ´'; // Airplane emoji
        case 'maternity':
        case 'paternity':
            return 'üçº'; // Baby bottle emoji
        case 'sick leave':
            return 'üå°Ô∏è'; // Thermometer emoji
        case 'training':
            return 'üìö'; // Books emoji
        default:
            return '';
    }
}

/**
 * –ü–û–ü–†–ê–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤—è tooltip –∫—ä–º —Å—ä–±–∏—Ç–∏–µ —Å drag handling
 * @param {Object} info - FullCalendar event info object
 */
function addEventTooltip(info) {
    console.log('üè∑Ô∏è Adding FIXED tooltip to event:', info.event.title);

    const leaveType = info.event.extendedProps.leaveType;

    // –°—ä–∑–¥–∞–≤–∞–º–µ —É–Ω–∏–∫–∞–ª–µ–Ω tooltip –∑–∞ –≤—Å—è–∫–æ —Å—ä–±–∏—Ç–∏–µ
    const tooltip = document.createElement('div');
    tooltip.className = 'event-tooltip';
    tooltip.style.cssText = `
        position: absolute;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 12px;
        line-height: 1.4;
        white-space: nowrap;
        z-index: 10000;
        pointer-events: none;
        display: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        max-width: 250px;
        word-wrap: break-word;
        white-space: normal;
    `;

    // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ tooltip-–∞
    const eventTitle = info.event.title;
    const employeeName = info.event.extendedProps.employeeName;
    const activity = info.event.extendedProps.activity;
    const employeeId = document.getElementById('employeeSelect')?.value?.trim();
    const isSingleEmployeeSelected = employeeId !== '';

    const nameToShow = employeeName || eventTitle;
    let tooltipContent = '';

    if (leaveType) {
        // Leave event tooltip
        if (isSingleEmployeeSelected) {
            tooltipContent = `<strong>${leaveType}</strong>`;
        } else {
            tooltipContent = `<strong>${nameToShow}</strong><br>${leaveType}`;
        }
    } else {
        // Regular work event tooltip with time and activity
        const startTime = new Date(info.event.start).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
        });
        const endTime = new Date(info.event.end).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
        });

        if (isSingleEmployeeSelected) {
            tooltipContent = `<strong>${startTime} - ${endTime}</strong><br>${activity || 'Work Shift'}`;
        } else {
            tooltipContent = `<strong>${nameToShow}</strong><br>${startTime} - ${endTime}<br>${activity || 'Work Shift'}`;
        }
    }

    tooltip.innerHTML = tooltipContent;
    document.body.appendChild(tooltip);

    // –î–æ–±–∞–≤—è–º–µ tooltip –∫—ä–º –Ω–∞–±–æ—Ä–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω–∏ tooltip-–æ–≤–µ
    activeTooltips.add(tooltip);

    // –ù–∞–º–∏—Ä–∞–º–µ title –µ–ª–µ–º–µ–Ω—Ç–∞
    const titleElement = info.el.querySelector('.fc-event-title');
    if (titleElement) {
        titleElement.style.cursor = 'pointer';

        // –ü–û–ü–†–ê–í–ï–ù–ò EVENT LISTENERS –° DRAG HANDLING

        // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ tooltip
        const showTooltipHandler = function(e) {
            // –ù–µ –ø–æ–∫–∞–∑–≤–∞–º–µ tooltip –∞–∫–æ –∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è
            if (isDragging) {
                console.log('üö´ Tooltip blocked - drag in progress');
                return;
            }

            tooltip.style.display = 'block';
            tooltip.style.left = e.pageX + 10 + 'px';
            tooltip.style.top = e.pageY + 10 + 'px';
            console.log('üëÅÔ∏è Tooltip shown for:', info.event.title);
        };

        // –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ tooltip
        const moveTooltipHandler = function(e) {
            // –°–∫—Ä–∏–≤–∞–º–µ tooltip –∞–∫–æ –∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è
            if (isDragging) {
                tooltip.style.display = 'none';
                return;
            }

            if (tooltip.style.display !== 'none') {
                tooltip.style.left = e.pageX + 10 + 'px';
                tooltip.style.top = e.pageY + 10 + 'px';
            }
        };

        // –°–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ tooltip
        const hideTooltipHandler = function() {
            tooltip.style.display = 'none';
            console.log('üëÅÔ∏è Tooltip hidden for:', info.event.title);
        };

        // –ù–û–í–ò DRAG EVENT HANDLERS
        const dragStartHandler = function(e) {
            console.log('üñ±Ô∏è Drag started - hiding all tooltips');
            isDragging = true;
            hideAllTooltips();
        };

        const dragEndHandler = function(e) {
            console.log('üñ±Ô∏è Drag ended - enabling tooltips');
            // –ú–∞–ª–∫–∞ –∑–∞–±–∞–≤–∫–∞ –∑–∞ –¥–∞ —Å–µ —É–≤–µ—Ä–∏–º —á–µ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–∏–∫–ª—é—á–∏–ª–∞
            setTimeout(() => {
                isDragging = false;
            }, 100);
        };

        // –î–æ–±–∞–≤—è–º–µ mouse event listeners
        titleElement.addEventListener('mouseenter', showTooltipHandler);
        titleElement.addEventListener('mousemove', moveTooltipHandler);
        titleElement.addEventListener('mouseleave', hideTooltipHandler);

        // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤—è–º–µ drag event listeners
        titleElement.addEventListener('dragstart', dragStartHandler);
        titleElement.addEventListener('dragend', dragEndHandler);

        // –ó–∞ FullCalendar drag —Å—ä–±–∏—Ç–∏—è
        info.el.addEventListener('dragstart', dragStartHandler);
        info.el.addEventListener('dragend', dragEndHandler);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∫—ä–º handlers –∑–∞ eventual cleanup
        tooltip._handlers = {
            showTooltipHandler,
            moveTooltipHandler,
            hideTooltipHandler,
            dragStartHandler,
            dragEndHandler
        };
        tooltip._titleElement = titleElement;
        tooltip._eventElement = info.el;
    }

    console.log('‚úÖ FIXED tooltip added with drag handling');
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ –≤—Å–∏—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏ tooltip-–æ–≤–µ
 */
function hideAllTooltips() {
    console.log(`üßπ Hiding ${activeTooltips.size} active tooltips`);

    activeTooltips.forEach(tooltip => {
        if (tooltip && tooltip.style) {
            tooltip.style.display = 'none';
            tooltip.style.visibility = 'hidden';
            tooltip.style.opacity = '0';
        }
    });
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ—á–∏—Å—Ç–≤–∞ –≤—Å–∏—á–∫–∏ tooltip-–æ–≤–µ
 */
function cleanupAllTooltips() {
    console.log(`üóëÔ∏è Cleaning up ${activeTooltips.size} tooltips`);

    activeTooltips.forEach(tooltip => {
        try {
            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ event listeners
            if (tooltip._handlers && tooltip._titleElement) {
                const handlers = tooltip._handlers;
                const titleElement = tooltip._titleElement;
                const eventElement = tooltip._eventElement;

                titleElement.removeEventListener('mouseenter', handlers.showTooltipHandler);
                titleElement.removeEventListener('mousemove', handlers.moveTooltipHandler);
                titleElement.removeEventListener('mouseleave', handlers.hideTooltipHandler);
                titleElement.removeEventListener('dragstart', handlers.dragStartHandler);
                titleElement.removeEventListener('dragend', handlers.dragEndHandler);

                if (eventElement) {
                    eventElement.removeEventListener('dragstart', handlers.dragStartHandler);
                    eventElement.removeEventListener('dragend', handlers.dragEndHandler);
                }
            }

            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ tooltip –æ—Ç DOM
            if (tooltip.parentNode) {
                tooltip.parentNode.removeChild(tooltip);
            }
        } catch (error) {
            console.error('‚ö†Ô∏è Error cleaning up tooltip:', error);
        }
    });

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –Ω–∞–±–æ—Ä–∞
    activeTooltips.clear();
}

/**
 * Adds click handlers for edit and delete functionality
 * @param {Object} info - FullCalendar event info object
 */
function addEventClickHandlers(info) {
    const titleElement = info.el.querySelector('.fc-event-title');
    if (!titleElement) return;

    // Click handler —Å —É—Å–ª–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞
    titleElement.addEventListener('click', function(event) {
        event.stopPropagation(); // –°–ø–∏—Ä–∞–º–µ event bubbling

        // –ü–†–û–í–ï–†–Ø–í–ê–ú–ï –î–ê–õ–ò –§–û–†–ú–ê–¢–ê –ó–ê –ù–û–í–ò –°–™–ë–ò–¢–ò–Ø –ï –û–¢–í–û–†–ï–ù–ê
        const eventForm = document.getElementById('event-form');
        const isNewEventFormOpen = eventForm &&
                                   eventForm.style.display !== 'none' &&
                                   !eventForm.classList.contains('hidden');

        console.log('üñ±Ô∏è Event clicked');
        console.log('üìã New event form open:', isNewEventFormOpen);

        if (isNewEventFormOpen) {
            // COPY –†–ï–ñ–ò–ú - –§–æ—Ä–º–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏ —Å—ä–±–∏—Ç–∏—è –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞
            console.log('üìã Copy mode activated - copying event data to form');
            handleEventCopy(info, event);
        } else {
            // EDIT/DELETE –†–ï–ñ–ò–ú - –§–æ—Ä–º–∞—Ç–∞ –Ω–µ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞, –ø–æ–∫–∞–∑–≤–∞–º–µ –±—É—Ç–æ–Ω–∏
            console.log('‚úèÔ∏è Edit mode activated - showing edit/delete buttons');
            handleEventEditButtons(info);
        }
    });

    // –î–û–ë–ê–í–Ø–ù–ï –í–ò–ó–£–ê–õ–ï–ù HINT –ó–ê –ü–û–¢–†–ï–ë–ò–¢–ï–õ–Ø
    titleElement.style.cursor = 'pointer';

    // –î–∏–Ω–∞–º–∏—á–µ–Ω tooltip —Å–ø–æ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const eventForm = document.getElementById('event-form');
    const isFormOpen = eventForm &&
                       eventForm.style.display !== 'none' &&
                       !eventForm.classList.contains('hidden');

    if (isFormOpen) {
        titleElement.title = 'Click to copy this shift\'s details to create a new one';
    } else {
        titleElement.title = 'Click to edit or delete this shift';
    }
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ –≤—Å–∏—á–∫–∏ —Ñ–æ—Ä–º–∏ –∏ –±—É—Ç–æ–Ω–∏
 */
function hideAllFormsAndButtons() {
    console.log('üìí Hiding all forms and buttons...');

    // –°–∫—Ä–∏–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm) {
        editEventForm.style.display = 'none';
    }

    // –°–∫—Ä–∏–≤–∞–º–µ employee —Ñ–æ—Ä–º–∞—Ç–∞
    const employeeForm = document.getElementById('employeeForm');
    if (employeeForm) {
        employeeForm.classList.add('hidden');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ employee list
    const employeeListContainer = document.getElementById('employeeListContainer');
    if (employeeListContainer) {
        employeeListContainer.classList.add('hidden');
    }

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ edit/delete –±—É—Ç–æ–Ω–∏
    if (typeof removeExistingButtons === 'function') {
        removeExistingButtons();
    }

    console.log('‚úÖ All forms and buttons hidden');
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ö–æ–ø–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Å—ä–±–∏—Ç–∏–µ—Ç–æ –≤ –ø–æ–ª–µ—Ç–∞—Ç–∞ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ —Ñ–æ—Ä–º–∞
 * @param {Object} eventObj - FullCalendar event object
 */
function copyEventDataToNewEventForm(eventObj) {
    console.log('üìù Copying event data to new event form...');

    // –ü–æ–ª—É—á–∞–≤–∞–º–µ form –ø–æ–ª–µ—Ç–∞—Ç–∞
    const startTimeInput = document.getElementById('start-time');
    const endTimeInput = document.getElementById('end-time');
    const activityInput = document.getElementById('activityInput');
    const leaveTypeInput = document.getElementById('leaveType');

    // –ü–†–û–í–ï–†–Ø–í–ê–ú–ï –î–ê–õ–ò –ï –û–¢–ü–£–°–ö
    const leaveType = eventObj.extendedProps?.leaveType;

    if (leaveType) {
        // –ê–ö–û –ï –û–¢–ü–£–°–ö - –∫–æ–ø–∏—Ä–∞–º–µ —Å–∞–º–æ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫
        console.log('üìÖ Copying leave type:', leaveType);

        if (leaveTypeInput) {
            leaveTypeInput.value = leaveType;

            // –ó–∞–¥–µ–π—Å—Ç–≤–∞–º–µ change event –∑–∞ –¥–∞ —Å–µ –∞–∫—Ç–∏–≤–∏—Ä–∞ –ª–æ–≥–∏–∫–∞—Ç–∞ –∑–∞ –æ—Ç–ø—É—Å–∫
            const changeEvent = new Event('change', { bubbles: true });
            leaveTypeInput.dispatchEvent(changeEvent);
        }

        // –ó–∞ –æ—Ç–ø—É—Å–∫ –Ω–µ –∫–æ–ø–∏—Ä–∞–º–µ —á–∞—Å–æ–≤–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
        if (startTimeInput) startTimeInput.value = '';
        if (endTimeInput) endTimeInput.value = '';
        if (activityInput) activityInput.value = '';

    } else {
        // –ê–ö–û –ï –†–ê–ë–û–¢–ù–ê –°–ú–Ø–ù–ê - –∫–æ–ø–∏—Ä–∞–º–µ —á–∞—Å–æ–≤–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
        console.log('‚è∞ Copying work shift data...');

        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –æ—Ç–ø—É—Å–∫–∞ –ø—ä—Ä–≤–æ
        if (leaveTypeInput) {
            leaveTypeInput.value = '';
        }

        // –ö–æ–ø–∏—Ä–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ
        if (startTimeInput && eventObj.start) {
            const startTime = formatTimeForInput(new Date(eventObj.start));
            startTimeInput.value = startTime;
            console.log('üïê Start time copied:', startTime);
        }

        if (endTimeInput && eventObj.end) {
            const endTime = formatTimeForInput(new Date(eventObj.end));
            endTimeInput.value = endTime;
            console.log('üïï End time copied:', endTime);
        }

        // –ö–æ–ø–∏—Ä–∞–º–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞
        const activity = eventObj.extendedProps?.activity;
        if (activityInput && activity) {
            activityInput.value = activity;
            console.log('üìã Activity copied:', activity);

            // –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ floating label –∞–∫–æ –∏–º–∞
            const activityLabel = document.querySelector('label[for="activityInput"]');
            if (activityLabel) {
                activityLabel.classList.add('floating');
            }
        }
    }

    console.log('‚úÖ Event data copied to form fields');
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ –Ω–æ–≤–∞—Ç–∞ —Ñ–æ—Ä–º–∞ –≤ copy —Ä–µ–∂–∏–º
 * @param {Object} eventObj - FullCalendar event object
 */
function showNewEventFormInCopyMode(eventObj) {
    console.log('üìù Showing new event form in copy mode...');

    // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'block';
    }

    // –ó–∞–¥–∞–≤–∞–º–µ copy —Ä–µ–∂–∏–º —Ñ–ª–∞–≥–æ–≤–µ—Ç–µ
    const copyFromEventIdInput = document.getElementById('copy-from-event-id');
    const isCopyingEventInput = document.getElementById('is-copying-event');
    const copyInfoBanner = document.getElementById('copy-info-banner');
    const copySourceInfo = document.getElementById('copy-source-info');
    const saveBtnText = document.getElementById('save-btn-text');
    const saveBtnCopyText = document.getElementById('save-btn-copy-text');

    // –ó–∞–¥–∞–≤–∞–º–µ copy –¥–∞–Ω–Ω–∏
    if (copyFromEventIdInput) {
        copyFromEventIdInput.value = eventObj.id;
    }

    if (isCopyingEventInput) {
        isCopyingEventInput.value = 'true';
    }

    // –ü–æ–∫–∞–∑–≤–∞–º–µ copy banner
    if (copyInfoBanner && copySourceInfo) {
        const startTime = formatTimeForInput(new Date(eventObj.start));
        const endTime = formatTimeForInput(new Date(eventObj.end));
        const sourceText = `${eventObj.title} (${startTime} - ${endTime})`;
        copySourceInfo.textContent = sourceText;
        copyInfoBanner.style.display = 'block';
    }

    // –ü—Ä–æ–º–µ–Ω—è–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ Save –±—É—Ç–æ–Ω–∞
    if (saveBtnText && saveBtnCopyText) {
        saveBtnText.style.display = 'none';
        saveBtnCopyText.style.display = 'inline';
    }

    // –§–æ–∫—É—Å–∏—Ä–∞–º–µ –≤—ä—Ä—Ö—É –ø—ä—Ä–≤–æ—Ç–æ –ø–æ–ª–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
    setTimeout(() => {
        const startTimeInput = document.getElementById('start-time');
        if (startTimeInput && !startTimeInput.disabled) {
            startTimeInput.focus();
        }
    }, 100);

    console.log('‚úÖ New event form shown in copy mode');
}

function handleEventCopy(info, clickEvent) {
    console.log('üìã Event data:', {
        id: info.event.id,
        title: info.event.title,
        start: info.event.start,
        end: info.event.end,
        activity: info.event.extendedProps.activity,
        leaveType: info.event.extendedProps.leaveType
    });

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
    const employeeSelect = document.getElementById('employeeSelect');
    const employeeId = employeeSelect?.value?.trim();

    if (!employeeId) {
        alert('Please select an employee before copying shift data.');
        console.log('üö´ No employee selected - cannot copy shift data');
        return;
    }

    // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ —Ñ–æ—Ä–º–∏ –∏ –±—É—Ç–æ–Ω–∏
    hideAllFormsAndButtons();

    // –ö–æ–ø–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Å—ä–±–∏—Ç–∏–µ—Ç–æ –≤ –Ω–æ–≤–∞—Ç–∞ —Ñ–æ—Ä–º–∞
    copyEventDataToNewEventForm(info.event);

    // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ copy —Ä–µ–∂–∏–º
    showNewEventFormInCopyMode(info.event);

    // –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞ (–∞–∫–æ –∏–º–∞) –∏–ª–∏ –∑–∞–¥–∞–≤–∞–º–µ –¥–Ω–µ—à–Ω–∞—Ç–∞
    setSelectedDateForNewEvent();

    console.log('‚úÖ Event data copied to form, preserving selected date');
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–≤–∞ edit/delete –±—É—Ç–æ–Ω–∏—Ç–µ (—Å—Ç–∞—Ä–∏—è —Ä–µ–∂–∏–º)
 */
function handleEventEditButtons(info) {
    console.log('‚úèÔ∏è Showing edit/delete buttons for event:', info.event.title);

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –±—É—Ç–æ–Ω–∏
    removeExistingButtons();

    // –°—ä–∑–¥–∞–≤–∞–º–µ –∏ –¥–æ–±–∞–≤—è–º–µ edit –±—É—Ç–æ–Ω
    createEditButton(info, info.el.querySelector('.fc-event-title'));

    // –°—ä–∑–¥–∞–≤–∞–º–µ –∏ –¥–æ–±–∞–≤—è–º–µ delete –±—É—Ç–æ–Ω
    createDeleteButton(info, info.el.querySelector('.fc-event-title'));
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞–¥–∞–≤–∞ –¥–∞—Ç–∞ –∑–∞ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
 * –õ–û–ì–ò–ö–ê: –ó–∞–ø–∞–∑–≤–∞ –≤–µ—á–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞, –∞–∫–æ –∏–º–∞ —Ç–∞–∫–∞–≤–∞
 */
function setSelectedDateForNewEvent() {
    const selectedDateInput = document.getElementById('selected-date');
    if (selectedDateInput) {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤–µ—á–µ –∏–º–∞ –∏–∑–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
        if (selectedDateInput.value && selectedDateInput.value.trim() !== '') {
            // –ò–º–∞ –≤–µ—á–µ –∏–∑–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ - –∑–∞–ø–∞–∑–≤–∞–º–µ —è
            console.log('üìÖ Keeping previously selected date:', selectedDateInput.value);
            return;
        }

        // –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ - –∑–∞–¥–∞–≤–∞–º–µ –¥–Ω–µ—à–Ω–∞—Ç–∞
        const today = new Date();
        const todayString = today.toISOString().split('T')[0]; // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
        selectedDateInput.value = todayString;
        console.log('üìÖ No date selected - setting today as default:', todayString);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å—Ç–≤–∞ copy —Ä–µ–∂–∏–º–∞ –∏ –≤—Ä—ä—â–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ—Ä–º–∞–ª–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –∫–æ–≥–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–ª–∏–∫–Ω–µ –Ω–∞ X –±—É—Ç–æ–Ω–∞ –≤ copy banner-–∞
 */
function clearCopyMode() {
    console.log('üßπ Clearing copy mode...');

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ copy —Ñ–ª–∞–≥–æ–≤–µ—Ç–µ
    const copyFromEventIdInput = document.getElementById('copy-from-event-id');
    const isCopyingEventInput = document.getElementById('is-copying-event');

    if (copyFromEventIdInput) {
        copyFromEventIdInput.value = '';
    }

    if (isCopyingEventInput) {
        isCopyingEventInput.value = 'false';
    }

    // –°–∫—Ä–∏–≤–∞–º–µ copy banner
    const copyInfoBanner = document.getElementById('copy-info-banner');
    if (copyInfoBanner) {
        copyInfoBanner.style.display = 'none';
    }

    // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ç–µ–∫—Å—Ç –Ω–∞ Save –±—É—Ç–æ–Ω–∞
    const saveBtnText = document.getElementById('save-btn-text');
    const saveBtnCopyText = document.getElementById('save-btn-copy-text');

    if (saveBtnText && saveBtnCopyText) {
        saveBtnText.style.display = 'inline';
        saveBtnCopyText.style.display = 'none';
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∞
    clearAllFormFields();

    console.log('‚úÖ Copy mode cleared successfully');
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å—Ç–≤–∞ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∞
 */
function clearAllFormFields() {
    console.log('üßπ Clearing all form fields...');

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Ä–µ–º–µ–≤–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
    const startTimeInput = document.getElementById('start-time');
    const endTimeInput = document.getElementById('end-time');

    if (startTimeInput) {
        startTimeInput.value = '';
        startTimeInput.disabled = false;
    }

    if (endTimeInput) {
        endTimeInput.value = '';
        endTimeInput.disabled = false;
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ activity –ø–æ–ª–µ—Ç–æ
    const activityInput = document.getElementById('activityInput');
    if (activityInput) {
        activityInput.value = '';
        activityInput.disabled = false;

        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ floating label –∫–ª–∞—Å–∞
        const activityLabel = document.querySelector('label[for="activityInput"]');
        if (activityLabel) {
            activityLabel.classList.remove('floating');
        }
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ leave type –ø–æ–ª–µ—Ç–æ
    const leaveTypeInput = document.getElementById('leaveType');
    if (leaveTypeInput) {
        leaveTypeInput.value = '';
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ selected date –ø–æ–ª–µ—Ç–æ
    const selectedDateInput = document.getElementById('selected-date');
    if (selectedDateInput) {
        selectedDateInput.value = '';
    }

    console.log('‚úÖ All form fields cleared');
}

/**
 * Removes existing edit/delete buttons and hides edit form
 */
function removeExistingButtons() {
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ edit –±—É—Ç–æ–Ω–∞
    if (currentlyVisibleEditButton) {
        currentlyVisibleEditButton.remove();
        currentlyVisibleEditButton = null;
        console.log('üóëÔ∏è Edit button removed');
    }

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ delete –±—É—Ç–æ–Ω–∞
    if (currentlyVisibleDeleteButton) {
        currentlyVisibleDeleteButton.remove();
        currentlyVisibleDeleteButton = null;
        console.log('üóëÔ∏è Delete button removed');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm) {
        editEventForm.style.display = 'none';
        console.log('üìù Edit event form hidden');
    }
}

/**
 * Creates and displays the edit button for an event
 * @param {Object} info - FullCalendar event info object
 * @param {HTMLElement} titleElement - Event title element
 */
function createEditButton(info, titleElement) {
    // –°—ä–∑–¥–∞–≤–∞–º–µ edit –±—É—Ç–æ–Ω–∞ –∫–∞–∫—Ç–æ –ø—Ä–µ–¥–∏
    const editButton = document.createElement('button');
    editButton.className = 'edit-button';
    editButton.innerHTML = '‚úèÔ∏è';
    titleElement.parentNode.appendChild(editButton);
    currentlyVisibleEditButton = editButton;

    // –î–æ–±–∞–≤—è–º–µ event listener –∑–∞ –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É edit –±—É—Ç–æ–Ω–∞
    editButton.addEventListener('click', function(e) {
        e.stopPropagation();

        console.log('‚úèÔ∏è Edit button clicked - opening edit form');

        // ========================================
        // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –°–ö–†–ò–í–ê–ù–ï –í–°–ò–ß–ö–ò –î–†–£–ì–ò –§–û–†–ú–ò –ü–†–ï–î–ò –û–¢–í–û–†–ò–ú EDIT –§–û–†–ú–ê–¢–ê
        // ========================================

        // 1. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏ —Å—ä–±–∏—Ç–∏—è (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const eventForm = document.getElementById('event-form');
        if (eventForm && eventForm.style.display !== 'none') {
            console.log('üìí Hiding new event form to show edit form');
            eventForm.style.display = 'none';
        }

        // 2. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const employeeForm = document.getElementById('employeeForm');
        if (employeeForm && !employeeForm.classList.contains('hidden')) {
            console.log('üìí Hiding employee form to show edit form');
            employeeForm.classList.add('hidden');

            // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ employee select –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
            const employeeSelect = document.getElementById('employeeSelect');
            const selectLabel = document.querySelector('label[for="employeeSelect"]');
            const addEmployeeBtn = document.getElementById('addEmployeeBtn');

            if (employeeSelect) employeeSelect.classList.remove('hidden');
            if (selectLabel) selectLabel.classList.remove('hidden');
            if (addEmployeeBtn) addEmployeeBtn.classList.remove('hidden');
        }

        // 3. –°–∫—Ä–∏–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω)
        const employeeListContainer = document.getElementById('employeeListContainer');
        if (employeeListContainer && !employeeListContainer.classList.contains('hidden')) {
            console.log('üìí Hiding employee list to show edit form');
            employeeListContainer.classList.add('hidden');

            // –°–∫—Ä–∏–≤–∞–º–µ –∏ search input-–∞
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.style.display = 'none';
            }
        }

        // 4. –°–∫—Ä–∏–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const weeklyScheduleSection = document.getElementById('weekly-schedule-section');
        if (weeklyScheduleSection && !weeklyScheduleSection.classList.contains('hidden')) {
            console.log('üìí Hiding weekly schedule to show edit form');
            weeklyScheduleSection.classList.add('hidden');
        }

        // ========================================
        // –û–†–ò–ì–ò–ù–ê–õ–ù–ê –õ–û–ì–ò–ö–ê: –†–ê–ó–®–ò–†–Ø–í–ê–ù–ï –ù–ê SIDEBAR (–ê–ö–û –ï –ù–£–ñ–ù–û)
        // ========================================

        // –î–ò–†–ï–ö–¢–ù–û –†–ê–ó–®–ò–†–Ø–í–ê–ù–ï: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∏ —Ä–∞–∑—à–∏—Ä—è–≤–∞–º–µ sidebar
        const sidebar = document.getElementById('sidebar');
        if (sidebar && sidebar.classList.contains('collapsed')) {
            console.log('üìÇ Sidebar is collapsed, expanding for edit form...');

            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ collapsed –∫–ª–∞—Å–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ
            sidebar.classList.remove('collapsed');

            // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ toggle –±—É—Ç–æ–Ω–∞
            if (typeof updateToggleButton === 'function') {
                updateToggleButton(false);
            }

            // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
            localStorage.setItem('sidebarCollapsed', 'false');

            // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
            setTimeout(() => {
                if (window.calendar && typeof window.calendar.updateSize === 'function') {
                    window.calendar.updateSize();
                }
            }, 350);
        }

        // ========================================
        // –û–†–ò–ì–ò–ù–ê–õ–ù–ê –õ–û–ì–ò–ö–ê: –ü–û–ö–ê–ó–í–ê–ù–ï –ù–ê EDIT –§–û–†–ú–ê–¢–ê
        // ========================================

        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ª–µ–¥ –º–∞–ª–∫–∞ –ø–∞—É–∑–∞ (–∞–∫–æ sidebar –±–µ—à–µ —Å–≤–∏—Ç)
        const delay = sidebar && sidebar.classList.contains('collapsed') ? 350 : 0;
        setTimeout(() => {
            console.log('üìù Populating and showing edit form...');

            // –ü–æ–ø—ä–ª–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –≤ edit —Ñ–æ—Ä–º–∞—Ç–∞
            const start = new Date(info.event.start);
            const end = new Date(info.event.end);
            const dateOnly = start.toISOString().split('T')[0];

            // –ó–∞–¥–∞–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ –≤ –ø–æ–ª–µ—Ç–∞—Ç–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            document.getElementById('edit-event-id').value = info.event.id;
            document.getElementById('edit-start-time').value = formatTimeForInput(start);
            document.getElementById('edit-end-time').value = formatTimeForInput(end);
            document.getElementById('edit-activity').value = info.event.extendedProps.activity || '';
            document.getElementById('current-event-date').value = dateOnly;

            // –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ floating label –∑–∞ activity –ø–æ–ª–µ—Ç–æ –∞–∫–æ –∏–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
            const activitySelect = document.getElementById('edit-activity');
            const activityLabel = document.querySelector('label[for="edit-activity"]');
            if (activitySelect.value && activityLabel) {
                activityLabel.classList.add('floating');
            }

            // –ü–æ–∫–∞–∑–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞
            document.getElementById('edit-event-form').style.display = 'block';

            // –°–∫—Ä–∏–≤–∞–º–µ edit –∏ delete –±—É—Ç–æ–Ω–∏—Ç–µ —Å–ª–µ–¥ –∫–∞—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ –ø–æ–∫–∞–∂–µ
            hideEditDeleteButtons();
            console.log('üìí Edit and delete buttons hidden after form opened');
            console.log('‚úÖ Edit form opened successfully');

        }, delay);
    });
}

// –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ edit –∏ delete –±—É—Ç–æ–Ω–∏—Ç–µ
function hideEditDeleteButtons() {
    if (currentlyVisibleEditButton) {
        currentlyVisibleEditButton.style.display = 'none';
        console.log('üìí Edit button hidden while form is open');
    }
    if (currentlyVisibleDeleteButton) {
        currentlyVisibleDeleteButton.style.display = 'none';
        console.log('üìí Delete button hidden while form is open');
    }
}

/**
 * Creates and displays the delete button for an event
 * –°–µ–≥–∞ –∏–∑–ø–æ–ª–∑–≤–∞ –æ–±—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
 * @param {Object} info - FullCalendar event info object
 * @param {HTMLElement} titleElement - Event title element
 */
function createDeleteButton(info, titleElement) {
    const deleteButton = document.createElement('button');
    deleteButton.className = 'delete-button';
    deleteButton.innerHTML = '‚ùå';
    titleElement.parentNode.appendChild(deleteButton);
    currentlyVisibleDeleteButton = deleteButton;

    deleteButton.addEventListener('click', function (e) {
        e.stopPropagation();

        if (confirm("Are you sure you want to delete this event?")) {
            fetch(`http://localhost:8080/events/${info.event.id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –æ—Ç FullCalendar
                    const calendarEvent = calendar.getEventById(info.event.id);
                    if (calendarEvent) {
                        calendarEvent.remove(); // üî• –≤–∞–∂–Ω–æ!
                    }

                    // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ leave-* –∫–ª–∞—Å–æ–≤–µ
                    const eventDate = info.event.startStr;
                    const cell = document.querySelector(`[data-date="${eventDate}"]`);
                    if (cell) {
                        [...cell.classList].forEach(cls => {
                            if (cls.startsWith('leave-')) {
                                cell.classList.remove(cls);
                            }
                        });
                        const icon = cell.querySelector('.leave-icon');
                        if (icon) icon.remove();
                    }

                    // –ü–æ—á–∏—Å—Ç–∏ UI –±—É—Ç–æ–Ω–∏ (–∞–∫–æ –∏–º–∞)
                    removeExistingButtons();

                    // üîÑ –ü—Ä–µ–∑–∞—Ä–µ–¥–∏ —Å—ä–±–∏—Ç–∏—è—Ç–∞ (–ø–æ –∏–∑–±–æ—Ä, –∞–∫–æ –Ω–µ —Ä–∞–±–æ—Ç–∏ .remove())
                    calendar.refetchEvents?.(); // —Å–∞–º–æ –∞–∫–æ –∏–∑–ø–æ–ª–∑–≤–∞—à dynamic fetch

                    alert("‚úÖ Event deleted successfully!");
                } else {
                    alert("‚ö†Ô∏è Failed to delete event.");
                }
            })
            .catch(error => {
                console.error("‚ö†Ô∏è Error deleting event:", error);
                alert("‚ö†Ô∏è An error occurred while deleting the event.");
            });
        }
    });

}

/**
 * Loads events from the backend API
 * Handles both individual employee view and all employees view
 * @param {HTMLSelectElement} employeeSelect - Employee selection dropdown
 * @param {Function} successCallback - Callback for successful load
 * @param {Function} failureCallback - Callback for failed load
 */
function loadCalendarEvents(employeeSelect, successCallback, failureCallback) {
    const employeeId = employeeSelect.value.trim();
    const url = 'http://localhost:8080/events'; // Always load all events from backend

    console.log(`üìÑ Loading events for employee ID: "${employeeId}" (empty = all employees)`);

    fetch(url)
        .then(response => {
            console.log("üì° Response status:", response.status);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return response.json();
        })
        .then(allEvents => {
            console.log("üì• All events from server:", allEvents);

            // Ensure we have an array
            if (!Array.isArray(allEvents)) {
                console.warn("‚ö†Ô∏è Server returned non-array data, converting to array");
                allEvents = [];
            }

            let filteredEvents = allEvents;

            // If specific employee is selected, filter events to show only that employee's schedule
            if (employeeId && employeeId !== "") {
                const selectedEmployeeName = employeeSelect.options[employeeSelect.selectedIndex]?.textContent?.trim();
                const selectedFirstName = selectedEmployeeName.split(' ')[0]; // Extract first name only

                console.log(`üéØ Filtering events for employee: "${selectedEmployeeName}" (first name: "${selectedFirstName}")`);

                // Filter events by matching first name (since title contains only first name)
                filteredEvents = allEvents.filter(event => {
                    const eventTitle = event.title?.trim();
                    const eventEmployeeName = event.employeeName?.trim();
                    const eventEmployeeId = event.employee?.id?.toString();

                    // Strategy 1: Match by first name in title (most likely scenario)
                    const matchByTitle = eventTitle === selectedFirstName;

                    // Strategy 2: Match by first name in employeeName field
                    const eventFirstName = eventEmployeeName?.split(' ')[0];
                    const matchByEmployeeName = eventFirstName === selectedFirstName;

                    // Strategy 3: Match by employee ID (most reliable)
                    const matchByEmployeeId = eventEmployeeId === employeeId;

                    const matches = matchByTitle || matchByEmployeeName || matchByEmployeeId;

                    if (matches) {
                        console.log(`‚úÖ Event matches:`, {
                            eventTitle: eventTitle,
                            eventEmployeeName: eventEmployeeName,
                            selectedFirstName: selectedFirstName,
                            selectedFullName: selectedEmployeeName,
                            matchStrategy: matchByTitle ? 'title(firstName)' :
                                         matchByEmployeeName ? 'employeeName(firstName)' :
                                         matchByEmployeeId ? 'employeeId' : 'unknown'
                        });
                    }

                    return matches;
                });

                console.log(`üìä Filtered to ${filteredEvents.length} events for ${selectedEmployeeName} (searching by first name: ${selectedFirstName})`);

                // If no events found, show debugging info
                if (filteredEvents.length === 0) {
                    console.warn("üö® No events found! Debugging info:");
                    console.log("Selected employee ID:", employeeId);
                    console.log("Selected first name:", selectedFirstName);
                    console.log("All event titles:", allEvents.map(e => e.title).filter(Boolean));
                    console.log("All employee IDs in events:", allEvents.map(e => e.employee?.id).filter(Boolean));
                }
            } else {
                // No employee selected - show all employees' events
                console.log(`üìä Showing all events (${filteredEvents.length} total)`);
            }

            console.log("üìã Final filtered events:", filteredEvents);

            // Clean up previous styling before rendering new events
            cleanupPreviousEventStyling();

            // Pass the filtered events to FullCalendar
            successCallback(filteredEvents);
        })
        .catch(error => {
            console.error('‚ö†Ô∏è Error loading events:', error);

            // Show more detailed error information
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                console.error('üìå Network error - check if backend server is running on http://localhost:8080');
                alert('Cannot connect to server. Please check if the backend is running.');
            } else {
                console.error('üì° Server error:', error.message);
                alert(`Error loading events: ${error.message}`);
            }

            failureCallback(error);
        });
}

/**
 * Removes CSS classes and icons from previous event renderings
 */
function cleanupPreviousEventStyling() {
    console.log('üßπ Cleaning up previous event styling...');

    // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏ –∫–ª–µ—Ç–∫–∏
    const calendarCells = document.querySelectorAll('.fc-daygrid-day');
    let cleanedItems = 0;

    calendarCells.forEach(cell => {
        // –°–¢–™–ü–ö–ê 1: –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ leave CSS –∫–ª–∞—Å–æ–≤–µ
        const classesToRemove = [];
        cell.classList.forEach(className => {
            if (className.startsWith('leave-')) {
                classesToRemove.push(className);
            }
        });

        classesToRemove.forEach(className => {
            cell.classList.remove(className);
            cleanedItems++;
            console.log(`üóëÔ∏è Removed CSS class: ${className}`);
        });

        // –°–¢–™–ü–ö–ê 2: –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ leave –∏–∫–æ–Ω–∫–∏
        const leaveIcons = cell.querySelectorAll('.leave-icon');
        leaveIcons.forEach(icon => {
            icon.remove();
            cleanedItems++;
            console.log('üóëÔ∏è Removed leave icon');
        });
    });

    console.log(`‚úÖ Cleanup completed: ${cleanedItems} items removed`);
}

/**
 * –ü–û–ü–†–ê–í–ö–ê –ó–ê calendarManager.js
 * –ù–∞–º–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ handleDateSelection –∏ –∑–∞–º–µ–Ω–∏ —Å —Ç–∞–∑–∏ –≤–µ—Ä—Å–∏—è:
 */

/**
 * Handles date selection for creating new events
 * @param {Object} info - FullCalendar selection info object
 * @param {HTMLSelectElement} employeeSelect - Employee selection dropdown
 */
function handleDateSelection(info, employeeSelect) {
    const employeeId = employeeSelect.value.trim();

    // –ù–û–í–ê –õ–ò–ù–ò–Ø: –ò–∑—á–∏—Å—Ç–≤–∞–º–µ copy —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –∏–∑–±–æ—Ä –Ω–∞ –Ω–æ–≤–∞ –¥–∞—Ç–∞
    if (typeof clearCopyMode === 'function') {
        clearCopyMode();
    }

    console.log('üìÖ Date selected for new event creation');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
    if (!employeeId) {
        alert('Please select an employee before adding an event.');
        console.log('üö´ Event form not opened - no employee selected');
        return;
    }

    console.log('‚úÖ Employee selected, proceeding to open event form for employee:', employeeId);

    // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ —Ñ–æ—Ä–º–∏
    hideAllFormsAndButtons();

    console.log('üìù Opening new event form...');

    // –ü–æ–∫–∞–∑–≤–∞–º–µ event —Ñ–æ—Ä–º–∞—Ç–∞
    const form = document.getElementById('event-form');
    if (form) {
        form.style.display = 'block';
        console.log('‚úÖ New event form opened successfully');
    }

    // –ó–∞–¥–∞–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞
    const selectedDateInput = document.getElementById('selected-date');
    if (selectedDateInput) {
        selectedDateInput.value = info.startStr;
        console.log('üìÖ Selected date set in form:', info.startStr);
    }

    // –§–æ–∫—É—Å–∏—Ä–∞–º–µ –≤—ä—Ä—Ö—É start time –ø–æ–ª–µ—Ç–æ
    const startTimeInput = document.getElementById('start-time');
    if (startTimeInput) {
        setTimeout(() => {
            startTimeInput.focus();
            console.log('üéØ Focus set on start time input');
        }, 100);
    }
}

/**
 * Sets up the employee selection change handler
 * @param {HTMLSelectElement} employeeSelect - Employee selection dropdown
 */
function setupEmployeeChangeHandler(employeeSelect) {
    employeeSelect.addEventListener('change', function() {
        const selectedValue = employeeSelect.value;
        const selectedText = employeeSelect.options[employeeSelect.selectedIndex]?.textContent;

        console.log('üìÑ Employee selection changed in calendar manager');

        // ========================================
        // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –°–ö–†–ò–í–ê–ù–ï –í–°–ò–ß–ö–ò –û–¢–í–û–†–ï–ù–ò –§–û–†–ú–ò –ü–†–ò –ü–†–û–ú–Ø–ù–ê –ù–ê –°–õ–£–ñ–ò–¢–ï–õ
        // ========================================

        console.log('üßπ Hiding all forms due to employee selection change...');

        // 1. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏ —Å—ä–±–∏—Ç–∏—è (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const eventForm = document.getElementById('event-form');
        if (eventForm && eventForm.style.display !== 'none') {
            console.log('üìí Hiding new event form due to employee change');
            eventForm.style.display = 'none';
        }

        // 2. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const editEventForm = document.getElementById('edit-event-form');
        if (editEventForm && editEventForm.style.display !== 'none') {
            console.log('üìí Hiding edit event form due to employee change');
            editEventForm.style.display = 'none';

            // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ edit/delete –±—É—Ç–æ–Ω–∏—Ç–µ
            if (typeof showEditDeleteButtons === 'function') {
                showEditDeleteButtons();
            }
        }

        // 3. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
        const employeeForm = document.getElementById('employeeForm');
        if (employeeForm && !employeeForm.classList.contains('hidden')) {
            console.log('üìí Hiding employee form due to employee change');
            employeeForm.classList.add('hidden');

            // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ UI –µ–ª–µ–º–µ–Ω—Ç–∏
            const addEmployeeBtn = document.getElementById('addEmployeeBtn');
            if (addEmployeeBtn) addEmployeeBtn.classList.remove('hidden');
        }

        // 4. –°–∫—Ä–∏–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω)
        const employeeListContainer = document.getElementById('employeeListContainer');
        if (employeeListContainer && !employeeListContainer.classList.contains('hidden')) {
            console.log('üìí Hiding employee list due to employee change');
            employeeListContainer.classList.add('hidden');
        }

        // 5. –°–∫—Ä–∏–≤–∞–º–µ search input-–∞
        const searchInput = document.getElementById('searchInput');
        if (searchInput && searchInput.style.display !== 'none') {
            console.log('üìí Hiding search input due to employee change');
            searchInput.style.display = 'none';
        }

        // 6. –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ edit/delete –±—É—Ç–æ–Ω–∏ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        if (typeof removeExistingButtons === 'function') {
            removeExistingButtons();
            console.log('üìí Removed calendar edit/delete buttons due to employee change');
        }

        // 7. –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ UI –µ–ª–µ–º–µ–Ω—Ç–∏
        const selectLabel = document.querySelector('label[for="employeeSelect"]');
        if (selectLabel) selectLabel.classList.remove('hidden');

        // ========================================
        // –û–†–ò–ì–ò–ù–ê–õ–ù–ê –õ–û–ì–ò–ö–ê: –õ–û–ì–í–ê–ù–ï –ò –ü–†–û–ú–Ø–ù–ê –ù–ê –ö–ê–õ–ï–ù–î–ê–†–ê
        // ========================================

        if (selectedValue) {
            console.log(`üë§ Employee selected: ${selectedText} (ID: ${selectedValue})`);
            console.log("üìÖ Switching to individual employee view");
        } else {
            console.log("üë• No employee selected - showing all employees");
            console.log("üìÖ Switching to all employees view");
        }

        // Clear current events and reload for new selection
        calendar.removeAllEvents();
        calendar.refetchEvents();

        console.log('‚úÖ Employee selection change handled with form cleanup');
    });
}

/**
 * Formats a Date object to HH:MM format for time input fields
 * @param {Date} date - Date object to format
 * @returns {string} Time in HH:MM format
 */
function formatTimeForInput(date) {
    const d = new Date(date);
    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    return `${hours}:${minutes}`;
}

/**
 * Refreshes calendar events (used after creating/updating events)
 * Refreshes calendar events with responsive adjustments
 */
function refreshCalendarEvents() {
    if (calendar && typeof calendar.refetchEvents === 'function') {
        console.log('üìÑ Refreshing calendar events with leave styles cleanup...');

        // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ leave —Å—Ç–∏–ª–æ–≤–µ –ø—Ä–µ–¥–∏ refresh
        cleanupAllLeaveStyles();

        // Refresh-–≤–∞–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞
        calendar.refetchEvents();

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ responsive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ
        setTimeout(() => {
            updateCalendarResponsiveSettings();
        }, 100);

        console.log("üìÑ Calendar events refreshed with leave styles cleanup");
    } else {
        console.warn("‚ö†Ô∏è Calendar not initialized or refetchEvents method not available");
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤—è–≤–∞ responsive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
 */
function updateCalendarResponsiveSettings() {
    if (!window.calendar) return;

    const windowWidth = window.innerWidth;

    try {
        // –û–±–Ω–æ–≤—è–≤–∞–º–µ header toolbar
        const newHeaderToolbar = {
            left: windowWidth <= 480 ? 'prev,next' : 'prev,next today',
            center: 'title',
            right: windowWidth <= 480 ? 'listWeek' :
                   windowWidth <= 768 ? 'dayGridWeek,dayGridMonth' :
                   'dayGridMonth,dayGridWeek,listWeek'
        };

        // –û–ë–ù–û–í–ï–ù–ê –õ–û–ì–ò–ö–ê: dayMaxEvents —Å–ø–æ—Ä–µ–¥ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
        let newDayMaxEvents;
        if (windowWidth <= 480) {
            newDayMaxEvents = 2; // –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: –º–∞–∫—Å–∏–º—É–º 2 —Å—ä–±–∏—Ç–∏—è
        } else if (windowWidth <= 768) {
            newDayMaxEvents = 3; // –ù–∞ tablet: –º–∞–∫—Å–∏–º—É–º 3 —Å—ä–±–∏—Ç–∏—è
        } else {
            newDayMaxEvents = 3; // –ù–∞ desktop: –º–∞–∫—Å–∏–º—É–º 3 —Å—ä–±–∏—Ç–∏—è
        }

        // –ü—Ä–∏–ª–∞–≥–∞–º–µ –Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        window.calendar.setOption('headerToolbar', newHeaderToolbar);
        window.calendar.setOption('dayMaxEvents', newDayMaxEvents);
        window.calendar.setOption('displayEventTime', windowWidth > 768);

        console.log(`üì± Calendar responsive settings updated - dayMaxEvents: ${newDayMaxEvents} for ${windowWidth}px width`);

    } catch (error) {
        console.error('‚ö†Ô∏è Error updating calendar responsive settings:', error);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–Ω view —Å–ø–æ—Ä–µ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ
 */
function getOptimalCalendarView() {
    const windowWidth = window.innerWidth;

    if (windowWidth <= 480) {
        return 'listWeek'; // List view –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ —á–µ—Ç–∏–º–æ—Å—Ç
    } else if (windowWidth <= 768) {
        return 'dayGridWeek'; // –°–µ–¥–º–∏—á–µ–Ω view –Ω–∞ tablet
    } else {
        return 'dayGridMonth'; // –ú–µ—Å–µ—á–µ–Ω view –Ω–∞ desktop
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤—è custom tooltip –∫—ä–º "+more" –ª–∏–Ω–∫–∞
 * @param {Object} info - FullCalendar more link info object
 */
function addMoreLinkTooltip(info) {
    try {
        const moreLinkElement = info.el;
        const dayDate = info.date;

        if (!moreLinkElement || !dayDate) {
            console.warn('‚ö†Ô∏è Invalid info object for more link tooltip');
            return;
        }

        // –°—ä–∑–¥–∞–≤–∞–º–µ tooltip –µ–ª–µ–º–µ–Ω—Ç —Å—ä—Å —Å—Ç–∏–ª–æ–≤–µ –≤–µ–¥–Ω–∞–≥–∞
        const tooltip = document.createElement('div');
        tooltip.className = 'more-events-tooltip';

        // –í–ê–ñ–ù–û: –ó–∞–¥–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—Ç–∏–ª–æ–≤–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ
        tooltip.style.cssText = `
            position: fixed !important;
            background: rgba(0, 0, 0, 0.95) !important;
            color: white !important;
            padding: 12px 15px !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            z-index: 999999 !important;
            max-width: 280px !important;
            min-width: 200px !important;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5) !important;
            pointer-events: none !important;
            display: none !important;
            white-space: normal !important;
            line-height: 1.4 !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            visibility: hidden !important;
            opacity: 0 !important;
        `;

        document.body.appendChild(tooltip);

        // Event listeners
        const showTooltip = function(e) {
            try {
                console.log('üñ±Ô∏è Mouse entered "+more" link');
                showMoreEventsTooltipSafe(tooltip, dayDate, e);
            } catch (error) {
                console.error('‚ö†Ô∏è Error showing tooltip:', error);
                tooltip.style.display = 'none';
            }
        };

        const moveTooltip = function(e) {
            try {
                if (tooltip.style.display !== 'none') {
                    positionTooltipSafe(tooltip, e);
                }
            } catch (error) {
                console.error('‚ö†Ô∏è Error positioning tooltip:', error);
            }
        };

        const hideTooltip = function() {
            try {
                console.log('üñ±Ô∏è Mouse left "+more" link');
                tooltip.style.display = 'none';
                tooltip.style.visibility = 'hidden';
                tooltip.style.opacity = '0';
            } catch (error) {
                console.error('‚ö†Ô∏è Error hiding tooltip:', error);
            }
        };

        moreLinkElement.addEventListener('mouseenter', showTooltip);
        moreLinkElement.addEventListener('mousemove', moveTooltip);
        moreLinkElement.addEventListener('mouseleave', hideTooltip);

        console.log('‚úÖ Tooltip with forced z-index created');

    } catch (error) {
        console.error('‚ö†Ô∏è Error in addMoreLinkTooltip:', error);
    }
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ tooltip —Å—ä—Å —Å–∫—Ä–∏—Ç–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
 * @param {HTMLElement} tooltip - Tooltip –µ–ª–µ–º–µ–Ω—Ç—ä—Ç
 * @param {Date} date - –î–∞—Ç–∞—Ç–∞ –Ω–∞ –¥–µ–Ω
 * @param {Event} mouseEvent - Mouse event –∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω–µ
 */
function showMoreEventsTooltipSafe(tooltip, date, mouseEvent) {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        if (!tooltip || !date || !mouseEvent) {
            console.warn('‚ö†Ô∏è Invalid parameters for tooltip');
            return;
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
        const eventsForDate = getEventsForDateSafe(date);

        if (!eventsForDate || eventsForDate.length === 0) {
            tooltip.style.display = 'none';
            return;
        }

        // –í–∑e–º–∞–º–µ —Å–∞–º–æ —Å–∫—Ä–∏—Ç–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è (—Å–ª–µ–¥ –ø—ä—Ä–≤–∏—Ç–µ 3)
        const hiddenEvents = eventsForDate.slice(3);

        if (hiddenEvents.length === 0) {
            tooltip.style.display = 'none';
            return;
        }

        // –û–ü–†–û–°–¢–ï–ù–û —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ tooltip-–∞
        let tooltipContent = `<strong>üìÖ ${formatDateForTooltipSafe(date)}</strong><br>`;
        tooltipContent += `<span style="color: #ccc;">Additional Events (${hiddenEvents.length}):</span><br><br>`;

        hiddenEvents.forEach((event, index) => {
            try {
                const eventTitle = (event.title || 'Unknown Employee').toString();
                const leaveType = event.extendedProps?.leaveType;

                tooltipContent += `‚Ä¢ <strong>${eventTitle}</strong>`;

                if (leaveType) {
                    tooltipContent += ` - ${leaveType}`;
                } else {
                    const startTime = event.start ? formatTimeForTooltipSafe(event.start) : '';
                    const endTime = event.end ? formatTimeForTooltipSafe(event.end) : '';
                    if (startTime && endTime) {
                        tooltipContent += ` (${startTime}-${endTime})`;
                    }
                }

                if (index < hiddenEvents.length - 1) {
                    tooltipContent += '<br>';
                }
            } catch (eventError) {
                console.error('‚ö†Ô∏è Error processing event:', eventError);
                tooltipContent += `‚Ä¢ Error loading event<br>`;
            }
        });

        tooltip.innerHTML = tooltipContent;

        // –ö–õ–Æ–ß–û–í–ê –ü–û–ü–†–ê–í–ö–ê: –ó–∞–¥–∞–≤–∞–º–µ —Å—Ç–∏–ª–æ–≤–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å JavaScript
        tooltip.style.position = 'fixed';
        tooltip.style.zIndex = '999999'; // –ú–Ω–æ–≥–æ –≤–∏—Å–æ–∫ z-index
        tooltip.style.background = 'rgba(0, 0, 0, 0.95)';
        tooltip.style.color = 'white';
        tooltip.style.padding = '12px 15px';
        tooltip.style.borderRadius = '8px';
        tooltip.style.fontSize = '13px';
        tooltip.style.maxWidth = '280px';
        tooltip.style.minWidth = '200px';
        tooltip.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.5)';
        tooltip.style.pointerEvents = 'none';
        tooltip.style.whiteSpace = 'normal';
        tooltip.style.lineHeight = '1.4';
        tooltip.style.border = '1px solid rgba(255, 255, 255, 0.1)';

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω–µ
        positionTooltipSafe(tooltip, mouseEvent);

        // –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑–≤–∞–º–µ tooltip-–∞
        tooltip.style.display = 'block';
        tooltip.style.visibility = 'visible';
        tooltip.style.opacity = '1';

        // –î–û–ü–™–õ–ù–ò–¢–ï–õ–ù–ê –ü–û–ü–†–ê–í–ö–ê: –°–∫—Ä–∏–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–∏—á–∫–∏ popover-–∏
        const popovers = document.querySelectorAll('.fc-popover');
        popovers.forEach(popover => {
            popover.style.zIndex = '1000';
        });

        console.log(`üìã Tooltip shown with z-index: ${tooltip.style.zIndex}`);
        console.log(`üìã Tooltip visibility: ${tooltip.style.visibility}`);

    } catch (error) {
        console.error('‚ö†Ô∏è Error in showMoreEventsTooltipSafe:', error);
        tooltip.style.display = 'none';
    }
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∞—Ç–∞
 * @param {Date} date - –î–∞—Ç–∞—Ç–∞ –∑–∞ –∫–æ—è—Ç–æ —Ç—ä—Ä—Å–∏–º —Å—ä–±–∏—Ç–∏—è
 * @returns {Array} –ú–∞—Å–∏–≤ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
 */
function getEventsForDateSafe(date) {
    try {
        if (!window.calendar || !date) {
            return [];
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        const targetDate = date.toISOString().split('T')[0];

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        const allEvents = window.calendar.getEvents();

        if (!allEvents || !Array.isArray(allEvents)) {
            return [];
        }

        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å—ä–±–∏—Ç–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        const eventsForDate = allEvents.filter(event => {
            try {
                if (!event || !event.start) return false;

                const eventDate = event.start.toISOString().split('T')[0];
                return eventDate === targetDate;
            } catch (filterError) {
                console.warn('‚ö†Ô∏è Error filtering event:', filterError);
                return false;
            }
        });

        console.log(`üìä Found ${eventsForDate.length} events for date ${targetDate}`);
        return eventsForDate;

    } catch (error) {
        console.error('‚ö†Ô∏è Error in getEventsForDateSafe:', error);
        return [];
    }
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞ tooltip-–∞ —Å–ø–æ—Ä–µ–¥ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –º–∏—à–∫–∞—Ç–∞
 * @param {HTMLElement} tooltip - Tooltip –µ–ª–µ–º–µ–Ω—Ç—ä—Ç
 * @param {Event} mouseEvent - Mouse event
 */
function positionTooltipSafe(tooltip, mouseEvent) {
    try {
        if (!tooltip || !mouseEvent) {
            return;
        }

        const windowWidth = window.innerWidth || 1000;
        const windowHeight = window.innerHeight || 800;

        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ clientX/clientY –∑–∞ fixed positioning
        let left = (mouseEvent.clientX || 0) + 10;
        let top = (mouseEvent.clientY || 0) + 10;

        // –û–ø—Ä–æ—Å—Ç–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω–µ
        if (left > windowWidth - 300) {
            left = (mouseEvent.clientX || 0) - 260;
        }

        if (top > windowHeight - 200) {
            top = (mouseEvent.clientY || 0) - 150;
        }

        // –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ —á–µ –Ω–µ –∏–∑–ª–∏–∑–∞ –∏–∑–≤—ä–Ω –µ–∫—Ä–∞–Ω–∞
        if (left < 10) left = 10;
        if (top < 10) top = 10;

        tooltip.style.left = left + 'px';
        tooltip.style.top = top + 'px';

        console.log(`üìç Tooltip positioned at: left=${left}px, top=${top}px`);

    } catch (error) {
        console.error('‚ö†Ô∏è Error in positionTooltipSafe:', error);
    }
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥–∞—Ç–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –≤ tooltip
 * @param {Date} date - –î–∞—Ç–∞—Ç–∞ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–∞ –¥–∞—Ç–∞
 */
function formatDateForTooltipSafe(date) {
    try {
        if (!date) return 'Unknown Date';

        const options = {
            weekday: 'short',
            month: 'short',
            day: 'numeric'
        };
        return date.toLocaleDateString('en-US', options);
    } catch (error) {
        console.error('‚ö†Ô∏è Error formatting date:', error);
        return 'Invalid Date';
    }
}

/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –≤—Ä–µ–º–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –≤ tooltip
 * @param {Date} date - –î–∞—Ç–∞—Ç–∞ —Å –≤—Ä–µ–º–µ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–æ –≤—Ä–µ–º–µ
 */
function formatTimeForTooltipSafe(date) {
    try {
        if (!date) return '';

        return date.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });
    } catch (error) {
        console.error('‚ö†Ô∏è Error formatting time:', error);
        return '';
    }
}

function cleanupAllLeaveStyles() {
    const calendarCells = document.querySelectorAll('.fc-daygrid-day');
    calendarCells.forEach(cell => {
        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ leave-* –∫–ª–∞—Å–æ–≤–µ
        const classesToRemove = [...cell.classList].filter(cls => cls.startsWith('leave-'));
        classesToRemove.forEach(cls => cell.classList.remove(cls));

        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ leave –∏–∫–æ–Ω–∏—Ç–µ
        const icons = cell.querySelectorAll('.leave-icon');
        icons.forEach(icon => icon.remove());
    });

    console.log('‚úÖ Global leave styles cleaned up');
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ –≤—Å–∏—á–∫–∏ –æ—Ç–≤–æ—Ä–µ–Ω–∏ —Ñ–æ—Ä–º–∏
 * –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∑–∞ –¥–∞ —Å–µ —É–≤–µ—Ä–∏–º —á–µ —Å–∞–º–æ –µ–¥–Ω–∞ —Ñ–æ—Ä–º–∞ –µ –≤–∏–¥–∏–º–∞ –≤ –¥–∞–¥–µ–Ω –º–æ–º–µ–Ω—Ç
 */
function hideAllOpenForms() {
    console.log('üßπ Hiding all open forms to ensure clean UI state');

    // –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏ —Å—ä–±–∏—Ç–∏—è
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'none';
        console.log('üìí New event form hidden');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ edit —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm) {
        editEventForm.style.display = 'none';
        console.log('üìí Edit event form hidden');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏
    const employeeForm = document.getElementById('employeeForm');
    if (employeeForm) {
        employeeForm.classList.add('hidden');
        console.log('üìí Employee form hidden');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏
    const employeeListContainer = document.getElementById('employeeListContainer');
    if (employeeListContainer) {
        employeeListContainer.classList.add('hidden');
        console.log('üìí Employee list hidden');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ search input-–∞
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.style.display = 'none';
        console.log('üìí Search input hidden');
    }

    // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ UI –µ–ª–µ–º–µ–Ω—Ç–∏
    const employeeSelect = document.getElementById('employeeSelect');
    const selectLabel = document.querySelector('label[for="employeeSelect"]');
    const addEmployeeBtn = document.getElementById('addEmployeeBtn');

    if (employeeSelect) employeeSelect.classList.remove('hidden');
    if (selectLabel) selectLabel.classList.remove('hidden');
    if (addEmployeeBtn) addEmployeeBtn.classList.remove('hidden');

    console.log('‚úÖ All forms hidden, main UI elements restored');
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ event —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–≥–∞—Ç–æ —Å–µ –∫–ª–∏–∫–Ω–µ "Add Employee"
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –∫–∞—Ç–æ event listener
 */
function hideEventFormOnAddEmployee() {
    console.log('üë§ Add Employee button clicked - hiding event form');

    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'none';
        console.log('üìí Event form hidden due to Add Employee action');
    }
}

// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –ù–ê –§–£–ù–ö–¶–ò–ò –ó–ê –ì–õ–û–ë–ê–õ–ù–û –ò–ó–ü–û–õ–ó–í–ê–ù–ï
window.clearCopyMode = clearCopyMode;
// Export functions for use in other modules
window.initializeCalendar = initializeCalendar;
window.refreshCalendarEvents = refreshCalendarEvents;
window.formatTimeForInput = formatTimeForInput;
window.updateCalendarResponsiveSettings = updateCalendarResponsiveSettings;
window.getOptimalCalendarView = getOptimalCalendarView;
window.addMoreLinkTooltip = addMoreLinkTooltip;
window.getEventsForDateSafe = getEventsForDateSafe;
window.positionTooltipSafe = positionTooltipSafe;
window.formatDateForTooltipSafe = formatDateForTooltipSafe;
window.formatTimeForTooltipSafe = formatTimeForTooltipSafe;
window.cleanupAllTooltips = cleanupAllTooltips;
window.hideEditDeleteButtons = hideEditDeleteButtons;
// Cleanup –ø—Ä–∏ refresh –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
window.addEventListener('beforeunload', cleanupAllTooltips);
window.handleEventDrop = handleEventDrop;
window.formatDateTimeForBackend = formatDateTimeForBackend;
window.showDragDropNotification = showDragDropNotification;
window.hideAllOpenForms = hideAllOpenForms;
window.hideEventFormOnAddEmployee = hideEventFormOnAddEmployee;
window.cleanupAllLeaveStyles = cleanupAllLeaveStyles;
window.removeExistingButtons = removeExistingButtons;
window.createEditButton = createEditButton;
window.createDeleteButton = createDeleteButton;

// –ù–û–í–ò –ï–ö–°–ü–û–†–¢–ò –ó–ê