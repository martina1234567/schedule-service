/**
 * UI Management Module
 * Handles general UI interactions, navigation, search functionality,
 * and form behaviors not specific to employees or events
 */

/**
 * Initializes all UI management functionality
 * Sets up navigation, search, sidebar toggle, and general form behaviors
 */
function initializeUIManager() {
    console.log('üì± Initializing UI Manager...');

    setupNavigationHandlers();
    setupSearchFunctionality();
    setupFormEnhancements();
    setupSessionStorage();
    setupSidebarToggle(); // –î–æ–±–∞–≤—è–º–µ sidebar toggle —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
    setupCollapsedSidebarButtonHandlers(); // –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤—è–º–µ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ handlers –∑–∞ –±—É—Ç–æ–Ω–∏—Ç–µ –∫–æ–≥–∞—Ç–æ sidebar –µ —Å–≤–∏—Ç
    ensureEventFormInitialState(); // –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ —á–µ event —Ñ–æ—Ä–º–∞—Ç–∞ –µ —Å–∫—Ä–∏—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ

    console.log('‚úÖ UI Manager initialized successfully');
}

/**
 * Sets up navigation button handlers
 */
function setupNavigationHandlers() {
    // Employee Schedule navigation button
    document.getElementById('employeeScheduleBtn').addEventListener('click', function() {
        window.location.href = 'schedule.html';
    });

    // Schedule button (home page navigation)
    const scheduleBtn = document.getElementById('scheduleBtn');
    if (scheduleBtn) {
        scheduleBtn.addEventListener('click', goToHomePage);
    }
}

/**
 * Navigates to the home page and manages search visibility state
 */
function goToHomePage() {
    // Store state to hide search on home page
    sessionStorage.setItem('hideSearch', 'true');
    window.location.href = 'http://localhost:8080/';
}

/**
 * Sets up search functionality for employee filtering
 */
function setupSearchFunctionality() {
    const searchInput = document.getElementById('searchInput');

    // Initially hide the search input
    searchInput.style.display = 'none';

    // Set up the search input handler
    searchInput.addEventListener('keyup', filterEmployees);
}

/**
 * Sets up session storage handling for UI state persistence
 */
function setupSessionStorage() {
    // Check session storage state on page load
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');

        // Check if search should be hidden based on session storage
        if (sessionStorage.getItem('hideSearch') === 'true') {
            searchInput.style.display = 'none';
            sessionStorage.removeItem('hideSearch'); // Clean up
        } else {
            // Default behavior - search is hidden initially anyway
            searchInput.style.display = 'none';
        }
    });
}

/**
 * Sets up form enhancements like floating labels and time input formatting
 */
function setupFormEnhancements() {
    setupFloatingLabels();
    setupTimeInputFormatting();
}

/**
 * Initializes floating label behavior for form inputs
 * Handles the animation of labels moving up when inputs are focused or filled
 */
function setupFloatingLabels() {
    // Handle floating labels for regular input fields
    const inputs = document.querySelectorAll('input[type="text"], input[type="email"]');

    inputs.forEach(input => {
        // Check initial state
        checkInputFilled(input);

        // Add event listeners for focus and blur
        input.addEventListener('focus', function() {
            const label = document.querySelector(`label[for='${input.id}']`);
            if (label) {
                label.classList.add('active');
            }
        });

        input.addEventListener('blur', function() {
            checkInputFilled(input);
        });

        input.addEventListener('input', function() {
            checkInputFilled(input);
        });
    });
}

/**
 * Checks if an input field is filled and positions its label accordingly
 * @param {HTMLInputElement} input - The input element to check
 */
function checkInputFilled(input) {
    const label = document.querySelector(`label[for='${input.id}']`);
    if (label) {
        if (input.value.trim() !== '') {
            label.classList.add('active'); // Keep label at top
        } else {
            label.classList.remove('active'); // Return label to original position
        }
    }
}

/**
 * Sets up time input formatting to round minutes to 15-minute intervals
 * Enhances user experience by automatically formatting time inputs
 */
function setupTimeInputFormatting() {
    // Add event listener when DOM is loaded
    document.addEventListener("DOMContentLoaded", function() {
        const timeInputs = document.querySelectorAll("input[type='time']");

        timeInputs.forEach(input => {
            // Format time when user leaves the input field
            input.addEventListener("blur", function() {
                formatTimeInput(this);
            });
        });
    });
}

/**
 * Formats a time input to round minutes to the nearest 15-minute interval
 * @param {HTMLInputElement} timeInput - The time input element to format
 */
function formatTimeInput(timeInput) {
    let [hours, minutes] = timeInput.value.split(":");

    // Validate input
    if (!hours || !minutes) return;

    minutes = parseInt(minutes);
    if (isNaN(minutes)) return;

    // Round to nearest 15-minute interval
    if (minutes < 8) {
        minutes = "00";
    } else if (minutes < 23) {
        minutes = "15";
    } else if (minutes < 38) {
        minutes = "30";
    } else {
        minutes = "45";
    }

    // Ensure proper formatting (HH:MM)
    hours = hours.padStart(2, '0');
    minutes = minutes.padStart(2, '0');

    // Update the input value
    timeInput.value = `${hours}:${minutes}`;
}

/**
 * Manages form visibility and UI state transitions
 * @param {string} formToShow - ID of the form to show
 * @param {Array} formsToHide - Array of form IDs to hide
 */
function toggleFormVisibility(formToShow, formsToHide = []) {
    // Hide specified forms
    formsToHide.forEach(formId => {
        const form = document.getElementById(formId);
        if (form) {
            form.classList.add('hidden');
        }
    });

    // Show the target form
    const targetForm = document.getElementById(formToShow);
    if (targetForm) {
        targetForm.classList.remove('hidden');
    }
}

/**
 * Shows or hides the search input based on context
 * @param {boolean} show - Whether to show or hide the search
 */
function toggleSearchVisibility(show) {
    const searchInput = document.getElementById('searchInput');
    searchInput.style.display = show ? 'block' : 'none';
}

/**
 * Displays success or error messages to the user
 * @param {string} message - Message to display
 * @param {string} type - Type of message ('success', 'error', 'info')
 */
function showNotification(message, type = 'info') {
    // Simple alert for now - could be enhanced with custom notifications
    if (type === 'error') {
        alert(`Error: ${message}`);
    } else if (type === 'success') {
        alert(`Success: ${message}`);
    } else {
        alert(message);
    }
}

/**
 * Validates form fields and shows appropriate error messages
 * @param {Array} requiredFields - Array of objects with {id, name} for required fields
 * @returns {boolean} True if all fields are valid
 */
function validateRequiredFields(requiredFields) {
    const missingFields = [];

    requiredFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element || !element.value.trim()) {
            missingFields.push(field.name);
        }
    });

    if (missingFields.length > 0) {
        showNotification(`Please fill in the following required fields: ${missingFields.join(', ')}`, 'error');
        return false;
    }

    return true;
}

/**
 * Clears all form fields in a given form
 * @param {string} formId - ID of the form to clear
 */
function clearForm(formId) {
    const form = document.getElementById(formId);
    if (form) {
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (input.type === 'checkbox' || input.type === 'radio') {
                input.checked = false;
            } else {
                input.value = '';
            }

            // Reset floating labels
            const label = document.querySelector(`label[for='${input.id}']`);
            if (label) {
                label.classList.remove('active');
            }
        });
    }
}

/**
 * Sets up window load event handlers
 */
window.onload = function() {
    // Hide search input on initial page load
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.style.display = 'none';
    }
};

/**
 * Sets up sidebar toggle functionality
 */
function setupSidebarToggle() {
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebarToggle');
    const calendarContainer = document.getElementById('calendar-container');

    if (!sidebar || !sidebarToggle) {
        console.warn('‚ö†Ô∏è Sidebar or toggle button not found');
        return;
    }

    // –ü–†–û–ú–Ø–ù–ê: –í–∏–Ω–∞–≥–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Å—ä—Å —Å–≤–∏—Ç sidebar –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç localStorage
    // –ö–æ–º–µ–Ω—Ç–∏—Ä–∞–π —Å–ª–µ–¥–Ω–∏—Ç–µ —Ä–µ–¥–æ–≤–µ –∑–∞ –¥–∞ –æ—Ç–º–µ–Ω–∏—à –∑–∞–ø–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ:
    /*
    const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
    if (isCollapsed) {
        sidebar.classList.add('collapsed');
        updateToggleButton(true);
    }
    */

    // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –í–∏–Ω–∞–≥–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Å—ä—Å —Å–≤–∏—Ç sidebar
    console.log('üîÑ Starting with collapsed sidebar by default...');
    sidebar.classList.add('collapsed');
    updateToggleButton(true);
    localStorage.setItem('sidebarCollapsed', 'true'); // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ

    // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ª–µ–¥ –º–∞–ª–∫–∞ –ø–∞—É–∑–∞
    setTimeout(() => {
        if (window.calendar && typeof window.calendar.updateSize === 'function') {
            window.calendar.updateSize();
            console.log('üìÖ Calendar resized for initial collapsed state');
        }
    }, 100);

    console.log('‚úÖ Sidebar initialized in collapsed state');

    // Event listener –∑–∞ toggle –±—É—Ç–æ–Ω–∞
    sidebarToggle.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        const isCurrentlyCollapsed = sidebar.classList.contains('collapsed');

        if (isCurrentlyCollapsed) {
            // –†–∞–∑—à–∏—Ä—è–≤–∞–º–µ sidebar
            expandSidebar();
        } else {
            // –°–≤–∏–≤–∞–º–µ sidebar
            collapseSidebar();
        }
    });
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ event listeners –∑–∞ –±—É—Ç–æ–Ω–∏—Ç–µ –∫–æ–≥–∞—Ç–æ sidebar –µ —Å–≤–∏—Ç
 * –¢–æ–≤–∞ –µ –∫–ª—é—á–æ–≤–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—è—Ç–æ —Ä–µ—à–∞–≤–∞ —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º!
 */
function setupCollapsedSidebarButtonHandlers() {
    // –ù–∞–º–∏—Ä–∞–º–µ –±—É—Ç–æ–Ω–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª (–±—É—Ç–æ–Ω—ä—Ç —Å –∏–∫–æ–Ω–∞—Ç–∞ "+")
    const addEmployeeBtn = document.getElementById('addEmployeeBtn');

    // –ù–∞–º–∏—Ä–∞–º–µ –±—É—Ç–æ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–±—É—Ç–æ–Ω—ä—Ç —Å –∏–∫–æ–Ω–∞—Ç–∞ "üë•")
    const viewEmployeesBtn = document.getElementById('viewEmployeesBtn');

    // –ê–∫–æ –Ω–∞–º–µ—Ä–∏–º –±—É—Ç–æ–Ω–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
    if (addEmployeeBtn) {
        console.log('üîß Setting up collapsed sidebar handler for Add Employee button');

        // –î–æ–±–∞–≤—è–º–µ event listener –∫–æ–π—Ç–æ —â–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –ü–†–ï–î–ò –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è
        addEmployeeBtn.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');

            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ sidebar-—ä—Ç –µ —Å–≤–∏—Ç
            if (sidebar && sidebar.classList.contains('collapsed')) {
                console.log('üìÇ Sidebar is collapsed, expanding and opening add employee form...');

                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
                e.preventDefault();
                e.stopPropagation();

                // –ü—ä—Ä–≤–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–º–µ sidebar-–∞
                expandSidebar();

                // –ß–∞–∫–∞–º–µ CSS –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞ –¥–∞ –∑–∞–≤—ä—Ä—à–∏ (300ms) –∏ —Å–ª–µ–¥ —Ç–æ–≤–∞ –æ—Ç–≤–∞—Ä—è–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
                setTimeout(() => {
                    console.log('üéØ Opening add employee form after sidebar expansion');

                    // –°–∏–º—É–ª–∏—Ä–∞–º–µ –∫–ª–∏–∫–≤–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∞ —Å–ª–µ–¥ –∫–∞—Ç–æ sidebar —Å–µ –µ —Ä–∞–∑—à–∏—Ä–∏–ª
                    // –¢–æ–≤–∞ —â–µ –∞–∫—Ç–∏–≤–∏—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç employeeManager.js
                    triggerAddEmployeeForm();
                }, 350); // –ú–∞–ª–∫–æ –ø–æ–≤–µ—á–µ –æ—Ç CSS transition –≤—Ä–µ–º–µ—Ç–æ

                return false; // –ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–º–µ —Ä–∞–∑–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ event-–∞
            }

            // –ê–∫–æ sidebar –ù–ï –µ —Å–≤–∏—Ç, –Ω–æ—Ä–º–∞–ª–Ω–æ—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —â–µ –ø—Ä–æ–¥—ä–ª–∂–∏
            console.log('üìÇ Sidebar is expanded, normal add employee behavior will proceed');
        }, true); // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ capture —Ñ–∞–∑–∞ –∑–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ –ü–†–ï–î–ò –¥—Ä—É–≥–∏—Ç–µ listeners
    }

    // –°—ä—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –±—É—Ç–æ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏
    if (viewEmployeesBtn) {
        console.log('üîß Setting up collapsed sidebar handler for View Employees button');

        viewEmployeesBtn.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');

            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ sidebar-—ä—Ç –µ —Å–≤–∏—Ç
            if (sidebar && sidebar.classList.contains('collapsed')) {
                console.log('üìÇ Sidebar is collapsed, expanding and opening employee list...');

                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
                e.preventDefault();
                e.stopPropagation();

                // –ü—ä—Ä–≤–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–º–µ sidebar-–∞
                expandSidebar();

                // –ß–∞–∫–∞–º–µ CSS –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞ –¥–∞ –∑–∞–≤—ä—Ä—à–∏ –∏ —Å–ª–µ–¥ —Ç–æ–≤–∞ –æ—Ç–≤–∞—Ä—è–º–µ —Å–ø–∏—Å—ä–∫–∞
                setTimeout(() => {
                    console.log('üéØ Opening employee list after sidebar expansion');

                    // –°–∏–º—É–ª–∏—Ä–∞–º–µ –∫–ª–∏–∫–≤–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∞ —Å–ª–µ–¥ –∫–∞—Ç–æ sidebar —Å–µ –µ —Ä–∞–∑—à–∏—Ä–∏–ª
                    triggerViewEmployeesList();
                }, 350);

                return false;
            }

            console.log('üìÇ Sidebar is expanded, normal view employees behavior will proceed');
        }, true); // Capture —Ñ–∞–∑–∞
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –†–∞–∑—à–∏—Ä—è–≤–∞ sidebar-–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
 */
function expandSidebar() {
    const sidebar = document.getElementById('sidebar');

    if (sidebar) {
        console.log('üìñ Expanding sidebar...');

        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∫–ª–∞—Å–∞ –∑–∞ —Å–≤–∏—Ç sidebar
        sidebar.classList.remove('collapsed');

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ toggle –±—É—Ç–æ–Ω–∞
        updateToggleButton(false);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –≤ localStorage
        localStorage.setItem('sidebarCollapsed', 'false');

        // –ù–û–í–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–ù–û–°–¢: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ —Å–ª–µ–¥ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ
        setTimeout(() => {
            restoreAllFormsState();
        }, 100); // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ —Å–µ –∑–∞–≤—ä—Ä—à–∏ CSS –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ª–µ–¥ –º–∞–ª–∫–∞ –ø–∞—É–∑–∞
        setTimeout(() => {
            if (window.calendar && typeof window.calendar.updateSize === 'function') {
                window.calendar.updateSize();
                console.log('üìÖ Calendar resized after sidebar expansion');
            }
        }, 350);

        console.log('‚úÖ Sidebar expanded successfully');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –°–≤–∏–≤–∞ sidebar-–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
 */
function collapseSidebar() {
    const sidebar = document.getElementById('sidebar');

    if (sidebar) {
        console.log('üìï Collapsing sidebar...');

        // –ù–û–í–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–ù–û–°–¢: –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –≤—Å–∏—á–∫–∏ –æ—Ç–≤–æ—Ä–µ–Ω–∏ —Ñ–æ—Ä–º–∏ –ø—Ä–µ–¥–∏ –¥–∞ –≥–∏ —Å–∫—Ä–∏–µ–º
        saveAllFormsState();

        // –î–æ–±–∞–≤—è–º–µ –∫–ª–∞—Å–∞ –∑–∞ —Å–≤–∏—Ç sidebar
        sidebar.classList.add('collapsed');

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ toggle –±—É—Ç–æ–Ω–∞
        updateToggleButton(true);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –≤ localStorage
        localStorage.setItem('sidebarCollapsed', 'true');

        // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –æ—Ç–≤–æ—Ä–µ–Ω–∏ —Ñ–æ—Ä–º–∏
        hideAllOpenForms();

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ª–µ–¥ –º–∞–ª–∫–∞ –ø–∞—É–∑–∞
        setTimeout(() => {
            if (window.calendar && typeof window.calendar.updateSize === 'function') {
                window.calendar.updateSize();
                console.log('üìÖ Calendar resized after sidebar collapse');
            }
        }, 350);

        console.log('‚úÖ Sidebar collapsed successfully');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç–∏–≤–∏—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–∞ –∫–ª–∏–∫–≤–∞–Ω–µ—Ç–æ –Ω–∞ –±—É—Ç–æ–Ω–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
 */
function triggerAddEmployeeForm() {
    console.log('üéØ Triggering add employee form...');

    try {
        // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –æ—Ç–≤–æ—Ä–µ–Ω–∏ —Ñ–æ—Ä–º–∏ –∏ —Å–ø–∏—Å—ä—Ü–∏
        hideAllOpenForms();

        // –°–∫—Ä–∏–≤–∞–º–µ employee selection dropdown –∏ –Ω–µ–≥–æ–≤–∏—è label
        const employeeSelect = document.getElementById('employeeSelect');
        const selectLabel = document.querySelector('label[for="employeeSelect"]');

        if (employeeSelect) {
            employeeSelect.classList.add('hidden');
        }
        if (selectLabel) {
            selectLabel.classList.add('hidden');
        }

        // –°–∫—Ä–∏–≤–∞–º–µ add –±—É—Ç–æ–Ω–∞ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ employee —Ñ–æ—Ä–º–∞—Ç–∞
        const addEmployeeBtn = document.getElementById('addEmployeeBtn');
        const employeeForm = document.getElementById('employeeForm');

        if (addEmployeeBtn) {
            addEmployeeBtn.classList.add('hidden');
        }
        if (employeeForm) {
            employeeForm.classList.remove('hidden');
        }

        // –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ (–Ω–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ)
        if (typeof window.isEditMode !== 'undefined') {
            window.isEditMode = false;
            window.editingEmployeeId = null;
        }

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ submit –±—É—Ç–æ–Ω–∞
        const submitBtn = document.getElementById('submitEmployee');
        if (submitBtn) {
            submitBtn.textContent = '‚úî';
        }

        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Å—è–∫–∞–∫–≤–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –¥–∞–Ω–Ω–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if (typeof clearEmployeeForm === 'function') {
            clearEmployeeForm();
        } else {
            // Backup –º–µ—Ç–æ–¥ –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            clearFormFields(['name', 'lastname', 'email', 'position', 'hourlyRate']);
        }

        console.log('‚úÖ Add employee form opened successfully');

        // –§–æ–∫—É—Å–∏—Ä–∞–º–µ –ø—ä—Ä–≤–æ—Ç–æ –ø–æ–ª–µ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–∑–∂–∏–≤—è–≤–∞–Ω–µ
        setTimeout(() => {
            const nameInput = document.getElementById('name');
            if (nameInput) {
                nameInput.focus();
            }
        }, 100);

    } catch (error) {
        console.error('‚ùå Error opening add employee form:', error);
        alert('Error opening add employee form. Please try again.');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç–∏–≤–∏—Ä–∞ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏
 */
function triggerViewEmployeesList() {
    console.log('üéØ Triggering employee list view...');

    try {
        // –°–∫—Ä–∏–≤–∞–º–µ event —Ñ–æ—Ä–º–∏
        const eventForm = document.getElementById('event-form');
        const editEventForm = document.getElementById('edit-event-form');

        if (eventForm) {
            eventForm.style.display = 'none';
        }
        if (editEventForm) {
            editEventForm.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑–≤–∞–º–µ/—Å–∫—Ä–∏–≤–∞–º–µ employee list container
        const employeeListContainer = document.getElementById('employeeListContainer');
        const employeeForm = document.getElementById('employeeForm');
        const employeeSelect = document.getElementById('employeeSelect');
        const selectLabel = document.querySelector('label[for="employeeSelect"]');

        if (employeeListContainer) {
            // Toggle visibility –Ω–∞ employee list container
            employeeListContainer.classList.toggle('hidden');

            if (!employeeListContainer.classList.contains('hidden')) {
                // –ê–∫–æ –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞, —Å–∫—Ä–∏–≤–∞–º–µ –¥—Ä—É–≥–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏
                if (employeeForm) {
                    employeeForm.classList.add('hidden');
                }
                if (employeeSelect) {
                    employeeSelect.classList.add('hidden');
                }
                if (selectLabel) {
                    selectLabel.classList.add('hidden');
                }

                // –ü–æ–∫–∞–∑–≤–∞–º–µ search input –∞–∫–æ –∏–º–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏
                const employeeList = document.getElementById('employeeList');
                const searchInput = document.getElementById('searchInput');

                if (searchInput && employeeList && employeeList.children.length > 0) {
                    searchInput.style.display = "block";
                    console.log('üîç Search input shown for employee filtering');
                }

                console.log('üë• Employee list opened');
            } else {
                // –ê–∫–æ —Å–∫—Ä–∏–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞, –ø–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–Ω–∏—è UI
                if (employeeSelect) {
                    employeeSelect.classList.remove('hidden');
                }
                if (selectLabel) {
                    selectLabel.classList.remove('hidden');
                }

                // –°–∫—Ä–∏–≤–∞–º–µ search input
                const searchInput = document.getElementById('searchInput');
                if (searchInput) {
                    searchInput.style.display = "none";
                }

                console.log('üë• Employee list closed');
            }
        }

        console.log('‚úÖ Employee list view toggled successfully');

    } catch (error) {
        console.error('‚ùå Error opening employee list:', error);
        alert('Error opening employee list. Please try again.');
    }
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
 * @param {Array} fieldIds - –ú–∞—Å–∏–≤ —Å ID-—Ç–∞ –Ω–∞ –ø–æ–ª–µ—Ç–∞—Ç–∞ –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ
 */
function clearFormFields(fieldIds) {
    fieldIds.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';

            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ floating label –∞–∫–æ –∏–º–∞ —Ç–∞–∫—ä–≤
            const label = document.querySelector(`label[for='${fieldId}']`);
            if (label) {
                label.classList.remove('active');
            }
        }
    });

    console.log('üóëÔ∏è Form fields cleared:', fieldIds);
}

/**
 * Updates the toggle button appearance based on sidebar state
 * @param {boolean} isCollapsed - Whether the sidebar is collapsed
 */
function updateToggleButton(isCollapsed) {
    const toggleButton = document.getElementById('sidebarToggle');
    const arrows = toggleButton.querySelector('.arrows');

    if (isCollapsed) {
        arrows.innerHTML = '&gt;&gt;'; // –î–≤–æ–π–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–¥—è—Å–Ω–æ ">>"
        toggleButton.title = 'Expand Sidebar';
    } else {
        arrows.innerHTML = '&lt;&lt;'; // –î–≤–æ–π–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ª—è–≤–æ "<<"
        toggleButton.title = 'Collapse Sidebar';
    }
}

/**
 * Hides all open forms when sidebar is collapsed
 */
function hideAllOpenForms() {
    // –°–∫—Ä–∏–≤–∞–º–µ employee —Ñ–æ—Ä–º–∏
    const employeeForm = document.getElementById('employeeForm');
    const employeeListContainer = document.getElementById('employeeListContainer');
    const searchInput = document.getElementById('searchInput');

    if (employeeForm) employeeForm.classList.add('hidden');
    if (employeeListContainer) employeeListContainer.classList.add('hidden');
    if (searchInput) searchInput.style.display = 'none';

    // –°–∫—Ä–∏–≤–∞–º–µ event —Ñ–æ—Ä–º–∏
    const eventForm = document.getElementById('event-form');
    const editEventForm = document.getElementById('edit-event-form');

    if (eventForm) eventForm.style.display = 'none';
    if (editEventForm) editEventForm.style.display = 'none';

    // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏
    const employeeSelect = document.getElementById('employeeSelect');
    const selectLabel = document.querySelector('label[for="employeeSelect"]');
    const addEmployeeBtn = document.getElementById('addEmployeeBtn');

    if (employeeSelect) employeeSelect.classList.remove('hidden');
    if (selectLabel) selectLabel.classList.remove('hidden');
    if (addEmployeeBtn) addEmployeeBtn.classList.remove('hidden');

    console.log('üßπ All forms hidden due to sidebar collapse');
}

// Export functions for global use
window.goToHomePage = goToHomePage;
window.toggleFormVisibility = toggleFormVisibility;
window.toggleSearchVisibility = toggleSearchVisibility;
window.showNotification = showNotification;
window.validateRequiredFields = validateRequiredFields;
window.clearForm = clearForm;
window.initializeUIManager = initializeUIManager;
window.setupSidebarToggle = setupSidebarToggle;
// –ù–û–í–ò –ï–ö–°–ü–û–†–¢–ò: –ü—Ä–∞–≤–∏–º –Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—ä–ø–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ –∑–∞ debugging
window.expandSidebar = expandSidebar;
window.collapseSidebar = collapseSidebar;
window.triggerAddEmployeeForm = triggerAddEmployeeForm;
window.triggerViewEmployeesList = triggerViewEmployeesList;

/**
 * =====================================
 * –ù–û–í–ò –§–£–ù–ö–¶–ò–ò –ó–ê –ó–ê–ü–ê–ó–í–ê–ù–ï –ù–ê –°–™–°–¢–û–Ø–ù–ò–ï–¢–û –ù–ê –§–û–†–ú–ò–¢–ï
 * =====================================
 */

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∞–∑–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ñ–æ—Ä–º–∏ –≤ sessionStorage
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –ø—Ä–µ–¥–∏ —Å–≤–∏–≤–∞–Ω–µ –Ω–∞ sidebar-–∞
 */
function saveAllFormsState() {
    console.log('üíæ Saving all forms state before sidebar collapse...');

    // –ù–û–í–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–ù–û–°–¢: –°–µ—Ç–≤–∞–º–µ —Ñ–ª–∞–≥ —á–µ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å–ª–µ–¥ sidebar toggle
    sessionStorage.setItem('restoringFromSidebarToggle', 'true');

    try {
        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ employee —Ñ–æ—Ä–º–∞—Ç–∞
        saveEmployeeFormState();

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ event —Ñ–æ—Ä–º–∏—Ç–µ
        saveEventFormsState();

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ UI –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ (–∫–æ–∏ —Ñ–æ—Ä–º–∏ —Å–∞ –æ—Ç–≤–æ—Ä–µ–Ω–∏)
        saveUIState();

        console.log('‚úÖ All forms state saved successfully');

    } catch (error) {
        console.error('‚ùå Error saving forms state:', error);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ñ–æ—Ä–º–∏ –æ—Ç sessionStorage
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ —Å–ª–µ–¥ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ sidebar-–∞
 */
function restoreAllFormsState() {
    console.log('üìÇ Restoring all forms state after sidebar expansion...');

    try {
        // –ü—ä—Ä–≤–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ UI —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ (–∫–æ–∏ —Ñ–æ—Ä–º–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ –æ—Ç–≤–æ—Ä–µ–Ω–∏)
        restoreUIState();

        // –°–ª–µ–¥ —Ç–æ–≤–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∏—Ç–µ
        setTimeout(() => {
            restoreEmployeeFormState();
            restoreEventFormsState();
        }, 50); // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ —Å–µ –ø–æ–∫–∞–∂–∞—Ç —Ñ–æ—Ä–º–∏—Ç–µ –ø—ä—Ä–≤–æ

        console.log('‚úÖ All forms state restored successfully');

    } catch (error) {
        console.error('‚ùå Error restoring forms state:', error);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∞–∑–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ employee —Ñ–æ—Ä–º–∞—Ç–∞
 */
function saveEmployeeFormState() {
    const employeeForm = document.getElementById('employeeForm');

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ employee —Ñ–æ—Ä–º–∞—Ç–∞ –µ –≤–∏–¥–∏–º–∞
    if (employeeForm && !employeeForm.classList.contains('hidden')) {
        console.log('üíæ Saving employee form state...');

        // –°—ä–±–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –≤ employee —Ñ–æ—Ä–º–∞—Ç–∞
        const formData = {
            name: document.getElementById('name')?.value || '',
            lastname: document.getElementById('lastname')?.value || '',
            email: document.getElementById('email')?.value || '',
            position: document.getElementById('position')?.value || '',
            hourlyRate: document.getElementById('hourlyRate')?.value || '',
            isEditMode: window.isEditMode || false,
            editingEmployeeId: window.editingEmployeeId || null,
            submitButtonText: document.getElementById('submitEmployee')?.textContent || '‚úî'
        };

        // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ sessionStorage
        sessionStorage.setItem('employeeFormData', JSON.stringify(formData));
        console.log('‚úÖ Employee form data saved:', formData);
    } else {
        // –ê–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞, –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –∑–∞–ø–∞–∑–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        sessionStorage.removeItem('employeeFormData');
        console.log('üóëÔ∏è Employee form not open, cleared saved data');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∞–∑–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ event —Ñ–æ—Ä–º–∏—Ç–µ
 */
function saveEventFormsState() {
    // –ó–∞–ø–∞–∑–≤–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ event —Ñ–æ—Ä–º–∞ –°–ê–ú–û –∞–∫–æ –∏–º–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
    const eventForm = document.getElementById('event-form');
    const employeeSelect = document.getElementById('employeeSelect');
    const hasSelectedEmployee = employeeSelect && employeeSelect.value.trim() !== '';

    // –ü–û–ü–†–ê–í–ö–ê: –ó–∞–ø–∞–∑–≤–∞–º–µ event —Ñ–æ—Ä–º–∞—Ç–∞ —Å–∞–º–æ –∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞ –ò –∏–º–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
    if (eventForm && eventForm.style.display !== 'none' && hasSelectedEmployee) {
        console.log('üíæ Saving main event form state...');

        const eventFormData = {
            selectedDate: document.getElementById('selected-date')?.value || '',
            startTime: document.getElementById('start-time')?.value || '',
            endTime: document.getElementById('end-time')?.value || '',
            activityInput: document.getElementById('activityInput')?.value || '',
            leaveType: document.getElementById('leaveType')?.value || '',
            selectedEmployeeId: employeeSelect.value, // –ù–û–í–û: –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª
            selectedEmployeeName: employeeSelect.options[employeeSelect.selectedIndex]?.text || ''
        };

        sessionStorage.setItem('eventFormData', JSON.stringify(eventFormData));
        console.log('‚úÖ Event form data saved:', eventFormData);
    } else {
        // –ü–û–ü–†–ê–í–ö–ê: –í–∏–Ω–∞–≥–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∞–∫–æ –Ω—è–º–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
        sessionStorage.removeItem('eventFormData');
        if (!hasSelectedEmployee) {
            console.log('üö´ Event form NOT saved - no employee selected');
        }
    }

    // –ó–∞–ø–∞–∑–≤–∞–º–µ edit event —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm && editEventForm.style.display !== 'none') {
        console.log('üíæ Saving edit event form state...');

        const editEventFormData = {
            editEventId: document.getElementById('edit-event-id')?.value || '',
            currentEventDate: document.getElementById('current-event-date')?.value || '',
            editStartTime: document.getElementById('edit-start-time')?.value || '',
            editEndTime: document.getElementById('edit-end-time')?.value || '',
            editActivity: document.getElementById('edit-activity')?.value || ''
        };

        sessionStorage.setItem('editEventFormData', JSON.stringify(editEventFormData));
        console.log('‚úÖ Edit event form data saved:', editEventFormData);
    } else {
        sessionStorage.removeItem('editEventFormData');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∞–∑–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ UI –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
 */
function saveUIState() {
    const employeeListContainer = document.getElementById('employeeListContainer');
    const searchInput = document.getElementById('searchInput');

    const uiState = {
        employeeListVisible: employeeListContainer && !employeeListContainer.classList.contains('hidden'),
        searchVisible: searchInput && searchInput.style.display !== 'none',
        searchValue: searchInput?.value || ''
    };

    sessionStorage.setItem('uiState', JSON.stringify(uiState));
    console.log('üíæ UI state saved:', uiState);
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ employee —Ñ–æ—Ä–º–∞—Ç–∞
 */
function restoreEmployeeFormState() {
    const savedData = sessionStorage.getItem('employeeFormData');

    if (savedData) {
        console.log('üìÇ Restoring employee form state...');

        try {
            const formData = JSON.parse(savedData);

            // –ü–æ–∫–∞–∑–≤–∞–º–µ employee —Ñ–æ—Ä–º–∞—Ç–∞
            const employeeForm = document.getElementById('employeeForm');
            const employeeSelect = document.getElementById('employeeSelect');
            const selectLabel = document.querySelector('label[for="employeeSelect"]');
            const addEmployeeBtn = document.getElementById('addEmployeeBtn');

            if (employeeForm) {
                employeeForm.classList.remove('hidden');
            }
            if (employeeSelect) {
                employeeSelect.classList.add('hidden');
            }
            if (selectLabel) {
                selectLabel.classList.add('hidden');
            }
            if (addEmployeeBtn) {
                addEmployeeBtn.classList.add('hidden');
            }

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –≤ –ø–æ–ª–µ—Ç–∞—Ç–∞
            if (document.getElementById('name')) {
                document.getElementById('name').value = formData.name;
            }
            if (document.getElementById('lastname')) {
                document.getElementById('lastname').value = formData.lastname;
            }
            if (document.getElementById('email')) {
                document.getElementById('email').value = formData.email;
            }
            if (document.getElementById('position')) {
                document.getElementById('position').value = formData.position;
            }
            if (document.getElementById('hourlyRate')) {
                document.getElementById('hourlyRate').value = formData.hourlyRate;
            }

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ edit mode —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
            if (typeof window.isEditMode !== 'undefined') {
                window.isEditMode = formData.isEditMode;
                window.editingEmployeeId = formData.editingEmployeeId;
            }

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ submit –±—É—Ç–æ–Ω–∞
            const submitBtn = document.getElementById('submitEmployee');
            if (submitBtn) {
                //submitBtn.textContent = formData.submitButtonText;
                submitBtn.textContent = '‚úî'; // –¢–∏–∫—á–µ –∑–∞ add
                submitBtn.innerHTML = '<span>‚úî</span>'; // –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —Å span
            }

            // –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ floating labels –∑–∞ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
            activateFloatingLabelsForFilledFields(['name', 'lastname', 'email', 'position', 'hourlyRate']);

            console.log('‚úÖ Employee form state restored:', formData);

        } catch (error) {
            console.error('‚ùå Error parsing saved employee form data:', error);
            sessionStorage.removeItem('employeeFormData');
        }
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ event —Ñ–æ—Ä–º–∏—Ç–µ
 */
function restoreEventFormsState() {
    // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ event —Ñ–æ—Ä–º–∞
    const savedEventData = sessionStorage.getItem('eventFormData');
    if (savedEventData) {
        console.log('üìÇ Restoring main event form state...');

        try {
            const eventFormData = JSON.parse(savedEventData);

            // –ü–û–ü–†–ê–í–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤—Å–µ –æ—â–µ –∏–º–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª –≤ select-–∞
            const employeeSelect = document.getElementById('employeeSelect');
            const currentSelectedEmployee = employeeSelect?.value?.trim() || '';

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å–∞–º–æ –∞–∫–æ —Å–ª—É–∂–±–µ–Ω–∏—è—Ç –µ —Å—ä—â–∏—è –∫–∞—Ç–æ –∑–∞–ø–∞–∑–µ–Ω–∏—è
            if (eventFormData.selectedEmployeeId &&
                currentSelectedEmployee === eventFormData.selectedEmployeeId) {

                console.log('‚úÖ Employee still selected, restoring event form...');

                // –ü–æ–∫–∞–∑–≤–∞–º–µ event —Ñ–æ—Ä–º–∞—Ç–∞
                const eventForm = document.getElementById('event-form');
                if (eventForm) {
                    eventForm.style.display = 'block';
                }

                // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
                if (document.getElementById('selected-date')) {
                    document.getElementById('selected-date').value = eventFormData.selectedDate;
                }
                if (document.getElementById('start-time')) {
                    document.getElementById('start-time').value = eventFormData.startTime;
                }
                if (document.getElementById('end-time')) {
                    document.getElementById('end-time').value = eventFormData.endTime;
                }
                if (document.getElementById('activityInput')) {
                    document.getElementById('activityInput').value = eventFormData.activityInput;
                }
                if (document.getElementById('leaveType')) {
                    document.getElementById('leaveType').value = eventFormData.leaveType;
                }

                console.log('‚úÖ Event form state restored:', eventFormData);
            } else {
                // –ü–û–ü–†–ê–í–ö–ê: –ê–∫–æ –Ω—è–º–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª –∏–ª–∏ –µ —Ä–∞–∑–ª–∏—á–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
                console.log('üö´ Event form NOT restored - no matching employee selected');
                sessionStorage.removeItem('eventFormData'); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –æ—Å—Ç–∞—Ä–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω–∏

                // –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ —á–µ —Ñ–æ—Ä–º–∞—Ç–∞ –µ —Å–∫—Ä–∏—Ç–∞
                const eventForm = document.getElementById('event-form');
                if (eventForm) {
                    eventForm.style.display = 'none';
                }
            }

        } catch (error) {
            console.error('‚ùå Error parsing saved event form data:', error);
            sessionStorage.removeItem('eventFormData');
        }
    } else {
        // –ü–û–ü–†–ê–í–ö–ê: –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ —á–µ event —Ñ–æ—Ä–º–∞—Ç–∞ –µ —Å–∫—Ä–∏—Ç–∞ –∞–∫–æ –Ω—è–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –¥–∞–Ω–Ω–∏
        const eventForm = document.getElementById('event-form');
        if (eventForm) {
            eventForm.style.display = 'none';
        }
    }

    // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ edit event —Ñ–æ—Ä–º–∞—Ç–∞
    const savedEditData = sessionStorage.getItem('editEventFormData');
    if (savedEditData) {
        console.log('üìÇ Restoring edit event form state...');

        try {
            const editEventFormData = JSON.parse(savedEditData);

            // –ü–æ–∫–∞–∑–≤–∞–º–µ edit event —Ñ–æ—Ä–º–∞—Ç–∞
            const editEventForm = document.getElementById('edit-event-form');
            if (editEventForm) {
                editEventForm.style.display = 'block';
            }

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
            if (document.getElementById('edit-event-id')) {
                document.getElementById('edit-event-id').value = editEventFormData.editEventId;
            }
            if (document.getElementById('current-event-date')) {
                document.getElementById('current-event-date').value = editEventFormData.currentEventDate;
            }
            if (document.getElementById('edit-start-time')) {
                document.getElementById('edit-start-time').value = editEventFormData.editStartTime;
            }
            if (document.getElementById('edit-end-time')) {
                document.getElementById('edit-end-time').value = editEventFormData.editEndTime;
            }
            if (document.getElementById('edit-activity')) {
                document.getElementById('edit-activity').value = editEventFormData.editActivity;
            }

            console.log('‚úÖ Edit event form state restored:', editEventFormData);

        } catch (error) {
            console.error('‚ùå Error parsing saved edit event form data:', error);
            sessionStorage.removeItem('editEventFormData');
        }
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ UI –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
 */
function restoreUIState() {
    const savedUIState = sessionStorage.getItem('uiState');

    if (savedUIState) {
        console.log('üìÇ Restoring UI state...');

        try {
            const uiState = JSON.parse(savedUIState);

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ employee list visibility
            if (uiState.employeeListVisible) {
                const employeeListContainer = document.getElementById('employeeListContainer');
                const employeeSelect = document.getElementById('employeeSelect');
                const selectLabel = document.querySelector('label[for="employeeSelect"]');

                if (employeeListContainer) {
                    employeeListContainer.classList.remove('hidden');
                }
                if (employeeSelect) {
                    employeeSelect.classList.add('hidden');
                }
                if (selectLabel) {
                    selectLabel.classList.add('hidden');
                }
            }

            // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ search visibility –∏ —Å—Ç–æ–π–Ω–æ—Å—Ç
            if (uiState.searchVisible) {
                const searchInput = document.getElementById('searchInput');
                if (searchInput) {
                    searchInput.style.display = 'block';
                    searchInput.value = uiState.searchValue;

                    // –ê–∫–æ –∏–º–∞ —Ç—ä—Ä—Å–µ–Ω–µ, –ø—Ä–∏–ª–æ–∂–∏ —Ñ–∏–ª—Ç—ä—Ä–∞
                    if (uiState.searchValue && typeof filterEmployees === 'function') {
                        filterEmployees();
                    }
                }
            }

            console.log('‚úÖ UI state restored:', uiState);

        } catch (error) {
            console.error('‚ùå Error parsing saved UI state:', error);
            sessionStorage.removeItem('uiState');
        }
    }
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç–∏–≤–∏—Ä–∞ floating labels –∑–∞ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞
 * @param {Array} fieldIds - –ú–∞—Å–∏–≤ —Å ID-—Ç–∞ –Ω–∞ –ø–æ–ª–µ—Ç–∞—Ç–∞ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
 */
function activateFloatingLabelsForFilledFields(fieldIds) {
    fieldIds.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        const label = document.querySelector(`label[for='${fieldId}']`);

        if (field && label && field.value.trim() !== '') {
            label.classList.add('active');
            console.log(`üè∑Ô∏è Activated floating label for field: ${fieldId}`);
        }
    });
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å—Ç–≤–∞ –≤—Å–∏—á–∫–∏ –∑–∞–ø–∞–∑–µ–Ω–∏ —Å—ä—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ
 * –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∫–æ–≥–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–∑—Ä–∏—á–Ω–æ –∑–∞—Ç–≤–æ—Ä–∏ —Ñ–æ—Ä–º–∞ –∏–ª–∏ submit-–Ω–µ –¥–∞–Ω–Ω–∏
 */
function clearAllSavedFormsState() {
    console.log('üóëÔ∏è Clearing all saved forms state...');

    sessionStorage.removeItem('employeeFormData');
    sessionStorage.removeItem('eventFormData');
    sessionStorage.removeItem('editEventFormData');
    sessionStorage.removeItem('uiState');

    console.log('‚úÖ All saved forms state cleared');
}


/**
 * –î–û–ë–ê–í–ö–ê –ö–™–ú uiManager.js
 * –î–æ–±–∞–≤–∏ —Ç–µ–∑–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫—Ä–∞—è –Ω–∞ —Ñ–∞–π–ª–∞ –∑–∞ responsive –∫–∞–ª–µ–Ω–¥–∞—Ä
 */

/**
 * Initializes all UI management functionality
 * Sets up navigation, search, sidebar toggle, and general form behaviors
 */
function initializeUIManager() {
    console.log('üì± Initializing UI Manager...');

    setupNavigationHandlers();
    setupSearchFunctionality();
    setupFormEnhancements();
    setupSessionStorage();
    setupSidebarToggle();
    setupCollapsedSidebarButtonHandlers();
    ensureEventFormInitialState();
    setupResponsiveCalendar(); // –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: Responsive –∫–∞–ª–µ–Ω–¥–∞—Ä

    console.log('‚úÖ UI Manager initialized successfully');
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ responsive –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
 */
function setupResponsiveCalendar() {
    console.log('üì± Setting up responsive calendar...');

    // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ resize –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    setTimeout(() => {
        resizeCalendar();
    }, 500); // –ß–∞–∫–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞

    // –î–æ–±–∞–≤—è–º–µ resize listener —Å debouncing
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            console.log('üìè Window resized, updating calendar...');
            resizeCalendar();
            updateCalendarView();
        }, 300); // Debounce 300ms
    });

    // –î–æ–±–∞–≤—è–º–µ orientation change listener –∑–∞ mobile —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    window.addEventListener('orientationchange', function() {
        setTimeout(() => {
            console.log('üîÑ Orientation changed, updating calendar...');
            resizeCalendar();
            updateCalendarView();
        }, 500); // –ß–∞–∫–∞–º–µ orientation change –¥–∞ –∑–∞–≤—ä—Ä—à–∏
    });

    // –î–æ–±–∞–≤—è–º–µ visibility change listener
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            setTimeout(() => {
                console.log('üëÅÔ∏è Page became visible, updating calendar...');
                resizeCalendar();
            }, 100);
        }
    });

    console.log('‚úÖ Responsive calendar setup completed');
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: Resize –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ø–æ—Ä–µ–¥ —Ç–µ–∫—É—â–∏—è —Ä–∞–∑–º–µ—Ä –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞
 */
function resizeCalendar() {
    if (window.calendar && typeof window.calendar.updateSize === 'function') {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞
            window.calendar.updateSize();

            // –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª–µ–Ω —Ä–∞–∑–º–µ—Ä
            const calendarEl = document.getElementById('calendar');
            if (calendarEl) {
                const containerHeight = calendarEl.offsetHeight;
                const windowHeight = window.innerHeight;

                console.log(`üìä Calendar resized - Container: ${containerHeight}px, Window: ${windowHeight}px`);

                // –ê–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –µ –ø–æ-–≤–∏—Å–æ–∫ –æ—Ç –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞, –∫–æ—Ä—Ä–∏–≥–∏—Ä–∞–º–µ
                if (containerHeight > windowHeight) {
                    console.log('‚ö†Ô∏è Calendar height exceeds window, adjusting...');
                    adjustCalendarHeight();
                }
            }

        } catch (error) {
            console.error('‚ùå Error resizing calendar:', error);
        }
    } else {
        console.warn('‚ö†Ô∏è Calendar instance not available for resize');
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ö–æ—Ä–∏–≥–∏—Ä–∞ –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –ø—Ä–∏ –Ω—É–∂–¥–∞
 */
function adjustCalendarHeight() {
    const calendarEl = document.getElementById('calendar');
    const sidebarEl = document.getElementById('sidebar');

    if (calendarEl && sidebarEl) {
        const windowHeight = window.innerHeight;
        const sidebarHeight = sidebarEl.offsetHeight;
        const isMobile = window.innerWidth <= 768;

        let availableHeight;

        if (isMobile) {
            // –ù–∞ mobile: –≤–∏—Å–æ—á–∏–Ω–∞ = –µ–∫—Ä–∞–Ω - sidebar - padding
            availableHeight = windowHeight - sidebarHeight - 20;
        } else {
            // –ù–∞ desktop: –≤–∏—Å–æ—á–∏–Ω–∞ = –µ–∫—Ä–∞–Ω - padding
            availableHeight = windowHeight - 30;
        }

        // –ó–∞–¥–∞–≤–∞–º–µ –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ –≤–∏—Å–æ—á–∏–Ω–∞
        calendarEl.style.height = `${availableHeight}px`;
        calendarEl.style.maxHeight = `${availableHeight}px`;

        console.log(`üîß Calendar height adjusted to ${availableHeight}px`);

        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ª–µ–¥ –∫–æ—Ä–µ–∫—Ü–∏—è—Ç–∞
        if (window.calendar) {
            setTimeout(() => {
                window.calendar.updateSize();
            }, 100);
        }
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤—è–≤–∞ view –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–ø–æ—Ä–µ–¥ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
 */
function updateCalendarView() {
    if (!window.calendar) return;

    const windowWidth = window.innerWidth;
    const currentView = window.calendar.view.type;

    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è view —Å–ø–æ—Ä–µ–¥ —à–∏—Ä–∏–Ω–∞—Ç–∞ –Ω–∞ –µ–∫—Ä–∞–Ω–∞
        let targetView = 'dayGridMonth'; // Default

        if (windowWidth <= 480) {
            // –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: —Å–µ–¥–º–∏—á–µ–Ω –∏–∑–≥–ª–µ–¥ –µ –ø–æ-—É–¥–æ–±–µ–Ω
            targetView = 'listWeek';
        } else if (windowWidth <= 768) {
            // –ù–∞ tablet: —Å–µ–¥–º–∏—á–µ–Ω –∏–∑–≥–ª–µ–¥ –∏–ª–∏ –º–µ—Å–µ—á–µ–Ω
            targetView = 'dayGridWeek';
        } else {
            // –ù–∞ desktop: –º–µ—Å–µ—á–µ–Ω –∏–∑–≥–ª–µ–¥
            targetView = 'dayGridMonth';
        }

        // –ü—Ä–æ–º–µ–Ω—è–º–µ view —Å–∞–º–æ –∞–∫–æ –µ —Ä–∞–∑–ª–∏—á–µ–Ω –æ—Ç —Ç–µ–∫—É—â–∏—è
        if (currentView !== targetView) {
            console.log(`üìÖ Changing calendar view from ${currentView} to ${targetView}`);
            window.calendar.changeView(targetView);
        }

    } catch (error) {
        console.error('‚ùå Error updating calendar view:', error);
    }
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ –µ mobile
 */
function isMobileDevice() {
    return window.innerWidth <= 768;
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ –µ –≤ landscape —Ä–µ–∂–∏–º
 */
function isLandscapeMode() {
    return window.innerWidth > window.innerHeight;
}

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è —Ä–∞–∑–º–µ—Ä –Ω–∞ sidebar —Å–ø–æ—Ä–µ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ
 */
function getOptimalSidebarWidth() {
    const windowWidth = window.innerWidth;

    if (windowWidth <= 480) {
        return '100%'; // –ü—ä–ª–Ω–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    } else if (windowWidth <= 768) {
        return '100%'; // –ü—ä–ª–Ω–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ tablet –≤ portrait
    } else if (windowWidth <= 1200) {
        return '280px'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ –º–∞–ª–∫–∏ desktop
    } else {
        return '320px'; // –ü–æ-–≥–æ–ª—è–º–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ –≥–æ–ª–µ–º–∏ desktop
    }
}

/**
 * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –†–∞–∑—à–∏—Ä—è–≤–∞ sidebar-–∞ —Å responsive —Ä–∞–∑–º–µ—Ä–∏
 */
function expandSidebar() {
    const sidebar = document.getElementById('sidebar');

    if (sidebar) {
        console.log('üìñ Expanding sidebar with responsive sizing...');

        // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∫–ª–∞—Å–∞ –∑–∞ —Å–≤–∏—Ç sidebar
        sidebar.classList.remove('collapsed');

        // –ó–∞–¥–∞–≤–∞–º–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å–ø–æ—Ä–µ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ
        const optimalWidth = getOptimalSidebarWidth();
        if (!isMobileDevice()) {
            sidebar.style.width = optimalWidth;
            sidebar.style.minWidth = optimalWidth;
        }

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ toggle –±—É—Ç–æ–Ω–∞
        updateToggleButton(false);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –≤ localStorage
        localStorage.setItem('sidebarCollapsed', 'false');

        // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ
        setTimeout(() => {
            restoreAllFormsState();
        }, 100);

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        setTimeout(() => {
            resizeCalendar();
        }, 350);

        console.log('‚úÖ Sidebar expanded with responsive sizing');
    }
}

/**
 * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –°–≤–∏–≤–∞ sidebar-–∞ —Å responsive —Ä–∞–∑–º–µ—Ä–∏
 */
function collapseSidebar() {
    const sidebar = document.getElementById('sidebar');

    if (sidebar) {
        console.log('üìï Collapsing sidebar with responsive sizing...');

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ
        saveAllFormsState();

        // –î–æ–±–∞–≤—è–º–µ –∫–ª–∞—Å–∞ –∑–∞ —Å–≤–∏—Ç sidebar
        sidebar.classList.add('collapsed');

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ toggle –±—É—Ç–æ–Ω–∞
        updateToggleButton(true);

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –≤ localStorage
        localStorage.setItem('sidebarCollapsed', 'true');

        // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –æ—Ç–≤–æ—Ä–µ–Ω–∏ —Ñ–æ—Ä–º–∏
        hideAllOpenForms();

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        setTimeout(() => {
            resizeCalendar();
        }, 350);

        console.log('‚úÖ Sidebar collapsed with responsive sizing');
    }
}

// –ù–û–í–ò –ï–ö–°–ü–û–†–¢–ò: –ü—Ä–∞–≤–∏–º –Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—ä–ø–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ
window.saveAllFormsState = saveAllFormsState;
window.restoreAllFormsState = restoreAllFormsState;
window.clearAllSavedFormsState = clearAllSavedFormsState;
window.setupResponsiveCalendar = setupResponsiveCalendar;
window.resizeCalendar = resizeCalendar;
window.adjustCalendarHeight = adjustCalendarHeight;
window.updateCalendarView = updateCalendarView;
window.isMobileDevice = isMobileDevice;
window.isLandscapeMode = isLandscapeMode;
window.getOptimalSidebarWidth = getOptimalSidebarWidth;

/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –£–≤–µ—Ä—è–≤–∞ —Å–µ —á–µ event —Ñ–æ—Ä–º–∞—Ç–∞ –µ —Å–∫—Ä–∏—Ç–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –≤ initializeUIManager()
 */
function ensureEventFormInitialState() {
    console.log('üîí Ensuring event form is hidden on page load...');

    // –°–∫—Ä–∏–≤–∞–º–µ event —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Å–∏—á–∫–æ –¥—Ä—É–≥–æ
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'none';
        console.log('‚úÖ Event form hidden on initialization');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ –∏ edit event —Ñ–æ—Ä–º–∞—Ç–∞
    const editEventForm = document.getElementById('edit-event-form');
    if (editEventForm) {
        editEventForm.style.display = 'none';
        console.log('‚úÖ Edit event form hidden on initialization');
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ event form –¥–∞–Ω–Ω–∏ –æ—Ç sessionStorage –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
    // (–æ—Å–≤–µ–Ω –∞–∫–æ –Ω–µ —Å–º–µ –≤ –ø—Ä–æ—Ü–µ—Å –Ω–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ —Å–ª–µ–¥ sidebar toggle)
    const isRestoringFromSidebarToggle = sessionStorage.getItem('restoringFromSidebarToggle') === 'true';

    if (!isRestoringFromSidebarToggle) {
        sessionStorage.removeItem('eventFormData');
        sessionStorage.removeItem('editEventFormData');
        console.log('üóëÔ∏è Cleared event form data on fresh page load');
    }

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Ñ–ª–∞–≥–∞ –∑–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ
    sessionStorage.removeItem('restoringFromSidebarToggle');
}