/**
 * –û–ë–ù–û–í–ï–ù VALIDATION MANAGER
 * –°–µ–≥–∞ —Ä–∞–±–æ—Ç–∏ —Å backend –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –≤–º–µ—Å—Ç–æ frontend –ª–æ–≥–∏–∫–∞
 */

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –í–ê–õ–ò–î–ê–¶–ò–Ø
 * –ò–∑–ø—Ä–∞—â–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º backend –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
 * @param {Object} eventData - –î–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {string} originalEventId - ID –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ)
 * @returns {boolean} - true –∞–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –º–∏–Ω–µ, false –∞–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∏
 */
async function validateAndNotify(eventData, employeeId, originalEventId = null) {
    console.log('üîç Starting backend validation...');
    console.log('üìä Event data for validation:', eventData);
    console.log('üë§ Employee ID:', employeeId);
    console.log('üîÑ Original event ID (if editing):', originalEventId);

    try {
        // –ê–∫–æ –µ leave type —Å—ä–±–∏—Ç–∏–µ, –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–∞–º–µ (–æ—Ç–ø—É—Å–∫–∏—Ç–µ –Ω–µ –≤–ª–∏—è—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ)
        if (eventData.leaveType && eventData.leaveType.trim() !== '') {
            console.log('üèñÔ∏è Leave event detected, skipping validation');
            return true;
        }

        // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ backend –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const validationPayload = {
            id: originalEventId ? parseInt(originalEventId) : null,
            title: eventData.title,
            start: eventData.start,
            end: eventData.end,
            activity: eventData.activity,
            leaveType: eventData.leaveType,
            employee: {
                id: parseInt(employeeId)
            }
        };

        console.log('üöÄ Sending validation request to backend:', validationPayload);

        // –ò–∑–ø—Ä–∞—â–∞–º–µ POST –∑–∞—è–≤–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ä–º backend
        const response = await fetch('http://localhost:8080/api/validate/event', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(validationPayload)
        });

        console.log('üì° Backend validation response status:', response.status);

        // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞
        const result = await response.json();
        console.log('üìã Backend validation result:', result);

        if (response.ok && result.valid) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ
            console.log('‚úÖ Backend validation passed');
            return true;
        } else {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞
            console.log('‚ùå Backend validation failed:', result.errors || [result.error]);

            // –ü–æ–∫–∞–∑–≤–∞–º–µ –≥—Ä–µ—à–∫–∞—Ç–∞/–≥—Ä–µ—à–∫–∏—Ç–µ
            const errors = result.errors || [result.error || 'Validation failed'];
            showValidationNotification(errors, 'error');

            return false;
        }

    } catch (error) {
        console.error('‚ùå Error during backend validation:', error);

        // –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –≤ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è—Ç–∞ —Å backend
        showValidationNotification(['Unable to validate schedule. Please try again.'], 'error');
        return false;
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø –ó–ê –ü–û–ö–ê–ó–í–ê–ù–ï –ù–ê VALIDATION –°–™–û–ë–©–ï–ù–ò–Ø
 * –ò–∑–ø–æ–ª–∑–≤–∞ —Å—ä—â–∏—è —Å—Ç–∏–ª –∫–∞—Ç–æ drag & drop notification-–∏—Ç–µ
 * @param {Array} errors - –ú–∞—Å–∏–≤ —Å –≥—Ä–µ—à–∫–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
 * @param {string} type - –¢–∏–ø –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ ('error', 'warning', 'info')
 */
function showValidationNotification(errors, type = 'error') {
    // –ê–∫–æ –Ω—è–º–∞ –≥—Ä–µ—à–∫–∏, –Ω–µ –ø–æ–∫–∞–∑–≤–∞–º–µ –Ω–∏—â–æ
    if (!errors || errors.length === 0) {
        return;
    }

    console.log('üì¢ Showing validation notification:', errors);

    // –°—ä–∑–¥–∞–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ - –∫–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –≥—Ä–µ—à–∫–∏
    let message = errors.length === 1
        ? errors[0]
        : `Multiple validation errors:\n‚Ä¢ ${errors.join('\n‚Ä¢ ')}`;

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—ä—â–∞—Ç–∞ notification —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–æ drag & drop
    if (typeof showDragDropNotification === 'function') {
        showDragDropNotification(message, type);
    } else {
        // Fallback –∫—ä–º alert –∞–∫–æ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–∞
        alert(`Validation Error:\n${message}`);
    }
}

/**
 * –û–ü–†–û–°–¢–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó NOTIFICATION
 * –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∫–æ–≥–∞—Ç–æ –∏—Å–∫–∞–º–µ —Å–∞–º–æ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –±–µ–∑ –¥–∞ –ø–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏—è
 * @param {Object} eventData - –î–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {string} originalEventId - ID –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ)
 * @returns {Object} - –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ {isValid: boolean, errors: Array}
 */
async function validateEmployeeSchedule(eventData, employeeId, originalEventId = null) {
    console.log('üîç Starting backend validation (silent mode)...');

    try {
        // –ê–∫–æ –µ leave type —Å—ä–±–∏—Ç–∏–µ, –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–∞–º–µ
        if (eventData.leaveType && eventData.leaveType.trim() !== '') {
            console.log('üèñÔ∏è Leave event detected, skipping validation');
            return { isValid: true, errors: [] };
        }

        // –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ backend –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const validationPayload = {
            id: originalEventId ? parseInt(originalEventId) : null,
            title: eventData.title,
            start: eventData.start,
            end: eventData.end,
            activity: eventData.activity,
            leaveType: eventData.leaveType,
            employee: {
                id: parseInt(employeeId)
            }
        };

        console.log('üöÄ Sending silent validation request to backend:', validationPayload);

        // –ò–∑–ø—Ä–∞—â–∞–º–µ POST –∑–∞—è–≤–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ä–º backend
        const response = await fetch('http://localhost:8080/api/validate/event', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(validationPayload)
        });

        // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞
        const result = await response.json();
        console.log('üìã Backend validation result (silent):', result);

        if (response.ok && result.valid) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ
            console.log('‚úÖ Backend validation passed (silent)');
            return { isValid: true, errors: [] };
        } else {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞
            console.log('‚ùå Backend validation failed (silent):', result.errors || [result.error]);

            const errors = result.errors || [result.error || 'Validation failed'];
            return { isValid: false, errors: errors };
        }

    } catch (error) {
        console.error('‚ùå Error during backend validation (silent):', error);
        return { isValid: false, errors: ['Unable to validate schedule. Please try again.'] };
    }
}

/**
 * DUMMY –§–£–ù–ö–¶–ò–ò –ó–ê –°–™–í–ú–ï–°–¢–ò–ú–û–°–¢
 * –¢–µ–∑–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ –∑–∞–ø–∞–∑–≤–∞—Ç –∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç —Å –∫–æ–¥–∞, –Ω–æ –≤–µ—á–µ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç
 */
async function getEmployeeEvents(employeeId) {
    console.warn('‚ö†Ô∏è getEmployeeEvents is deprecated - validation is now handled by backend');
    return [];
}

function calculateEventDuration(startTime, endTime) {
    console.warn('‚ö†Ô∏è calculateEventDuration is deprecated - validation is now handled by backend');
    return 0;
}

function getWeekStart(date) {
    console.warn('‚ö†Ô∏è getWeekStart is deprecated - validation is now handled by backend');
    return new Date();
}

function getWeekEnd(date) {
    console.warn('‚ö†Ô∏è getWeekEnd is deprecated - validation is now handled by backend');
    return new Date();
}

// –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –≤ –¥—Ä—É–≥–∏ –º–æ–¥—É–ª–∏
window.validateEmployeeSchedule = validateEmployeeSchedule;
window.validateAndNotify = validateAndNotify;
window.showValidationNotification = showValidationNotification;

// –ó–∞–ø–∞–∑–≤–∞–º–µ dummy —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç
window.getEmployeeEvents = getEmployeeEvents;
window.calculateEventDuration = calculateEventDuration;
window.getWeekStart = getWeekStart;
window.getWeekEnd = getWeekEnd;