/**
 * –ú–û–î–£–õ –ó–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê –ì–†–ê–§–ò–ö
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ UI –∏ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è—Ç–∞ —Å backend –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–µ—Å–µ—á–Ω–∏ –≥—Ä–∞—Ñ–∏—Ü–∏
 */

// –ì–õ–û–ë–ê–õ–ù–ò –ü–†–û–ú–ï–ù–õ–ò–í–ò
let scheduleGeneratorModal = null;
let isGenerating = false;

/**
 * –§–£–ù–ö–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –º–æ–¥—É–ª–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
 * –¢—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–≤–∏–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
 */
function initializeScheduleGenerator() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–¥—É–ª–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫...');

    // –°–¢–™–ü–ö–ê 1: –°—ä–∑–¥–∞–≤–∞–º–µ –±—É—Ç–æ–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (–∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
    createGenerateScheduleButton();

    // –°–¢–™–ü–ö–ê 2: –°—ä–∑–¥–∞–≤–∞–º–µ –º–æ–¥–∞–ª–Ω–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
    createScheduleGeneratorModal();

    // –°–¢–™–ü–ö–ê 3: –î–æ–±–∞–≤—è–º–µ event listeners
    attachEventListeners();

    console.log('‚úÖ –ú–æ–¥—É–ª—ä—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω');
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ –±—É—Ç–æ–Ω –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –≤ UI
 */
function createGenerateScheduleButton() {
    // –¢—ä—Ä—Å–∏–º –ø–æ–¥—Ö–æ–¥—è—â–æ –º—è—Å—Ç–æ –∑–∞ –±—É—Ç–æ–Ω–∞ (–¥–æ –¥—Ä—É–≥–∏ –±—É—Ç–æ–Ω–∏ –≤ header-–∞)
    const headerButtons = document.querySelector('.header-buttons') ||
                         document.querySelector('header') ||
                         document.querySelector('#employee-section .form-actions');

    if (headerButtons) {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –±—É—Ç–æ–Ω—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        if (!document.getElementById('generate-schedule-btn')) {
            const generateBtn = document.createElement('button');
            generateBtn.id = 'generate-schedule-btn';
            generateBtn.className = 'generate-schedule-btn';
            generateBtn.innerHTML = 'üîÑ Generate Monthly Schedule';
            generateBtn.title = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–µ—Å–µ—á–µ–Ω –≥—Ä–∞—Ñ–∏–∫';

            headerButtons.appendChild(generateBtn);
            console.log('üìã –°—ä–∑–¥–∞–¥–µ–Ω –±—É—Ç–æ–Ω –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫');
        }
    } else {
        console.warn('‚ö†Ô∏è –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ –º—è—Å—Ç–æ –∑–∞ –±—É—Ç–æ–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ');
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ –º–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ
 */
function createScheduleGeneratorModal() {
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—Ç–∞—Ä modal –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    const existingModal = document.getElementById('schedule-generator-modal');
    if (existingModal) {
        existingModal.remove();
    }

    // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–∏—è modal
    const modal = document.createElement('div');
    modal.id = 'schedule-generator-modal';
    modal.className = 'modal-overlay';
    modal.style.display = 'none';

    // –ü–æ–ª—É—á–∞–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1; // JavaScript –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based
    const nextMonth = currentMonth === 12 ? 1 : currentMonth + 1;
    const nextMonthYear = currentMonth === 12 ? currentYear + 1 : currentYear;

    modal.innerHTML = `
        <div class="modal-content schedule-generator-modal">
            <div class="modal-header">
                <h2>üîÑ Generate Monthly Schedule</h2>
                <button class="modal-close" onclick="closeScheduleGeneratorModal()">&times;</button>
            </div>

            <div class="modal-body">
                <div class="info-section">
                    <p><strong>üìÖ This will automatically generate a balanced work schedule for all employees.</strong></p>
                    <ul>
                        <li>‚úÖ Balanced shift distribution (first, second, middle shifts)</li>
                        <li>‚úÖ Respects contract hours (4h, 6h, 8h per day)</li>
                        <li>‚úÖ Maximum 6 consecutive work days</li>
                        <li>‚úÖ Minimum 12 hours rest between shifts</li>
                        <li>‚úÖ Preserves manually created shifts</li>
                        <li>‚ö†Ô∏è Will delete existing auto-generated shifts for the selected month</li>
                    </ul>
                </div>

                <div class="generation-settings">
                    <div class="form-group">
                        <label for="generation-year">Year:</label>
                        <select id="generation-year" class="form-control">
                            <option value="${currentYear - 1}">${currentYear - 1}</option>
                            <option value="${currentYear}" selected>${currentYear}</option>
                            <option value="${currentYear + 1}">${currentYear + 1}</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="generation-month">Month:</label>
                        <select id="generation-month" class="form-control">
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                    </div>

                    <div class="suggested-options">
                        <p><strong>Quick options:</strong></p>
                        <button type="button" class="quick-option-btn" onclick="setGenerationDate(${currentYear}, ${currentMonth})">
                            Current Month (${getMonthName(currentMonth)} ${currentYear})
                        </button>
                        <button type="button" class="quick-option-btn" onclick="setGenerationDate(${nextMonthYear}, ${nextMonth})">
                            Next Month (${getMonthName(nextMonth)} ${nextMonthYear})
                        </button>
                    </div>
                </div>

                <div id="generation-status" class="generation-status" style="display: none;">
                    <div class="loading-spinner"></div>
                    <span id="generation-status-text">Generating schedule...</span>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="cancel-btn" onclick="closeScheduleGeneratorModal()">Cancel</button>
                <button type="button" id="start-generation-btn" class="primary-btn" onclick="startScheduleGeneration()">
                    üöÄ Generate Schedule
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    scheduleGeneratorModal = modal;

    // –ó–∞–¥–∞–≤–∞–º–µ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Å–ª–µ–¥–≤–∞—â–∏—è –º–µ—Å–µ—Ü
    setGenerationDate(nextMonthYear, nextMonth);
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤—è event listeners –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
 */
function attachEventListeners() {
    // Event listener –∑–∞ –≥–ª–∞–≤–Ω–∏—è –±—É—Ç–æ–Ω
    const generateBtn = document.getElementById('generate-schedule-btn');
    if (generateBtn) {
        generateBtn.addEventListener('click', showScheduleGeneratorModal);
    }

    // Event listener –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ modal –ø—Ä–∏ –∫–ª–∏–∫ –∏–∑–≤—ä–Ω –Ω–µ–≥–æ
    if (scheduleGeneratorModal) {
        scheduleGeneratorModal.addEventListener('click', function(event) {
            if (event.target === scheduleGeneratorModal) {
                closeScheduleGeneratorModal();
            }
        });
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ –º–æ–¥–∞–ª–Ω–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
 */
function showScheduleGeneratorModal() {
    console.log('üìã –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ modal –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫');

    if (scheduleGeneratorModal) {
        scheduleGeneratorModal.style.display = 'block';

        // –î–æ–±–∞–≤—è–º–µ –∞–Ω–∏–º–∞—Ü–∏—è
        setTimeout(() => {
            scheduleGeneratorModal.classList.add('show');
        }, 10);
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ó–∞—Ç–≤–∞—Ä—è –º–æ–¥–∞–ª–Ω–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
 */
function closeScheduleGeneratorModal() {
    console.log('‚ùå –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ modal –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ');

    if (scheduleGeneratorModal && !isGenerating) {
        scheduleGeneratorModal.classList.remove('show');

        setTimeout(() => {
            scheduleGeneratorModal.style.display = 'none';
            resetGenerationStatus();
        }, 300);
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ó–∞–¥–∞–≤–∞ –¥–∞—Ç–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (–∑–∞ quick options)
 */
function setGenerationDate(year, month) {
    const yearSelect = document.getElementById('generation-year');
    const monthSelect = document.getElementById('generation-month');

    if (yearSelect && monthSelect) {
        yearSelect.value = year;
        monthSelect.value = month;

        console.log(`üìÖ –ó–∞–¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: ${month}/${year}`);
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –°—Ç–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–æ—Ü–µ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
 */
async function startScheduleGeneration() {
    console.log('üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫...');

    // –°–¢–™–ü–ö–ê 1: –í–∑–µ–º–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    const year = parseInt(document.getElementById('generation-year').value);
    const month = parseInt(document.getElementById('generation-month').value);

    // –°–¢–™–ü–ö–ê 2: –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
    if (!year || !month || year < 2020 || year > 2030 || month < 1 || month > 12) {
        alert('–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ –≥–æ–¥–∏–Ω–∞ –∏ –º–µ—Å–µ—Ü!');
        return;
    }

    // –°–¢–™–ü–ö–ê 3: –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    const monthName = getMonthName(month);
    const confirmMessage = `–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ ${monthName} ${year}?\n\n–¢–æ–≤–∞ —â–µ –∏–∑—Ç—Ä–∏–µ –≤—Å–∏—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ —Ç–æ–∑–∏ –º–µ—Å–µ—Ü!`;

    if (!confirm(confirmMessage)) {
        console.log('‚ùå –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –æ—Ç–∫–∞–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ');
        return;
    }

    // –°–¢–™–ü–ö–ê 4: –ü–æ–∫–∞–∑–≤–∞–º–µ loading —Å—ä—Å—Ç–æ—è–Ω–∏–µ
    showGenerationInProgress();

    try {
        // –°–¢–™–ü–ö–ê 5: –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º backend
        console.log(`üì° –ü—Ä–∞—â–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: ${month}/${year}`);

        const response = await fetch('/api/schedule-generation/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                year: year,
                month: month
            })
        });

        const result = await response.json();

        // –°–¢–™–ü–ö–ê 6: –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞
        if (response.ok && result.success) {
            // –£—Å–ø–µ—Ö
            showGenerationSuccess(result);

            // –û–ø—Ä–µ—Å–Ω—è–≤–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
             if (typeof refreshCalendar === 'function') {
                 setTimeout(() => {
                     refreshCalendar();
                 }, 1000);
             }

             // –î–û–ë–ê–í–ò –¢–ï–ó–ò –†–ï–î–û–í–ï:
             // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª (–∞–∫–æ –∏–º–∞ —Ç–∞–∫—ä–≤)
            const selectedEmployeeSelect = document.getElementById('employeeSelect');
            if (selectedEmployeeSelect && selectedEmployeeSelect.value && typeof loadAndShowWeeklySchedule === 'function') {
                const selectedEmployeeId = selectedEmployeeSelect.value;
                const selectedEmployeeName = selectedEmployeeSelect.options[selectedEmployeeSelect.selectedIndex]?.text;

                console.log(`üîÑ Refreshing weekly data for employee: ${selectedEmployeeName} (ID: ${selectedEmployeeId})`);

                setTimeout(() => {
                    console.log('üìä Calling loadAndShowWeeklySchedule to refresh sidebar data...');
                    loadAndShowWeeklySchedule(selectedEmployeeId, selectedEmployeeName);
                }, 2000); // –ò–∑—á–∞–∫–≤–∞–º–µ 2 —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –¥–∞ —Å–µ –æ–±–Ω–æ–≤–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –ø—ä—Ä–≤–æ
            }

        } else {
            // –ì—Ä–µ—à–∫–∞ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞');
        }

    } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ:', error);
        showGenerationError(error.message);
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ loading —Å—ä—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
 */
function showGenerationInProgress() {
    isGenerating = true;

    const statusDiv = document.getElementById('generation-status');
    const statusText = document.getElementById('generation-status-text');
    const generateBtn = document.getElementById('start-generation-btn');

    if (statusDiv && statusText && generateBtn) {
        statusText.textContent = 'Generating schedule... Please wait.';
        statusDiv.style.display = 'flex';
        generateBtn.disabled = true;
        generateBtn.textContent = 'Generating...';
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ —É—Å–ø–µ—à–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
 */
function showGenerationSuccess(result) {
    const statusDiv = document.getElementById('generation-status');
    const statusText = document.getElementById('generation-status-text');

    if (statusDiv && statusText) {
        statusDiv.className = 'generation-status success';
        statusText.innerHTML = `‚úÖ ${result.message}<br>Generated ${result.generatedShifts} shifts successfully!`;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ —Å–ª–µ–¥ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            closeScheduleGeneratorModal();
        }, 3000);
    }

    isGenerating = false;
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ –≥—Ä–µ—à–∫–∞
 */
function showGenerationError(errorMessage) {
    const statusDiv = document.getElementById('generation-status');
    const statusText = document.getElementById('generation-status-text');
    const generateBtn = document.getElementById('start-generation-btn');

    if (statusDiv && statusText) {
        statusDiv.className = 'generation-status error';
        statusText.innerHTML = `‚ùå Error: ${errorMessage}`;
    }

    if (generateBtn) {
        generateBtn.disabled = false;
        generateBtn.textContent = 'üöÄ Generate Schedule';
    }

    isGenerating = false;
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –†–µ—Å–µ—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ
 */
function resetGenerationStatus() {
    const statusDiv = document.getElementById('generation-status');
    const generateBtn = document.getElementById('start-generation-btn');

    if (statusDiv) {
        statusDiv.style.display = 'none';
        statusDiv.className = 'generation-status';
    }

    if (generateBtn) {
        generateBtn.disabled = false;
        generateBtn.textContent = 'üöÄ Generate Schedule';
    }

    isGenerating = false;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –í—Ä—ä—â–∞ –∏–º–µ –Ω–∞ –º–µ—Å–µ—Ü–∞
 */
function getMonthName(month) {
    const monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return monthNames[month - 1] || 'Unknown';
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–ø—Ä–µ—Å–Ω—è–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ (–∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
 */
function refreshCalendar() {
    console.log('üîÑ –û–ø—Ä–µ—Å–Ω—è–≤–∞–Ω–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≥–ª–æ–±–∞–ª–Ω–∏—è calendar –æ–±–µ–∫—Ç –æ—Ç FullCalendar
    if (window.calendar && typeof window.calendar.refetchEvents === 'function') {
        window.calendar.refetchEvents();
        console.log('‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –µ –æ–ø—Ä–µ—Å–Ω–µ–Ω');
    } else {
        // –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –æ–ø—Ä–µ—Å–Ω—è–≤–∞–Ω–µ —á—Ä–µ–∑ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
        console.log('üîÑ –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –æ–ø—Ä–µ—Å–Ω—è–≤–∞–Ω–µ...');
        setTimeout(() => {
            window.location.reload();
        }, 2000);
    }
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–ê–ù–ï –ü–†–ò –ó–ê–†–ï–ñ–î–ê–ù–ï –ù–ê –î–û–ö–£–ú–ï–ù–¢–ê
document.addEventListener('DOMContentLoaded', function() {
    // –ò–∑—á–∞–∫–≤–∞–º–µ –º–∞–ª–∫–æ –ø—Ä–µ–¥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ, –∑–∞ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥—è—Ç –¥—Ä—É–≥–∏—Ç–µ –º–æ–¥—É–ª–∏
    setTimeout(initializeScheduleGenerator, 500);
});