/**
 * ========================================
 * FIXED DRAG TO FORM MANAGER (v3)
 * ========================================
 *
 * –ì–õ–ê–í–ù–ò –ü–û–ü–†–ê–í–ö–ò:
 * 1. –§–∏–∫—Å–∏—Ä–∞–Ω –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –¥–∞—Ç–∏—Ç–µ (string vs Date object)
 * 2. –ü–æ–¥–æ–±—Ä–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∏ –º–µ–∂–¥—É drag —Å–∏—Å—Ç–µ–º–∏—Ç–µ
 * 3. –î–æ–±–∞–≤–µ–Ω–∞ robust –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
 * 4. –ü–æ–¥–æ–±—Ä–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä –∏ —Ñ–æ—Ä–º–∞
 *
 * –ü–†–û–ë–õ–ï–ú–ò –ö–û–ò–¢–û –°–ê –†–ï–®–ï–ù–ò:
 * - –ë–ª–æ–∫–∏—Ä–∞–Ω–µ –ø—Ä–∏ –≤–ª–∞—á–µ–Ω–µ –Ω–∞ —Å–º—è–Ω–∞ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞
 * - –ù–µ–ø–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ –ø–æ–ª–µ—Ç–∞—Ç–∞ –∑–∞ —á–∞—Å
 * - –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª–Ω–æ—Ç–æ drag & drop –∏ drag-to-form
 */

// ========================================
// –ì–õ–û–ë–ê–õ–ù–ò –ü–†–û–ú–ï–ù–õ–ò–í–ò –ó–ê DRAG-TO-FORM
// ========================================
let isDragToFormActive = false;        // –§–ª–∞–≥ –¥–∞–ª–∏ —Å–º–µ –≤ drag-to-form —Ä–µ–∂–∏–º
let draggedEventData = null;           // –î–∞–Ω–Ω–∏—Ç–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –∫–æ–µ—Ç–æ —Å–µ –≤–ª–∞—á–∏
let originalEventPosition = null;      // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
let formDropZones = [];               // –ú–∞—Å–∏–≤ —Å drop zone –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ
let isFormDragInProgress = false;     // –ù–û–í–ê –ü–†–û–ú–ï–ù–õ–ò–í–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∏

console.log('üîß FIXED Drag to Form Manager (v3) initializing...');

// ========================================
// –û–°–ù–û–í–ù–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ========================================
function initializeDragToFormManager() {
    console.log('üöÄ Initializing FIXED drag-to-form manager...');

    // –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ drop –∑–æ–Ω–∏—Ç–µ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    setupFormDropZones();

    // –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ keyboard shortcuts
    setupKeyboardShortcuts();

    // –ù–û–í–û: –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏ —Å—ä–±–∏—Ç–∏—è
    setupCalendarEventObserver();

    console.log('‚úÖ FIXED Drag-to-form manager initialized successfully');
}

// ========================================
// –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ù–ê–ë–õ–Æ–î–ï–ù–ò–ï –ù–ê –ö–ê–õ–ï–ù–î–ê–†–ù–ò –°–™–ë–ò–¢–ò–Ø
// ========================================
function setupCalendarEventObserver() {
    console.log('üëÅÔ∏è Setting up calendar event observer for drag detection...');

    // –ß–∞–∫–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏
    const checkCalendar = setInterval(() => {
        if (window.calendar) {
            console.log('üìÖ Calendar found, setting up event observers');

            // –î–æ–±–∞–≤—è–º–µ –≥–ª–æ–±–∞–ª–µ–Ω listener –∑–∞ calendar drag –æ–ø–µ—Ä–∞—Ü–∏–∏
            setupCalendarDragListeners();

            clearInterval(checkCalendar);
        }
    }, 100);

    // Cleanup —Å–ª–µ–¥ 10 —Å–µ–∫—É–Ω–¥–∏ –∞–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –Ω–µ —Å–µ –∑–∞—Ä–µ–¥–∏
    setTimeout(() => {
        clearInterval(checkCalendar);
    }, 10000);
}

// ========================================
// –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê CALENDAR DRAG LISTENERS
// ========================================
function setupCalendarDragListeners() {
    console.log('üéØ Setting up calendar drag listeners...');

    // –í–ê–ñ–ù–û: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ MutationObserver –∑–∞ –¥–∞ –∑–∞—Å–µ—á–µ–º drag –æ–ø–µ—Ä–∞—Ü–∏–∏
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            // –¢—ä—Ä—Å–∏–º –Ω–æ–≤–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å –∫–ª–∞—Å–∞ –∑–∞ drag
            mutation.addedNodes.forEach(function(node) {
                if (node.nodeType === 1 && node.classList) {
                    // –ó–∞—Å–∏—á–∞–º–µ –∑–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è
                    if (node.classList.contains('fc-event-dragging')) {
                        console.log('üñ±Ô∏è Drag start detected via observer');
                        const eventEl = node;
                        const eventData = extractEventDataFromElement(eventEl);

                        if (eventData) {
                            console.log('üìä Event data extracted for drag:', eventData);
                            handleDragToFormStart({ event: eventData });
                            isFormDragInProgress = true; // –ù–û–í–û: –ú–∞—Ä–∫–∏—Ä–∞–º–µ —á–µ –µ –≤ —Ö–æ–¥ drag –æ–ø–µ—Ä–∞—Ü–∏—è
                        }
                    }
                }
            });

            // –ó–∞—Å–∏—á–∞–º–µ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ drag –æ–ø–µ—Ä–∞—Ü–∏—è
            mutation.removedNodes.forEach(function(node) {
                if (node.nodeType === 1 && node.classList && node.classList.contains('fc-event-dragging')) {
                    if (isFormDragInProgress) {
                        console.log('üñ±Ô∏è Drag stop detected via observer');
                        handleDragToFormStop({});
                        isFormDragInProgress = false; // –ù–û–í–û: –ü—Ä–∏–∫–ª—é—á–≤–∞–º–µ drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
                    }
                }
            });
        });
    });

    // –ù–û–í–û: –ù–∞–±–ª—é–¥–∞–≤–∞–º–µ –ø–æ-—à–∏—Ä–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞—Å–∏—á–∞–Ω–µ
    const observationTargets = [
        document.getElementById('calendar'),
        document.body // Fallback –∑–∞ —Å–ª—É—á–∞–∏ –∫–æ–≥–∞—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç —Å–µ –º–µ—Å—Ç–∏
    ];

    observationTargets.forEach(target => {
        if (target) {
            observer.observe(target, {
                childList: true,
                subtree: true
            });
            console.log('‚úÖ Observer set up for:', target.id || 'body');
        }
    });
}

// ========================================
// –ü–û–î–û–ë–†–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê EVENT DATA –û–¢ DOM –ï–õ–ï–ú–ï–ù–¢
// ========================================
function extractEventDataFromElement(eventEl) {
    console.log('üîç Extracting event data from DOM element...');

    try {
        // –ú–ï–¢–û–î 1: –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –Ω–∞–º–µ—Ä–∏–º event ID –æ—Ç data attributes
        const eventId = eventEl.dataset.eventId || eventEl.getAttribute('data-event-id');

        if (eventId && window.calendar) {
            const calendarEvent = window.calendar.getEventById(eventId);
            if (calendarEvent) {
                console.log('‚úÖ Found event by ID:', eventId);
                return parseCalendarEventData(calendarEvent); // –ù–û–í–û: –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–æ
            }
        }

        // –ú–ï–¢–û–î 2: –¢—ä—Ä—Å–∏–º –≤ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ (fallback)
        const titleEl = eventEl.querySelector('.fc-event-title');
        if (titleEl) {
            const title = titleEl.textContent.trim();
            console.log('üìã Searching by title:', title);

            // –¢—ä—Ä—Å–∏–º —Å—ä–±–∏—Ç–∏–µ—Ç–æ –ø–æ –∑–∞–≥–ª–∞–≤–∏–µ
            const allEvents = window.calendar.getEvents();
            const matchingEvent = allEvents.find(e => e.title === title);

            if (matchingEvent) {
                console.log('‚úÖ Found event by title match');
                return parseCalendarEventData(matchingEvent); // –ù–û–í–û: –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–æ
            }
        }

        console.warn('‚ö†Ô∏è Could not extract event data from element');
        return null;

    } catch (error) {
        console.error('‚ùå Error extracting event data from element:', error);
        return null;
    }
}

// ========================================
// –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ü–†–ê–í–ò–õ–ù–û –ü–ê–†–°–ò–†–ê–ù–ï –ù–ê –ö–ê–õ–ï–ù–î–ê–†–ù–ò –î–ê–ù–ù–ò
// ========================================
function parseCalendarEventData(calendarEvent) {
    console.log('üîß Parsing calendar event data:', calendarEvent);

    try {
        // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–∞ –¥–∞—Ç–∏
        const startDate = parseEventDate(calendarEvent.start);
        const endDate = parseEventDate(calendarEvent.end);

        console.log('üìÖ Parsed dates:', {
            original_start: calendarEvent.start,
            parsed_start: startDate,
            original_end: calendarEvent.end,
            parsed_end: endDate
        });

        // –°—ä–∑–¥–∞–≤–∞–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–∞–Ω –æ–±–µ–∫—Ç —Å –¥–∞–Ω–Ω–∏
        const eventData = {
            id: calendarEvent.id,
            title: calendarEvent.title,
            start: startDate,    // –ù–û–í–û: –í–∏–Ω–∞–≥–∏ Date object
            end: endDate,        // –ù–û–í–û: –í–∏–Ω–∞–≥–∏ Date object
            activity: calendarEvent.extendedProps?.activity || '',
            leaveType: calendarEvent.extendedProps?.leaveType || '',
            employeeId: calendarEvent.extendedProps?.employeeId || '',
            employeeName: calendarEvent.extendedProps?.employeeName || calendarEvent.title
        };

        console.log('‚úÖ Parsed event data:', eventData);
        return eventData;

    } catch (error) {
        console.error('‚ùå Error parsing calendar event data:', error);
        return null;
    }
}

// ========================================
// –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –£–ù–ò–í–ï–†–°–ê–õ–ù–û –ü–ê–†–°–ò–†–ê–ù–ï –ù–ê –î–ê–¢–ò
// ========================================
function parseEventDate(dateInput) {
    console.log('üìÖ Parsing date input:', dateInput, typeof dateInput);

    // –ê–∫–æ –µ –≤–µ—á–µ Date object, –≤—Ä—ä—â–∞–º–µ –≥–æ –¥–∏—Ä–µ–∫—Ç–Ω–æ
    if (dateInput instanceof Date) {
        return dateInput;
    }

    // –ê–∫–æ –µ string, –æ–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –≥–æ –ø–∞—Ä—Å–∏—Ä–∞–º–µ
    if (typeof dateInput === 'string') {
        // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏ –æ—Ç backend
        // –§–æ—Ä–º–∞—Ç–∏: "2024-07-29 08:00:00", "2024-07-29T08:00:00", "2024-07-29"

        let parsedDate;

        // –ê–∫–æ –∏–º–∞ "T", –∑–∞–º–µ–Ω—è–º–µ –≥–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –ø–∞—Ä—Å–∏—Ä–∞–Ω–µ
        if (dateInput.includes('T')) {
            parsedDate = new Date(dateInput.replace('T', ' '));
        } else {
            parsedDate = new Date(dateInput);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞
        if (!isNaN(parsedDate.getTime())) {
            console.log('‚úÖ Successfully parsed string date:', dateInput, '->', parsedDate);
            return parsedDate;
        }
    }

    // –ê–∫–æ –Ω–∏—â–æ –Ω–µ —Ä–∞–±–æ—Ç–∏, –≤—Ä—ä—â–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞
    console.warn('‚ö†Ô∏è Could not parse date, using current date:', dateInput);
    return new Date();
}

// ========================================
// DRAG START/STOP HANDLERS (–ü–û–î–û–ë–†–ï–ù–ò)
// ========================================
function handleDragToFormStart(info) {
    const event = info.event;

    console.log('üìä FIXED Drag to form - capturing event data:', event.title);

    // –ù–û–í–û: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤–µ—á–µ –Ω–µ —Å–º–µ –≤ drag —Ä–µ–∂–∏–º
    if (isDragToFormActive) {
        console.log('‚ö†Ô∏è Already in drag mode, ignoring...');
        return;
    }

    // –ó–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç)
    if (event.start && event.end) {
        originalEventPosition = {
            start: parseEventDate(event.start), // –ù–û–í–û: –ü–∞—Ä—Å–∏—Ä–∞–º–µ –ø—Ä–∞–≤–∏–ª–Ω–æ
            end: parseEventDate(event.end)     // –ù–û–í–û: –ü–∞—Ä—Å–∏—Ä–∞–º–µ –ø—Ä–∞–≤–∏–ª–Ω–æ
        };
    }

    // –ù–û–í–û: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
    draggedEventData = parseCalendarEventData(event);

    if (!draggedEventData) {
        console.error('‚ùå Failed to parse event data for drag');
        return;
    }

    console.log('üìã FIXED Event data captured for drag-to-form:', draggedEventData);

    // –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ drag-to-form —Ä–µ–∂–∏–º–∞
    isDragToFormActive = true;

    // –ü–æ–∫–∞–∑–≤–∞–º–µ –≤–∏–∑—É–∞–ª–Ω–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    showDragToFormIndicators();
}

function handleDragToFormStop(info) {
    console.log('üñ±Ô∏è FIXED Drag to form - stopping drag operation');

    // –ù–û–í–û: –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ –∏–º–∞ –≤—Ä–µ–º–µ drop-—ä—Ç –¥–∞ —Å–µ –æ–±—Ä–∞–±–æ—Ç–∏
    setTimeout(() => {
        if (isDragToFormActive) {
            console.log('üßπ Cleaning up FIXED drag-to-form state');
            isDragToFormActive = false;
            draggedEventData = null;
            originalEventPosition = null;
            isFormDragInProgress = false; // –ù–û–í–û: –ü–æ—á–∏—Å—Ç–≤–∞–º–µ —Ñ–ª–∞–≥–∞
            hideDragToFormIndicators();
        }
    }, 200); // –ù–û–í–û: –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –ø–æ-–Ω–∞–¥–µ–∂–¥–Ω–æ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ
}

// ========================================
// SETUP DROP –ó–û–ù–ò (–ë–ï–ó –ü–†–û–ú–Ø–ù–ê)
// ========================================
function setupFormDropZones() {
    console.log('üéØ Setting up FIXED drop zones...');

    const dropZoneSelectors = [
        '#event-form',
        '#event-form-container',
        '#form-drag-zone'
    ];

    formDropZones = [];

    dropZoneSelectors.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            setupElementAsDropZone(element);
            formDropZones.push(element);
            console.log(`‚úÖ FIXED Drop zone: ${selector}`);
        } else {
            console.warn(`‚ö†Ô∏è Drop zone not found: ${selector}`);
        }
    });

    console.log(`‚úÖ ${formDropZones.length} FIXED drop zones configured`);
}

function setupElementAsDropZone(element) {
    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—Ç–∞—Ä–∏ listeners (–∞–∫–æ –∏–º–∞)
    element.removeEventListener('dragover', handleFormDragOver);
    element.removeEventListener('dragenter', handleFormDragEnter);
    element.removeEventListener('dragleave', handleFormDragLeave);
    element.removeEventListener('drop', handleFormDrop);

    // –î–æ–±–∞–≤—è–º–µ –Ω–æ–≤–∏—Ç–µ listeners
    element.addEventListener('dragover', handleFormDragOver);
    element.addEventListener('dragenter', handleFormDragEnter);
    element.addEventListener('dragleave', handleFormDragLeave);
    element.addEventListener('drop', handleFormDrop);

    element.style.position = 'relative';
}

// ========================================
// DROP EVENT HANDLERS (–ü–û–î–û–ë–†–ï–ù–ò)
// ========================================
function handleFormDragOver(event) {
    // –ù–û–í–û: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ä–µ–∂–∏–º
    if (!isDragToFormActive || !isFormDragInProgress) return;

    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
}

function handleFormDragEnter(event) {
    // –ù–û–í–û: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ä–µ–∂–∏–º
    if (!isDragToFormActive || !draggedEventData || !isFormDragInProgress) return;

    event.preventDefault();
    console.log('üìã FIXED Drag entered form area');

    showFormDropIndicator();
    event.currentTarget.classList.add('drag-over');
}

function handleFormDragLeave(event) {
    // –ù–û–í–û: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ –Ω–∞–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –∑–æ–Ω–∞—Ç–∞
    if (!event.currentTarget.contains(event.relatedTarget)) {
        console.log('üìã FIXED Drag left form area');
        hideFormDropIndicator();
        event.currentTarget.classList.remove('drag-over');
    }
}

function handleFormDrop(event) {
    event.preventDefault();

    console.log('üìã üéØ FIXED EVENT DROPPED ON FORM!');

    // –ù–û–í–û: –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
    if (!isDragToFormActive || !draggedEventData || !isFormDragInProgress) {
        console.warn('‚ö†Ô∏è FIXED No valid drag data available');
        return;
    }

    try {
        // –í–ê–ñ–ù–û: –°–ø–∏—Ä–∞–º–µ calendar drag –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
        if (window.calendar && originalEventPosition) {
            const calendarEvent = window.calendar.getEventById(draggedEventData.id);
            if (calendarEvent) {
                // –í—Ä—ä—â–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
                calendarEvent.setStart(originalEventPosition.start);
                calendarEvent.setEnd(originalEventPosition.end);
                console.log('‚Ü©Ô∏è FIXED Event returned to original position');
            }
        }

        // –ù–û–í–û: –ö–æ–ø–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ —Å –ø–æ–¥–æ–±—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        copyEventDataToFormFixed(draggedEventData);

        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ copy —Ä–µ–∂–∏–º
        showEventFormInCopyMode();

        // Success notification
        if (typeof showDragDropNotification === 'function') {
            showDragDropNotification('‚úÖ Shift details copied to form!', 'success');
        } else {
            console.log('‚úÖ FIXED Shift details copied to form!');
            alert('‚úÖ –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∫–æ–ø–∏—Ä–∞–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∞!');
        }

        console.log('üéâ FIXED DRAG-TO-FORM SUCCESSFUL!');

    } catch (error) {
        console.error('‚ùå FIXED Error copying event data:', error);

        if (typeof showDragDropNotification === 'function') {
            showDragDropNotification('‚ùå Error copying shift details', 'error');
        } else {
            alert('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ');
        }
    } finally {
        // –ü–æ—á–∏—Å—Ç–≤–∞–º–µ UI
        hideFormDropIndicator();
        event.currentTarget.classList.remove('drag-over');

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–º–µ drag-to-form —Ä–µ–∂–∏–º–∞
        isDragToFormActive = false;
        draggedEventData = null;
        originalEventPosition = null;
        isFormDragInProgress = false; // –ù–û–í–û: –ü–æ—á–∏—Å—Ç–≤–∞–º–µ —Ñ–ª–∞–≥–∞
    }
}

// ========================================
// –ù–û–í–ê –ü–û–î–û–ë–†–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ö–û–ü–ò–†–ê–ù–ï –ù–ê –î–ê–ù–ù–ò –í –§–û–†–ú–ê–¢–ê
// ========================================
function copyEventDataToFormFixed(eventData) {
    console.log('üìù FIXED Copying event data to form:', eventData);

    try {
        // 1. –§–ò–ö–°–ò–†–ê–ù–û: –ö–æ–ø–∏—Ä–∞–º–µ –≤—Ä–µ–º–µ–Ω–∞—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞—Ç–∏—Ç–µ
        if (!eventData.leaveType) {
            // –ù–û–í–û: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ
            const startTime = extractTimeFromDateFixed(eventData.start);
            const endTime = extractTimeFromDateFixed(eventData.end);

            console.log('‚è∞ FIXED Extracted times:', { startTime, endTime });

            const startInput = document.getElementById('start-time');
            const endInput = document.getElementById('end-time');

            // –ù–û–í–û: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –≤–∞–ª–∏–¥–Ω–∏ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–µ–¥–∏ –∑–∞–¥–∞–≤–∞–Ω–µ
            if (startInput && startTime && startTime !== '00:00') {
                startInput.value = startTime;
                console.log('‚è∞ FIXED Start time set:', startTime);
            }

            if (endInput && endTime && endTime !== '00:00') {
                endInput.value = endTime;
                console.log('‚è∞ FIXED End time set:', endTime);
            }
        }

        // 2. –ö–æ–ø–∏—Ä–∞–º–µ –¥–µ–π–Ω–æ—Å—Ç—Ç–∞ (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞)
        const activitySelect = document.getElementById('activityInput');
        if (activitySelect && eventData.activity && !eventData.leaveType) {
            activitySelect.value = eventData.activity;
            console.log('üíº FIXED Activity set:', eventData.activity);
        }

        // 3. –ö–æ–ø–∏—Ä–∞–º–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫ (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞)
        const leaveSelect = document.getElementById('leaveType');
        if (leaveSelect && eventData.leaveType) {
            leaveSelect.value = eventData.leaveType;
            console.log('üèñÔ∏è FIXED Leave type set:', eventData.leaveType);
        }

        // 4. –ó–∞–¥–∞–≤–∞–º–µ copy mode –¥–∞–Ω–Ω–∏ (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞)
        const isCopyingInput = document.getElementById('is-copying-event');
        const copyFromIdInput = document.getElementById('copy-from-event-id');

        if (isCopyingInput) isCopyingInput.value = 'true';
        if (copyFromIdInput) copyFromIdInput.value = eventData.id;

        // 5. –û–±–Ω–æ–≤—è–≤–∞–º–µ UI –∑–∞ copy —Ä–µ–∂–∏–º (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞)
        updateFormUIForCopyMode(eventData);

        console.log('‚úÖ FIXED All data copied successfully');

    } catch (error) {
        console.error('‚ùå FIXED Error during data copy:', error);
        throw error; // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –≥—Ä–µ—à–∫–∞—Ç–∞ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç parent —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
    }
}

// ========================================
// –ù–û–í–ê –ü–û–î–û–ë–†–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –í–†–ï–ú–ï –û–¢ –î–ê–¢–ê
// ========================================
function extractTimeFromDateFixed(dateInput) {
    console.log('‚è∞ FIXED Extracting time from:', dateInput, typeof dateInput);

    try {
        // –ê–∫–æ –Ω—è–º–∞ –≤—Ö–æ–¥–Ω–∞ –¥–∞—Ç–∞, –≤—Ä—ä—â–∞–º–µ default
        if (!dateInput) {
            console.log('‚è∞ FIXED No date input, returning 00:00');
            return '00:00';
        }

        let date;

        // –ù–û–í–û: –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
        if (dateInput instanceof Date) {
            // –ê–∫–æ –µ –≤–µ—á–µ Date object
            date = dateInput;
        } else if (typeof dateInput === 'string') {
            // –ê–∫–æ –µ string, –ø–∞—Ä—Å–∏—Ä–∞–º–µ –≥–æ
            date = parseEventDate(dateInput);
        } else {
            console.warn('‚ö†Ô∏è FIXED Unknown date format:', dateInput);
            return '00:00';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞
        if (!date || isNaN(date.getTime())) {
            console.warn('‚ö†Ô∏è FIXED Invalid date after parsing:', dateInput);
            return '00:00';
        }

        // –ù–û–í–û: –ò–∑–≤–ª–∏—á–∞–º–µ —á–∞—Å–æ–≤–µ –∏ –º–∏–Ω—É—Ç–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const hours = date.getHours();
        const minutes = date.getMinutes();

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –≤–∞–ª–∏–¥–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
            console.warn('‚ö†Ô∏è FIXED Invalid time values:', { hours, minutes });
            return '00:00';
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ
        const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;

        console.log('‚úÖ FIXED Time extracted successfully:', dateInput, '->', timeString);
        return timeString;

    } catch (error) {
        console.error('‚ùå FIXED Error extracting time:', error);
        return '00:00';
    }
}

// ========================================
// UI –§–£–ù–ö–¶–ò–ò (–ë–ï–ó –ü–†–û–ú–Ø–ù–ê)
// ========================================
function showEventFormInCopyMode() {
    const eventForm = document.getElementById('event-form');
    if (eventForm) {
        eventForm.style.display = 'block';
        console.log('üìù FIXED Event form shown in copy mode');
    }

    // –°–∫—Ä–∏–≤–∞–º–µ –¥—Ä—É–≥–∏—Ç–µ —Ñ–æ—Ä–º–∏
    hideOtherForms();
}

function updateFormUIForCopyMode(eventData) {
    // Copy banner
    const copyBanner = document.getElementById('copy-info-banner');
    if (copyBanner) {
        copyBanner.style.display = 'block';

        const sourceInfo = document.getElementById('copy-source-info');
        if (sourceInfo) {
            const sourceText = `${eventData.employeeName || eventData.title} - ${formatDateForDisplay(eventData.start)}`;
            sourceInfo.textContent = sourceText;
        }
    }

    // Save button
    const saveBtn = document.getElementById('saveEvent');
    const saveBtnText = document.getElementById('save-btn-text');
    const saveBtnCopyText = document.getElementById('save-btn-copy-text');

    if (saveBtn) saveBtn.classList.add('copy-mode');
    if (saveBtnText) saveBtnText.style.display = 'none';
    if (saveBtnCopyText) saveBtnCopyText.style.display = 'inline';
}

function showDragToFormIndicators() {
    const eventForm = document.getElementById('event-form');
    const dragZone = document.getElementById('form-drag-zone');

    if (eventForm && eventForm.style.display !== 'none' && dragZone) {
        dragZone.style.display = 'flex';
        console.log('üëÅÔ∏è FIXED Drag zone shown');
    }
}

function hideDragToFormIndicators() {
    const dragZone = document.getElementById('form-drag-zone');
    if (dragZone) {
        dragZone.style.display = 'none';
    }

    formDropZones.forEach(zone => {
        zone.classList.remove('drag-over');
    });
}

function showFormDropIndicator() {
    const dropIndicator = document.getElementById('form-drop-indicator');
    if (dropIndicator) {
        dropIndicator.style.display = 'flex';
    }
}

function hideFormDropIndicator() {
    const dropIndicator = document.getElementById('form-drop-indicator');
    if (dropIndicator) {
        dropIndicator.style.display = 'none';
    }
}

function hideOtherForms() {
    const editForm = document.getElementById('edit-event-form');
    if (editForm) editForm.style.display = 'none';

    const employeeForm = document.getElementById('employeeForm');
    if (employeeForm) employeeForm.classList.add('hidden');
}

// ========================================
// –ü–û–ú–û–©–ù–ò –§–£–ù–ö–¶–ò–ò (–ü–û–î–û–ë–†–ï–ù–ò)
// ========================================
function formatDateForDisplay(date) {
    if (!date) return '';

    try {
        // –ù–û–í–û: –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –∞–∫–æ –µ –Ω—É–∂–Ω–æ
        const parsedDate = parseEventDate(date);

        return parsedDate.toLocaleDateString('bg-BG', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        console.error('‚ùå FIXED Error formatting date for display:', error);
        return '';
    }
}

// ========================================
// KEYBOARD SHORTCUTS (–ë–ï–ó –ü–†–û–ú–Ø–ù–ê)
// ========================================
function setupKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
        // Ctrl+Shift+C –∑–∞ –¥–∞ –∏–∑—á–∏—Å—Ç–∏–º copy —Ä–µ–∂–∏–º–∞
        if (e.ctrlKey && e.shiftKey && e.key === 'C') {
            if (typeof clearCopyMode === 'function') {
                clearCopyMode();
                console.log('‚å®Ô∏è FIXED Copy mode cleared via keyboard shortcut');
            }
        }
    });
}

// ========================================
// CLEAR COPY MODE –§–£–ù–ö–¶–ò–Ø (–ë–ï–ó –ü–†–û–ú–Ø–ù–ê)
// ========================================
function clearCopyMode() {
    console.log('üßπ FIXED Clearing copy mode...');

    const copyBanner = document.getElementById('copy-info-banner');
    if (copyBanner) copyBanner.style.display = 'none';

    const saveBtn = document.getElementById('saveEvent');
    const saveBtnText = document.getElementById('save-btn-text');
    const saveBtnCopyText = document.getElementById('save-btn-copy-text');

    if (saveBtn) saveBtn.classList.remove('copy-mode');
    if (saveBtnText) saveBtnText.style.display = 'inline';
    if (saveBtnCopyText) saveBtnCopyText.style.display = 'none';

    const isCopyingInput = document.getElementById('is-copying-event');
    const copyFromIdInput = document.getElementById('copy-from-event-id');

    if (isCopyingInput) isCopyingInput.value = 'false';
    if (copyFromIdInput) copyFromIdInput.value = '';

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
    if (typeof resetEventForm === 'function') {
        resetEventForm();
    }
}

// ========================================
// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –ù–ê –§–£–ù–ö–¶–ò–ò–¢–ï
// ========================================
window.initializeDragToFormManager = initializeDragToFormManager;
window.clearCopyMode = clearCopyMode;

console.log('‚úÖ FIXED Drag to Form Manager (v3) loaded successfully with comprehensive commenting!')