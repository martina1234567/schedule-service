/**
 * Weekly Schedule Manager Module
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –ø–ª–∞–Ω—É–≤–∞–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏—Ç–µ
 *
 * –û–ë–ù–û–í–ï–ù–ê –õ–û–ì–ò–ö–ê –ó–ê –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò:
 * Backend-—ä—Ç —Å–µ–≥–∞ –≤–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ:
 *
 * –í–ö–õ–Æ–ß–í–ê–¢ –°–ï –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ:
 * - Paid leave (–ü–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫)
 * - Sick leave (–ë–æ–ª–Ω–∏—á–µ–Ω)
 * - Maternity leave (–ú–∞–π—á–∏–Ω—Å—Ç–≤–æ)
 * - Paternity leave (–ë–∞—â–∏–Ω—Å—Ç–≤–æ)
 *
 * –ù–ï —Å–µ –≤–∫–ª—é—á–≤–∞—Ç –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ:
 * - Day off (–ü–æ—á–∏–≤–µ–Ω –¥–µ–Ω)
 * - Unpaid leave (–ù–µ–ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫)
 * - No Leave Selected (–ë–µ–∑ –æ—Ç–ø—É—Å–∫)
 *
 * –ó–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ (4, 6 –∏–ª–∏ 8 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ)
 */

// –ì–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
let currentWeeklyData = null;          // –¢–µ–∫—É—â–æ –∑–∞—Ä–µ–¥–µ–Ω–∏—Ç–µ —Å–µ–¥–º–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏
let currentSelectedEmployeeId = null;   // ID –Ω–∞ —Ç–µ–∫—É—â–æ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª
let currentEmployeeHourlyRate = null;   // –î–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (4, 6 –∏–ª–∏ 8)
let currentDetailedEvents = null; // –©–µ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–µ–∫—É—â–∏—è —Å–ª—É–∂–∏—Ç–µ–ª


/**
 * –ö–û–ù–°–¢–ê–ù–¢–ò –ó–ê –¢–ò–ü–û–í–ï–¢–ï –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò
 * –¢–µ–∑–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–≤–ø–∞–¥–∞—Ç —Å backend –ª–æ–≥–∏–∫–∞—Ç–∞
 */
const PAID_LEAVE_TYPES = new Set([
    'Paid leave',      // –ü–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
    'Sick leave',      // –ë–æ–ª–Ω–∏—á–µ–Ω
    'Maternity leave', // –ú–∞–π—á–∏–Ω—Å—Ç–≤–æ
    'Paternity leave'  // –ë–∞—â–∏–Ω—Å—Ç–≤–æ
]);

/**
 * –ö–û–ù–°–¢–ê–ù–¢–ò –ó–ê –¢–ò–ü–û–í–ï–¢–ï –ù–ï–ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò
 */
const UNPAID_LEAVE_TYPES = new Set([
    'Day off',        // –ü–æ—á–∏–≤–µ–Ω –¥–µ–Ω
    'Unpaid leave'    // –ù–µ–ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
]);

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –º–æ–¥—É–ª–∞ –∑–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏—Ü–∏
 * –ù–∞—Å—Ç—Ä–æ–π–≤–∞ event listeners –∏ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
 */
function initializeWeeklyScheduleManager() {
    console.log('üìÖ Initializing Weekly Schedule Manager with PAID LEAVE logic...');
    console.log('üí∞ Paid leave types that count as work hours:', Array.from(PAID_LEAVE_TYPES));
    console.log('üö´ Unpaid leave types that DON\'T count as work hours:', Array.from(UNPAID_LEAVE_TYPES));

    // –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ event listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ –∏–∑–±–æ—Ä–∞ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
    setupEmployeeSelectionHandler();

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    // (–º–æ–∂–µ –¥–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω –æ—Ç HTML-–∞)
    ensureWeeklyScheduleContainer();
    setupWeeklyScheduleToggle();

    //–ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –º–µ—Å–µ—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    setupCalendarMonthChangeListener();

    console.log('‚úÖ Weekly Schedule Manager initialized successfully with paid leave support');
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ event listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ –∏–∑–±–æ—Ä–∞ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
 * –ö–æ–≥–∞—Ç–æ —Å–µ –∏–∑–±–µ—Ä–µ —Å–ª—É–∂–∏—Ç–µ–ª, –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
 * –ö–æ–≥–∞—Ç–æ —Å–µ –∏–∑–±–µ—Ä–µ "All Employees", —Å–∫—Ä–∏–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
 */
function setupEmployeeSelectionHandler() {
    const employeeSelect = document.getElementById('employeeSelect');

    if (employeeSelect) {
        console.log('üîß Setting up employee selection handler with paid leave support...');

        // –î–æ–±–∞–≤—è–º–µ listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ –∏–∑–±–æ—Ä–∞
        employeeSelect.addEventListener('change', function() {
            const selectedEmployeeId = employeeSelect.value.trim();
            const selectedEmployeeName = employeeSelect.options[employeeSelect.selectedIndex]?.textContent?.trim();

            console.log(`üë§ Employee selection changed: "${selectedEmployeeName}" (ID: ${selectedEmployeeId})`);

            // ========================================
            // –õ–û–ì–ò–ö–ê: –°–ö–†–ò–í–ê–ú–ï –í–°–ò–ß–ö–ò –û–¢–í–û–†–ï–ù–ò –§–û–†–ú–ò –ü–†–ò –ü–†–û–ú–Ø–ù–ê –ù–ê –°–õ–£–ñ–ò–¢–ï–õ
            // ========================================

            console.log('üßπ Cleaning up all open forms due to employee selection change...');

            // 1. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏ —Å—ä–±–∏—Ç–∏—è (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
            const eventForm = document.getElementById('event-form');
            if (eventForm && eventForm.style.display !== 'none') {
                console.log('üîí Hiding new event form - employee selection changed');
                eventForm.style.display = 'none';
            }

            // 2. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
            const editEventForm = document.getElementById('edit-event-form');
            if (editEventForm && editEventForm.style.display !== 'none') {
                console.log('üîí Hiding edit event form - employee selection changed');
                editEventForm.style.display = 'none';

                // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ edit/delete –±—É—Ç–æ–Ω–∏—Ç–µ
                if (typeof showEditDeleteButtons === 'function') {
                    showEditDeleteButtons();
                }
            }

            // 3. –°–∫—Ä–∏–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω–∞)
            const employeeForm = document.getElementById('employeeForm');
            if (employeeForm && !employeeForm.classList.contains('hidden')) {
                console.log('üîí Hiding employee form - employee selection changed');
                employeeForm.classList.add('hidden');

                // –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ UI –µ–ª–µ–º–µ–Ω—Ç–∏
                const addEmployeeBtn = document.getElementById('addEmployeeBtn');
                if (addEmployeeBtn) addEmployeeBtn.classList.remove('hidden');
            }

            // 4. –°–∫—Ä–∏–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å–ª—É–∂–∏—Ç–µ–ª–∏ (–∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω)
            const employeeListContainer = document.getElementById('employeeListContainer');
            if (employeeListContainer && !employeeListContainer.classList.contains('hidden')) {
                console.log('üîí Hiding employee list - employee selection changed');
                employeeListContainer.classList.add('hidden');
            }

            // 5. –°–∫—Ä–∏–≤–∞–º–µ search input-–∞
            const searchInput = document.getElementById('searchInput');
            if (searchInput && searchInput.style.display !== 'none') {
                console.log('üîí Hiding search input - employee selection changed');
                searchInput.style.display = 'none';
            }

            // 6. –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ edit/delete –±—É—Ç–æ–Ω–∏ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
            if (typeof removeExistingButtons === 'function') {
                removeExistingButtons();
                console.log('üîí Removed calendar buttons - employee selection changed');
            }

            // 7. –ü–æ–∫–∞–∑–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ UI –µ–ª–µ–º–µ–Ω—Ç–∏
            const selectLabel = document.querySelector('label[for="employeeSelect"]');
            if (selectLabel) selectLabel.classList.remove('hidden');

            // ========================================
            // –ê–ö–¢–£–ê–õ–ò–ó–ò–†–ê–ù–ê –õ–û–ì–ò–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –°–ï–î–ú–ò–ß–ù–ò–¢–ï –î–ê–ù–ù–ò –° –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò
            // ========================================

            if (selectedEmployeeId && selectedEmployeeId !== '') {
                // –ê–∫–æ –µ –∏–∑–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å–ª—É–∂–∏—Ç–µ–ª, –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
                console.log('‚úÖ Specific employee selected - loading weekly schedule with paid leave logic');
                currentSelectedEmployeeId = selectedEmployeeId;
                loadAndShowWeeklySchedule(selectedEmployeeId, selectedEmployeeName);
            } else {
                // –ê–∫–æ –µ –∏–∑–±—Ä–∞–Ω–æ "All Employees", —Å–∫—Ä–∏–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
                console.log('üìã All employees selected - hiding weekly schedule');
                currentSelectedEmployeeId = null;
                currentEmployeeHourlyRate = null;
                hideWeeklySchedule();
            }

            console.log('‚úÖ Employee selection handled with complete form cleanup and paid leave support');
        });

        console.log('‚úÖ Employee selection handler with paid leave support set up successfully');
    } else {
        console.warn('‚ö†Ô∏è Employee select element not found');
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –£–≤–µ—Ä—è–≤–∞ —Å–µ —á–µ HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –∑–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
 * –ê–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –≥–æ —Å—ä–∑–¥–∞–≤–∞ –¥–∏–Ω–∞–º–∏—á–Ω–æ
 * –û–ë–ù–û–í–ï–ù–û: –î–æ–±–∞–≤—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
 */
function ensureWeeklyScheduleContainer() {
    let weeklySection = document.getElementById('weekly-schedule-section');

    // –ê–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ HTML-–∞, –ø—Ä–æ—Å—Ç–æ –≥–æ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ
    if (weeklySection) {
        console.log('‚úÖ Weekly schedule container found in HTML');
        return;
    }

    // –ê–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –≥–æ —Å—ä–∑–¥–∞–≤–∞–º–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ
    console.log('üîß Creating weekly schedule container dynamically with paid leave info...');

    const sidebar = document.getElementById('sidebar');
    if (!sidebar) {
        console.error('‚ùå Sidebar not found - cannot create weekly schedule container');
        return;
    }

    // –°—ä–∑–¥–∞–≤–∞–º–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    weeklySection = document.createElement('div');
    weeklySection.id = 'weekly-schedule-section';
    weeklySection.className = 'weekly-schedule-section hidden';

    // HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
    weeklySection.innerHTML = `
        <div class="weekly-schedule-header">
            <h3 id="weekly-schedule-title">üìä Weekly hours</h3>
            <div id="weekly-schedule-subtitle" class="weekly-schedule-subtitle">
                <!-- –¢—É–∫ —â–µ —Å–µ –ø–æ–∫–∞–∂–µ –∏–º–µ—Ç–æ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏ –º–µ—Å–µ—Ü–∞ -->
            </div>
            <div class="paid-leave-info" style="font-size: 11px; color: #666; margin-top: 4px; line-height: 1.3;">
                üí∞ Includes paid leave: Paid leave, Sick leave, Maternity, Paternity<br>
                üö´ Excludes: Day off, Unpaid leave
            </div>
        </div>

        <!-- Loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä -->
        <div id="weekly-schedule-loading" class="weekly-schedule-loading hidden">
            <span class="loading-spinner">‚è≥</span>
            <span>Loading...</span>
        </div>

        <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ -->
        <div id="weekly-schedule-table-container" class="weekly-schedule-table-container">
            <table id="weekly-schedule-table" class="weekly-schedule-table">
                <thead>
                    <tr>
                        <th class="column-week">C.W.</th>
                        <th class="column-hourly-rate">Working hours</th>
                        <th class="column-total-hours">Total hours</th>
                    </tr>
                </thead>
                <tbody id="weekly-schedule-tbody">
                    <!-- –†–µ–¥–æ–≤–µ—Ç–µ —â–µ —Å–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞—Ç –¥–∏–Ω–∞–º–∏—á–Ω–æ -->
                </tbody>
            </table>
        </div>

        <!-- –û–±–æ–±—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
        <div id="weekly-schedule-summary" class="weekly-schedule-summary">
            <!-- –¢—É–∫ —â–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞ –æ–±–æ–±—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º–µ—Å–µ—Ü–∞ -->
        </div>

        <!-- –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≥—Ä–µ—à–∫–∞ -->
        <div id="weekly-schedule-error" class="weekly-schedule-error hidden">
            <!-- –°—ä–æ–±—â–µ–Ω–∏—è –∑–∞ –≥—Ä–µ—à–∫–∏ —â–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç —Ç—É–∫ -->
        </div>
    `;

    // –î–æ–±–∞–≤—è–º–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ sidebar-–∞ (—Å–ª–µ–¥ employee select, –ø—Ä–µ–¥–∏ employee form)
    const employeeFormGroup = document.querySelector('.form-group');
    if (employeeFormGroup && employeeFormGroup.nextSibling) {
        sidebar.insertBefore(weeklySection, employeeFormGroup.nextSibling);
    } else {
        sidebar.appendChild(weeklySection);
    }

    console.log('‚úÖ Weekly schedule container created dynamically with paid leave information');
}

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ó–∞—Ä–µ–∂–¥–∞ –∏ –ø–æ–∫–∞–∑–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
 * –û–ë–ù–û–í–ï–ù–û: –°–µ–≥–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç backend –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 *
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {string} employeeName - –ò–º–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 */
async function loadAndShowWeeklySchedule(employeeId, employeeName) {
    console.log(`üìÖ Loading weekly schedule for employee: ${employeeName} (ID: ${employeeId}) - WITH PAID LEAVE LOGIC`);

    // –ü–æ–∫–∞–∑–≤–∞–º–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    showWeeklyScheduleContainer();
    showLoadingIndicator();

    // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
    updateWeeklyScheduleTitle(employeeName);

    try {
        // –°–¢–™–ü–ö–ê 1: –ü—ä—Ä–≤–æ –ø–æ–ª—É—á–∞–≤–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –¥–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ)
        console.log('üë§ Fetching employee information...');
        const employeeResponse = await fetch(`http://localhost:8080/employees`);

        if (!employeeResponse.ok) {
            throw new Error(`Failed to fetch employee info: HTTP ${employeeResponse.status}`);
        }

        const allEmployees = await employeeResponse.json();
        const selectedEmployee = allEmployees.find(emp => emp.id.toString() === employeeId);

        if (!selectedEmployee) {
            throw new Error(`Employee with ID ${employeeId} not found`);
        }

        // –ó–∞–ø–∞–∑–≤–∞–º–µ –¥–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ (4, 6 –∏–ª–∏ 8 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ)
        currentEmployeeHourlyRate = selectedEmployee.hourlyRate;
        console.log(`‚è∞ Employee daily contract hours: ${currentEmployeeHourlyRate} hours/day`);
        console.log(`üí∞ IMPORTANT: Backend now includes paid leave as work hours based on contract rate`);

        // –°–¢–™–ü–ö–ê 2: –ü–æ–ª—É—á–∞–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª–Ω–∏—è –º–µ—Å–µ—Ü
        let year, month;

        // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –ø–æ–ª—É—á–∏–º –º–µ—Å–µ—Ü–∞ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∞–∫–æ –µ –≤—ä–∑–º–æ–∂–Ω–æ
        if (window.calendar && window.calendar.view && window.calendar.view.currentStart) {
            const calendarDate = new Date(window.calendar.view.currentStart);
            year = calendarDate.getFullYear();
            month = calendarDate.getMonth() + 1; // JavaScript –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based
            console.log(`üìÖ Using calendar date: ${month}/${year}`);
        } else {
            // Fallback –∫—ä–º —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∞–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω
            const now = new Date();
            year = now.getFullYear();
            month = now.getMonth() + 1;
            console.log(`üìÖ Using current date as fallback: ${month}/${year}`);
        }

        console.log(`üìä Fetching weekly schedule data for ${month}/${year} (includes paid leave hours)...`);

        // –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º backend-–∞ –∑–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        // –í–ê–ñ–ù–û: Backend-—ä—Ç –≤–µ—á–µ –≤—Ä—ä—â–∞ –¥–∞–Ω–Ω–∏ –∫–æ–∏—Ç–æ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
        const scheduleResponse = await fetch(`http://localhost:8080/api/weekly-schedule/${employeeId}?year=${year}&month=${month}`);

        console.log(`üì° Backend response status: ${scheduleResponse.status}`);

        if (!scheduleResponse.ok) {
            throw new Error(`HTTP ${scheduleResponse.status}: ${scheduleResponse.statusText}`);
        }

        const scheduleData = await scheduleResponse.json();
        console.log('üìã Weekly schedule data received (including paid leave):', scheduleData);

        // –°–¢–™–ü–ö–ê 3: –ó–∞–ø–∞–∑–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –≥–ª–æ–±–∞–ª–Ω–æ
        currentWeeklyData = scheduleData;

        // –°–¢–™–ü–ö–ê 4: –°–∫—Ä–∏–≤–∞–º–µ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        hideLoadingIndicator();

        // –°–¢–™–ü–ö–ê 5: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—è –º–µ—Å–µ—Ü
        updateWeeklyScheduleTitleWithDate(employeeName, year, month);

        // –°–¢–™–ü–ö–ê 6: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        generateWeeklyScheduleTable(scheduleData, selectedEmployee);

        console.log('‚úÖ Weekly schedule loaded and displayed successfully WITH PAID LEAVE logic');

    } catch (error) {
        console.error('‚ùå Error loading weekly schedule:', error);

        // –°–∫—Ä–∏–≤–∞–º–µ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ –≥—Ä–µ—à–∫–∞
        hideLoadingIndicator();
        showErrorMessage('Error loading weekly data: ' + error.message);
    }
}

/**
 * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω —Ç–∏–ø –æ—Ç–ø—É—Å–∫ —Å–µ –≤–∫–ª—é—á–≤–∞ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞ –Ω–∞ backend –ª–æ–≥–∏–∫–∞—Ç–∞
 *
 * @param {string} leaveType - –¢–∏–ø–∞ –æ—Ç–ø—É—Å–∫
 * @returns {boolean} true –∞–∫–æ —Å–µ –≤–∫–ª—é—á–≤–∞ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 */
function isPaidLeaveType(leaveType) {
    if (!leaveType) {
        return false;
    }

    const isPaid = PAID_LEAVE_TYPES.has(leaveType.trim());

    if (isPaid) {
        console.log(`‚úÖ '${leaveType}' is counted as PAID leave (included in work hours)`);
    } else {
        console.log(`üö´ '${leaveType}' is counted as UNPAID leave (NOT included in work hours)`);
    }

    return isPaid;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
 * –û–ë–ù–û–í–ï–ù–û: –î–æ–±–∞–≤–µ–Ω–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ—Ç–æ —Å –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
 *
 * @param {number} dailyHours - –î–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ (4, 6 –∏–ª–∏ 8)
 * @returns {number} –°–µ–¥–º–∏—á–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ (dailyHours √ó 5 —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏)
 */
function calculateWeeklyContractHours(dailyHours) {
    // –í–ê–ñ–ù–û: –¢–æ–≤–∞ –∏–∑—á–∏—Å–ª—è–≤–∞ —Å–∞–º–æ –±–∞–∑–æ–≤–∏—Ç–µ —Å–µ–¥–º–∏—á–Ω–∏ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
    // Backend-—ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤—è –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫—ä–º —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
    const weeklyHours = dailyHours * 5;

    console.log(`üßÆ Calculating weekly contract hours: ${dailyHours} hours/day √ó 5 days = ${weeklyHours} hours/week`);
    console.log(`üí∞ NOTE: Actual work hours may be higher due to paid leave being included by backend`);

    return weeklyHours;
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ (–∫–æ–≥–∞—Ç–æ –Ω–µ –µ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª)
 */
function hideWeeklySchedule() {
    console.log('üîí Hiding weekly schedule');

    const container = document.getElementById('weekly-schedule-section');
    if (container) {
        container.classList.add('hidden');
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
    currentWeeklyData = null;
    currentEmployeeHourlyRate = null;
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
 */
function showWeeklyScheduleContainer() {
    const container = document.getElementById('weekly-schedule-section');
    if (container) {
        container.classList.remove('hidden');
        console.log('üëÅÔ∏è Weekly schedule container shown');
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
 */
function showLoadingIndicator() {
    const loading = document.getElementById('weekly-schedule-loading');
    const tableContainer = document.getElementById('weekly-schedule-table-container');
    const errorElement = document.getElementById('weekly-schedule-error');
    const summaryElement = document.getElementById('weekly-schedule-summary');

    if (loading) loading.classList.remove('hidden');
    if (tableContainer) tableContainer.style.display = 'none';
    if (errorElement) errorElement.classList.add('hidden');
    if (summaryElement) summaryElement.style.display = 'none';

    console.log('‚è≥ Loading indicator shown');
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –°–∫—Ä–∏–≤–∞ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
 */
function hideLoadingIndicator() {
    const loading = document.getElementById('weekly-schedule-loading');
    const tableContainer = document.getElementById('weekly-schedule-table-container');
    const summaryElement = document.getElementById('weekly-schedule-summary');

    if (loading) loading.classList.add('hidden');
    if (tableContainer) tableContainer.style.display = 'block';
    if (summaryElement) summaryElement.style.display = 'block';

    console.log('‚úÖ Loading indicator hidden');
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–≤–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≥—Ä–µ—à–∫–∞
 * @param {string} message - –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞
 */
function showErrorMessage(message) {
    const errorElement = document.getElementById('weekly-schedule-error');
    const tableContainer = document.getElementById('weekly-schedule-table-container');
    const summaryElement = document.getElementById('weekly-schedule-summary');

    if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
    }

    if (tableContainer) tableContainer.style.display = 'none';
    if (summaryElement) summaryElement.style.display = 'none';

    console.log('‚ùå Error message shown:', message);
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –Ω–∞ —Å–µ–∫—Ü–∏—è—Ç–∞
 * @param {string} employeeName - –ò–º–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 */
function updateWeeklyScheduleTitle(employeeName) {
    const title = document.getElementById('weekly-schedule-title');
    const subtitle = document.getElementById('weekly-schedule-subtitle');

    if (title) {
        title.textContent = 'üìä Weekly hours';
    }

    if (subtitle) {
        const now = new Date();
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        const currentMonth = monthNames[now.getMonth()];
        const currentYear = now.getFullYear();

        subtitle.textContent = `${employeeName} - ${currentMonth} ${currentYear}`;
        console.log(`üìù Title updated: ${employeeName} - ${currentMonth} ${currentYear}`);
    }
}

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∏ –ø–æ–∫–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å—ä—Å —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
 * –û–ë–ù–û–í–ï–ù–û: –î–∞–Ω–Ω–∏—Ç–µ –≤–µ—á–µ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ (–æ—Ç backend)
 *
 * @param {Object} data - –î–∞–Ω–Ω–∏—Ç–µ –æ—Ç backend-–∞ (–≤–µ—á–µ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏)
 * @param {Object} employee - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 */
function generateWeeklyScheduleTable(data, employee) {
    console.log('üìä Generating weekly schedule table WITH PAID LEAVE logic...');
    console.log('üí∞ NOTE: Data from backend already includes paid leave as work hours');
    console.log('üìã Data structure:', data);
    console.log('üë§ Employee info:', employee);

    const tbody = document.getElementById('weekly-schedule-tbody');
    const summaryContainer = document.getElementById('weekly-schedule-summary');

    if (!tbody) {
        console.error('‚ùå Table tbody not found');
        return;
    }

    // –°–¢–™–ü–ö–ê 1: –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
    tbody.innerHTML = '';
    if (summaryContainer) {
        summaryContainer.innerHTML = '';
    }

    // –°–¢–™–ü–ö–ê 2: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Å–µ–¥–º–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏
    if (!data.weeklySchedule || data.weeklySchedule.length === 0) {
        console.log('üìã No weekly schedule data found');
        tbody.innerHTML = `
            <tr>
                <td colspan="3" style="text-align: center; padding: 20px; color: #666; font-style: italic;">
                    üìã No planned hours for ${data.monthName || 'this month'} ${data.year}
                </td>
            </tr>
        `;
        return;
    }

    // –°–¢–™–ü–ö–ê 3: –ü–æ–ª—É—á–∞–≤–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∑–∞ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
    const today = new Date();
    const currentWeekStart = getWeekStartDate(today);
    console.log('üìÖ Current week start:', currentWeekStart);

    // –°–¢–™–ü–ö–ê 4: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ (–∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
    const dailyContractHours = currentEmployeeHourlyRate || employee.hourlyRate || 8; // Default 8 —á–∞—Å–∞
    const weeklyContractHours = calculateWeeklyContractHours(dailyContractHours);

    console.log(`üìä Contract hours calculation: ${dailyContractHours} hours/day √ó 5 days = ${weeklyContractHours} hours/week`);
    console.log(`üí∞ IMPORTANT: Planned hours from backend include paid leave hours automatically`);

    // –°–¢–™–ü–ö–ê 5: –ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∑–∞ –æ–±–æ–±—â–µ–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    let totalPlannedHours = 0;
    let weeksWithSchedule = 0;
    let totalWeeks = data.weeklySchedule.length;

    // –°–¢–™–ü–ö–ê 6: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Ä–µ–¥–æ–≤–µ—Ç–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
    data.weeklySchedule.forEach((week, index) => {
        console.log(`üìä Processing week ${index + 1}:`, week);

        // –ü–∞—Ä—Å–∏—Ä–∞–º–µ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ (–º–æ–∂–µ –¥–∞ —Å–∞ string –∏–ª–∏ number)
        // –í–ê–ñ–ù–û: –¢–µ–∑–∏ —á–∞—Å–æ–≤–µ –≤–µ—á–µ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –æ—Ç backend-–∞
        const plannedHours = parseFloat(week.plannedHours) || 0;
        const hasSchedule = plannedHours > 0;

        // –î–æ–±–∞–≤—è–º–µ –∫—ä–º –æ–±—â–∏—Ç–µ —á–∞—Å–æ–≤–µ
        totalPlannedHours += plannedHours;
        if (hasSchedule) {
            weeksWithSchedule++;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
        const weekStartDate = new Date(week.weekStartDate);
        const isCurrentWeek = isSameWeek(weekStartDate, today);

        console.log(`üîç Week ${week.weekNumber}: planned=${plannedHours}h (includes paid leave), hasSchedule=${hasSchedule}, isCurrent=${isCurrentWeek}`);

        // –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–¥–∞
        const row = document.createElement('tr');
        row.className = isCurrentWeek ? 'current-week' : '';

        // –î–æ–±–∞–≤—è–º–µ tooltip —Å –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const tooltipInfo = `Week ${week.weekNumber} (${formatDateShort(week.weekStartDate)} - ${formatDateShort(week.weekEndDate)}) - includes paid leave`;
        row.title = tooltipInfo;

        // –ö–û–õ–û–ù–ê 1: –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞ —Å–µ–¥–º–∏—Ü–∞ (–ö.–°.)
        const weekCell = document.createElement('td');
        weekCell.innerHTML = `<span class="week-number">${week.weekNumber}</span>`;
        row.appendChild(weekCell);

        // –ö–û–õ–û–ù–ê 2: –°–µ–¥–º–∏—á–Ω–∏ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ (–±–∞–∑–æ–≤–∞ –Ω–æ—Ä–º–∞ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
        const contractHoursCell = document.createElement('td');
        contractHoursCell.innerHTML = `<span class="contract-hours">${weeklyContractHours}</span>`;
        row.appendChild(contractHoursCell);

        console.log(`‚è∞ Week ${week.weekNumber}: Contract baseline = ${weeklyContractHours}h/week, Actual planned = ${plannedHours}h (includes paid leave)`);

        // –ö–û–õ–û–ù–ê 3: –û–±—â–æ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏ —á–∞—Å–æ–≤–µ (–≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏)
        const hoursCell = document.createElement('td');
        const hoursClass = hasSchedule ? 'total-hours' : 'total-hours no-hours';
        const hoursText = hasSchedule ? plannedHours.toFixed(1) : '0';
        hoursCell.innerHTML = `<span class="${hoursClass}">${hoursText}</span>`;
        row.appendChild(hoursCell);

        // –î–æ–±–∞–≤—è–º–µ —Ä–µ–¥–∞ –∫—ä–º —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        tbody.appendChild(row);
    });

    // –°–¢–™–ü–ö–ê 7: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –æ–±–æ–±—â–µ–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    generateSummaryInfoWithPaidLeave(summaryContainer, {
        totalWeeks,
        weeksWithSchedule,
        totalPlannedHours, // –¢–µ–∑–∏ —á–∞—Å–æ–≤–µ –≤–µ—á–µ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
        dailyContractHours: dailyContractHours,
        weeklyContractHours: weeklyContractHours,
        employeeName: employee.name,
        monthName: data.monthName,
        year: data.year
    });

    console.log(`‚úÖ Table generated with ${totalWeeks} weeks, ${weeksWithSchedule} with schedule, ${totalPlannedHours.toFixed(1)} total planned hours (INCLUDING PAID LEAVE)`);
}

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –≤ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü
 * –í–ê–ñ–ù–û: –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑—á–∏—Å–ª—è–≤–∞ –±–∞–∑–æ–≤–∞—Ç–∞ –Ω–æ—Ä–º–∞ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
 * Backend-—ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤—è –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫—ä–º –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 *
 * –õ–û–ì–ò–ö–ê:
 * 1. –û–ø—Ä–µ–¥–µ–ª—è –∫–æ–π –º–µ—Å–µ—Ü –ø–æ–∫–∞–∑–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç
 * 2. –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≥–æ–¥–∏–Ω–∞—Ç–∞ –µ –≤–∏—Å–æ–∫–æ—Å–Ω–∞ (–∑–∞ —Ñ–µ–≤—Ä—É–∞—Ä–∏)
 * 3. –ë—Ä–æ–∏ —Å—ä–±–æ—Ç–∏—Ç–µ –∏ –Ω–µ–¥–µ–ª–∏—Ç–µ –≤ –º–µ—Å–µ—Ü–∞
 * 4. –ò–∑–≤–∞–∂–¥–∞ weekends –æ—Ç –æ–±—â–∏—Ç–µ –¥–Ω–∏ = —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
 * 5. –£–º–Ω–æ–∂–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ –¥–Ω–∏ –ø–æ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
 *
 * @param {number} contractHoursPerDay - –ß–∞—Å–æ–≤–µ –ø–æ –¥–æ–≥–æ–≤–æ—Ä –¥–Ω–µ–≤–Ω–æ (4, 6 –∏–ª–∏ 8)
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @returns {Object} –û–±–µ–∫—Ç —Å –¥–µ—Ç–∞–π–ª–Ω–∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
 */
function calculateContractHoursForMonth(contractHoursPerDay, year, month) {
    console.log(`üéØ === –ò–ó–ß–ò–°–õ–ï–ù–ò–ï –ó–ê –î–û–ì–û–í–û–†–ï–ù–ò –ß–ê–°–û–í–ï (–ë–ê–ó–û–í–ê –ù–û–†–ú–ê) ===`);
    console.log(`üìã –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏: ${contractHoursPerDay} —á–∞—Å–∞/–¥–µ–Ω, ${month}/${year}`);
    console.log(`üí∞ NOTE: This calculates BASE contract hours. Paid leave hours are added by backend automatically.`);

    // –°–¢–™–ü–ö–ê 1: –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–ª–∫–æ –¥–Ω–∏ –∏–º–∞ –º–µ—Å–µ—Ü—ä—Ç
    const totalDaysInMonth = getDaysInMonth(year, month);
    console.log(`üìÖ –ú–µ—Å–µ—Ü ${month}/${year} –∏–º–∞ ${totalDaysInMonth} –¥–Ω–∏ –æ–±—â–æ`);

    // –°–¢–™–ü–ö–ê 2: –ë—Ä–æ–∏–º —Å—ä–±–æ—Ç–∏—Ç–µ –∏ –Ω–µ–¥–µ–ª–∏—Ç–µ –≤ –º–µ—Å–µ—Ü–∞
    const weekendDays = countWeekendsInMonth(year, month);
    console.log(`üî¥ Weekends (—Å—ä–±–æ—Ç–∏ + –Ω–µ–¥–µ–ª–∏) –≤ –º–µ—Å–µ—Ü–∞: ${weekendDays} –¥–Ω–∏`);

    // –°–¢–™–ü–ö–ê 3: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ –¥–Ω–∏ = –æ–±—â–æ –¥–Ω–∏ - weekends
    const workingDays = totalDaysInMonth - weekendDays;
    console.log(`‚úÖ –†–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ = ${totalDaysInMonth} –æ–±—â–æ - ${weekendDays} weekends = ${workingDays} —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏`);

    // –°–¢–™–ü–ö–ê 4: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ = —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ √ó —á–∞—Å–æ–≤–µ –ø–æ –¥–æ–≥–æ–≤–æ—Ä
    const contractHours = workingDays * contractHoursPerDay;
    console.log(`‚è∞ –î–æ–≥–æ–≤–æ—Ä–µ–Ω–∏ —á–∞—Å–æ–≤–µ (–ë–ê–ó–û–í–ê –ù–û–†–ú–ê) = ${workingDays} –¥–Ω–∏ √ó ${contractHoursPerDay} —á/–¥–µ–Ω = ${contractHours} —á–∞—Å–∞`);
    console.log(`üí∞ IMPORTANT: Backend automatically adds paid leave hours to planned hours for comparison`);

    // –°–¢–™–ü–ö–ê 5: –í—Ä—ä—â–∞–º–µ –¥–µ—Ç–∞–π–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
    const result = {
        year: year,
        month: month,
        totalDaysInMonth: totalDaysInMonth,
        weekendDays: weekendDays,
        workingDays: workingDays,
        contractHoursPerDay: contractHoursPerDay,
        totalContractHours: contractHours
    };

    console.log(`üéØ === –†–ï–ó–£–õ–¢–ê–¢ (–ë–ê–ó–û–í–ê –ù–û–†–ú–ê) ===`);
    console.log(`üìä –ú–µ—Å–µ—Ü: ${month}/${year}`);
    console.log(`üìã –û–±—â–æ –¥–Ω–∏: ${totalDaysInMonth}`);
    console.log(`üî¥ Weekends: ${weekendDays} –¥–Ω–∏`);
    console.log(`‚úÖ –†–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏: ${workingDays} –¥–Ω–∏`);
    console.log(`üíº –î–æ–≥–æ–≤–æ—Ä: ${contractHoursPerDay} —á/–¥–µ–Ω`);
    console.log(`‚è∞ –î–û–ì–û–í–û–†–ï–ù–ò –ß–ê–°–û–í–ï (–ë–ê–ó–û–í–ê –ù–û–†–ú–ê): ${contractHours} —á–∞—Å–∞`);
    console.log(`üí∞ Planned hours from backend will include paid leave automatically`);

    return result;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–ø—Ä–µ–¥–µ–ª—è –∫–æ–ª–∫–æ –¥–Ω–∏ –∏–º–∞ –¥–∞–¥–µ–Ω –º–µ—Å–µ—Ü
 * –í–∑–µ–º–∞ –ø—Ä–µ–¥–≤–∏–¥ –≤–∏—Å–æ–∫–æ—Å–Ω–∏ –≥–æ–¥–∏–Ω–∏ –∑–∞ —Ñ–µ–≤—Ä—É–∞—Ä–∏
 *
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @returns {number} –ë—Ä–æ—è –¥–Ω–∏ –≤ –º–µ—Å–µ—Ü–∞
 */
function getDaysInMonth(year, month) {
    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ JavaScript Date —Ç—Ä–∏–∫ - –º–µ—Å–µ—Ü 0 –æ–∑–Ω–∞—á–∞–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è –¥–µ–Ω –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è –º–µ—Å–µ—Ü
    const lastDayOfMonth = new Date(year, month, 0).getDate();

    console.log(`üìÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –º–µ—Å–µ—Ü ${month}/${year}:`);

    // –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ñ–µ–≤—Ä—É–∞—Ä–∏ –∏ –≤–∏—Å–æ–∫–æ—Å–Ω–∏ –≥–æ–¥–∏–Ω–∏
    if (month === 2) {
        const isLeapYear = isLeapYearCheck(year);
        console.log(`üóìÔ∏è  –§–µ–≤—Ä—É–∞—Ä–∏ ${year}: ${isLeapYear ? '–í–ò–°–û–ö–û–°–ù–ê' : '–ù–û–†–ú–ê–õ–ù–ê'} –≥–æ–¥–∏–Ω–∞ = ${lastDayOfMonth} –¥–Ω–∏`);
    } else {
        console.log(`üóìÔ∏è  –ú–µ—Å–µ—Ü ${month}: ${lastDayOfMonth} –¥–Ω–∏`);
    }

    return lastDayOfMonth;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≥–æ–¥–∏–Ω–∞ –µ –≤–∏—Å–æ–∫–æ—Å–Ω–∞
 *
 * –ü–†–ê–í–ò–õ–ê –ó–ê –í–ò–°–û–ö–û–°–ù–ê –ì–û–î–ò–ù–ê:
 * - –î–µ–ª–∏–º–∞ –Ω–∞ 4 ‚Üí –≤–∏—Å–æ–∫–æ—Å–Ω–∞
 * - –ù–û –∞–∫–æ –µ –¥–µ–ª–∏–º–∞ –Ω–∞ 100 ‚Üí –ù–ï –µ –≤–∏—Å–æ–∫–æ—Å–Ω–∞
 * - –ù–û –∞–∫–æ –µ –¥–µ–ª–∏–º–∞ –Ω–∞ 400 ‚Üí –ø–∞–∫ –µ –≤–∏—Å–æ–∫–æ—Å–Ω–∞
 *
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @returns {boolean} true –∞–∫–æ –µ –≤–∏—Å–æ–∫–æ—Å–Ω–∞ –≥–æ–¥–∏–Ω–∞
 */
function isLeapYearCheck(year) {
    const isLeap = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∏—Å–æ–∫–æ—Å–Ω–∞ –≥–æ–¥–∏–Ω–∞ ${year}:`);
    console.log(`   - –î–µ–ª–∏–º–∞ –Ω–∞ 4: ${year % 4 === 0}`);
    console.log(`   - –î–µ–ª–∏–º–∞ –Ω–∞ 100: ${year % 100 === 0}`);
    console.log(`   - –î–µ–ª–∏–º–∞ –Ω–∞ 400: ${year % 400 === 0}`);
    console.log(`   - –†–ï–ó–£–õ–¢–ê–¢: ${isLeap ? '–í–ò–°–û–ö–û–°–ù–ê' : '–ù–û–†–ú–ê–õ–ù–ê'} –≥–æ–¥–∏–Ω–∞`);

    return isLeap;
}

/**
 * –ö–õ–Æ–ß–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ë—Ä–æ–∏ —Å—ä–±–æ—Ç–∏—Ç–µ –∏ –Ω–µ–¥–µ–ª–∏—Ç–µ –≤ –º–µ—Å–µ—Ü–∞
 *
 * –õ–û–ì–ò–ö–ê:
 * - –ü—Ä–µ–º–∏–Ω–∞–≤–∞ –ø—Ä–µ–∑ –≤—Å–∏—á–∫–∏ –¥–Ω–∏ –≤ –º–µ—Å–µ—Ü–∞ (–æ—Ç 1 –¥–æ –∫—Ä–∞–π)
 * - –ó–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –µ —Å—ä–±–æ—Ç–∞ (6) –∏–ª–∏ –Ω–µ–¥–µ–ª—è (0)
 * - –ë—Ä–æ–∏ –∫–æ–ª–∫–æ —Å–∞ –æ–±—â–æ
 *
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @returns {number} –ë—Ä–æ—è weekends (—Å—ä–±–æ—Ç–∏ + –Ω–µ–¥–µ–ª–∏) –≤ –º–µ—Å–µ—Ü–∞
 */
function countWeekendsInMonth(year, month) {
    console.log(`üîç –ó–∞–ø–æ—á–≤–∞–º–µ –±—Ä–æ–µ–Ω–µ –Ω–∞ weekends –∑–∞ ${month}/${year}:`);

    const totalDays = getDaysInMonth(year, month);
    let weekendCount = 0;
    let saturdayCount = 0;
    let sundayCount = 0;

    // –ü—Ä–µ–º–∏–Ω–∞–≤–∞–º–µ –ø—Ä–µ–∑ –≤—Å–∏—á–∫–∏ –¥–Ω–∏ –≤ –º–µ—Å–µ—Ü–∞
    for (let day = 1; day <= totalDays; day++) {
        // –°—ä–∑–¥–∞–≤–∞–º–µ Date –æ–±–µ–∫—Ç –∑–∞ —Ç–µ–∫—É—â–∏—è –¥–µ–Ω
        const currentDate = new Date(year, month - 1, day); // month-1 –∑–∞—â–æ—Ç–æ JS –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based
        const dayOfWeek = currentDate.getDay(); // 0=–Ω–µ–¥–µ–ª—è, 1=–ø–æ–Ω, 2=–≤—Ç, 3=—Å—Ä, 4=—á–µ—Ç, 5=–ø–µ—Ç, 6=—Å—ä–±–æ—Ç–∞

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ weekend (—Å—ä–±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–µ–ª—è)
        if (dayOfWeek === 0) { // –ù–µ–¥–µ–ª—è
            weekendCount++;
            sundayCount++;
            console.log(`üî¥ –î–µ–Ω ${day}: –ù–ï–î–ï–õ–Ø`);
        } else if (dayOfWeek === 6) { // –°—ä–±–æ—Ç–∞
            weekendCount++;
            saturdayCount++;
            console.log(`üî¥ –î–µ–Ω ${day}: –°–™–ë–û–¢–ê`);
        } else {
            // –†–∞–±–æ—Ç–µ–Ω –¥–µ–Ω - –ø–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ –Ω—è–∫–æ–ª–∫–æ –∑–∞ debug
            if (day <= 5) {
                console.log(`‚úÖ –î–µ–Ω ${day}: ${getDayNameBulgarian(dayOfWeek)} (—Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω)`);
            }
        }
    }

    console.log(`üìä –û–ë–û–ë–©–ï–ù–ò–ï –∑–∞ weekends –≤ ${month}/${year}:`);
    console.log(`   - –°—ä–±–æ—Ç–∞: ${saturdayCount} –¥–Ω–∏`);
    console.log(`   - –ù–µ–¥–µ–ª—è: ${sundayCount} –¥–Ω–∏`);
    console.log(`   - –û–ë–©–û weekends: ${weekendCount} –¥–Ω–∏`);

    return weekendCount;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –∏–º–µ –Ω–∞ –¥–µ–Ω—è
 * @param {number} dayOfWeek - –î–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (0-6)
 * @returns {string} –ò–º–µ –Ω–∞ –¥–µ–Ω—è –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
 */
function getDayNameBulgarian(dayOfWeek) {
    const days = ['–ù–µ–¥–µ–ª—è', '–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä—è–¥–∞', '–ß–µ—Ç–≤—ä—Ä—Ç—ä–∫', '–ü–µ—Ç—ä–∫', '–°—ä–±–æ—Ç–∞'];
    return days[dayOfWeek];
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
 * @returns {Object} –û–±–µ–∫—Ç —Å –≥–æ–¥–∏–Ω–∞ –∏ –º–µ—Å–µ—Ü –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
 */
function getCurrentCalendarMonth() {
    let year, month;

    // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –ø–æ–ª—É—á–∏–º –º–µ—Å–µ—Ü–∞ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∞–∫–æ –µ –≤—ä–∑–º–æ–∂–Ω–æ
    if (window.calendar && window.calendar.view && window.calendar.view.currentStart) {
        const calendarDate = new Date(window.calendar.view.currentStart);
        year = calendarDate.getFullYear();
        month = calendarDate.getMonth() + 1; // JavaScript –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based
        console.log(`üìÖ –ü–æ–ª—É—á–µ–Ω –º–µ—Å–µ—Ü –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞: ${month}/${year}`);
    } else {
        // Fallback –∫—ä–º —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∞—Ç–∞ –∞–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω
        const now = new Date();
        year = now.getFullYear();
        month = now.getMonth() + 1;
        console.log(`üìÖ Fallback –∫—ä–º —Ç–µ–∫—É—â–∞ –¥–∞—Ç–∞: ${month}/${year}`);
    }

    return { year, month };
}

/**
 * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ–±–æ–±—â–µ–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
 * –û–ë–ù–û–í–ï–ù–û: –Ø—Å–Ω–æ –ø–æ–∫–∞–∑–≤–∞ —á–µ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –≤–∫–ª—é—á–≤–∞—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
 *
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –∑–∞ –æ–±–æ–±—â–µ–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ –∑–∞ –º–µ—Å–µ—Ü–∞
 */
function generateSummaryInfoWithPaidLeave(container, stats) {
    if (!container) return;

    console.log('üìä === –ó–ê–ü–û–ß–í–ê –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê SUMMARY –° PDF –ë–£–¢–û–ù ===');
    console.log('üìã –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ summary:', stats);

    // –°–¢–™–ü–ö–ê 1: –ü–æ–ª—É—á–∞–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    const calendarMonth = getCurrentCalendarMonth();

    // –°–¢–™–ü–ö–ê 2: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ (–±–∞–∑–æ–≤–∞ –Ω–æ—Ä–º–∞)
    const contractCalculation = calculateContractHoursForMonth(
        stats.dailyContractHours,
        calendarMonth.year,
        calendarMonth.month
    );

    // –°–¢–™–ü–ö–ê 3: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑–ª–∏–∫–∞—Ç–∞ –∏ —Å—Ä–µ–¥–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
    const hoursDifference = stats.totalPlannedHours - contractCalculation.totalContractHours;
    const averageHoursPerWeek = stats.weeksWithSchedule > 0 ?
        (stats.totalPlannedHours / stats.weeksWithSchedule).toFixed(1) : '0';

    // –°–¢–™–ü–ö–ê 4: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ HTML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ —Å PDF –ë–£–¢–û–ù
    container.innerHTML = `
        <!-- –°–™–©–ï–°–¢–í–£–í–ê–©–ò–¢–ï SUMMARY –†–ï–î–û–í–ï -->
        <div class="summary-row">
            <span class="summary-label">üìÖ –ú–µ—Å–µ—Ü:</span>
            <span class="summary-value">${stats.monthName} ${stats.year}</span>
        </div>
        <div class="summary-row">
            <span class="summary-label">üìã –î–æ–≥–æ–≤–æ—Ä:</span>
            <span class="summary-value">${stats.dailyContractHours}—á/–¥–µ–Ω</span>
        </div>
        <div class="summary-row">
            <span class="summary-label">‚è∞ –ü–ª–∞–Ω—É–≤–∞–Ω–∏ —á–∞—Å–æ–≤–µ:</span>
            <span class="summary-value highlight" title="–í–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏ –æ—Ç–ø—É—Å–∫–∏">${stats.totalPlannedHours.toFixed(1)} —á *</span>
        </div>
        <div class="summary-row">
            <span class="summary-label">üìä –î–æ–≥–æ–≤–æ—Ä–µ–Ω–∏ —á–∞—Å–æ–≤–µ:</span>
            <span class="summary-value">${contractCalculation.totalContractHours} —á</span>
        </div>
        <div class="summary-row">
            <span class="summary-label">üìà –†–∞–∑–ª–∏–∫–∞:</span>
            <span class="summary-value ${hoursDifference >= 0 ? 'highlight' : ''}"
                  style="color: ${hoursDifference >= 0 ? '#28a745' : '#dc3545'}">
                ${hoursDifference >= 0 ? '+' : ''}${hoursDifference.toFixed(1)} —á
            </span>
        </div>
        <div class="summary-row">
            <span class="summary-label">üìä –°—Ä–µ–¥–Ω–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞:</span>
            <span class="summary-value">${averageHoursPerWeek} —á</span>
        </div>


        <!-- –ù–û–í–ê –ß–ê–°–¢: PDF DOWNLOAD –ë–£–¢–û–ù -->
        <div class="summary-actions" style="margin-top: 12px; border-top: 1px solid #eee; padding-top: 10px;">
            <button id="download-schedule-pdf"
                    class="pdf-download-btn"
                    onclick="downloadSchedulePDF('${stats.employeeName}', ${calendarMonth.year}, ${calendarMonth.month})"
                    style="
                        width: 100%;
                        padding: 8px 12px;
                        background: linear-gradient(135deg, #007bff, #0056b3);
                        color: white;
                        border: none;
                        border-radius: 6px;
                        font-size: 12px;
                        font-weight: bold;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(0,123,255,0.3);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        gap: 6px;
                    "
                    onmouseover="this.style.background='linear-gradient(135deg, #0056b3, #003d82)'; this.style.transform='translateY(-1px)'"
                    onmouseout="this.style.background='linear-gradient(135deg, #007bff, #0056b3)'; this.style.transform='translateY(0)'">
                <span>üìÑ</span>
                <span>Download PDF Schedule</span>
            </button>
        </div>

        <!-- –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–ê –ë–ï–õ–ï–ñ–ö–ê -->
        <div class="summary-note" style="font-size: 10px; color: #666; margin-top: 8px; border-top: 1px solid #eee; padding-top: 6px;">
            * Planned hours include paid leave based on contract rate
        </div>
    `;

    console.log('‚úÖ Summary —Å PDF –±—É—Ç–æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
}
/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥–∞—Ç–∞ –≤ –∫—Ä–∞—Ç—ä–∫ —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú)
 * @param {string} dateString - –î–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–∞ –¥–∞—Ç–∞
 */
function formatDateShort(dateString) {
    if (!dateString) return '';

    try {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        return `${day}.${month}`;
    } catch (error) {
        console.warn('‚ö†Ô∏è Error formatting date:', dateString);
        return dateString;
    }
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫) –∑–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞
 * @param {Date} date - –î–∞—Ç–∞—Ç–∞
 * @returns {Date} –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞
 */
function getWeekStartDate(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ö–æ—Ä–∏–≥–∏—Ä–∞–º–µ –∑–∞ –Ω–µ–¥–µ–ª—è
    return new Date(d.setDate(diff));
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–≤–µ –¥–∞—Ç–∏ —Å–∞ –≤ —Å—ä—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
 * @param {Date} date1 - –ü—ä—Ä–≤–∞—Ç–∞ –¥–∞—Ç–∞
 * @param {Date} date2 - –í—Ç–æ—Ä–∞—Ç–∞ –¥–∞—Ç–∞
 * @returns {boolean} true –∞–∫–æ —Å–∞ –≤ —Å—ä—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
 */
function isSameWeek(date1, date2) {
    const week1Start = getWeekStartDate(date1);
    const week2Start = getWeekStartDate(date2);
    return week1Start.getTime() === week2Start.getTime();
}

/**
 * –ü–£–ë–õ–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ —Å–ª–µ–¥ –ø—Ä–æ–º—è–Ω–∞ –≤ —Å—ä–±–∏—Ç–∏–µ
 * –û–ë–ù–û–í–ï–ù–û: –°–µ–≥–∞ backend-—ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
 *
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 */
async function refreshWeeklyScheduleForEmployee(employeeId) {
    console.log(`üîÑ Refreshing weekly schedule for employee ${employeeId} (with paid leave logic)`);

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑–≤–∞–º–µ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–æ–∑–∏ —Å–ª—É–∂–∏—Ç–µ–ª
    if (currentSelectedEmployeeId !== employeeId) {
        console.log('‚ÑπÔ∏è Not currently showing data for this employee, skipping refresh');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ —Å–∞ –≤–∏–¥–∏–º–∏
    const container = document.getElementById('weekly-schedule-section');
    if (!container || container.classList.contains('hidden')) {
        console.log('‚ÑπÔ∏è Weekly schedule is not visible, skipping refresh');
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –æ—Ç select-–∞
        const employeeSelect = document.getElementById('employeeSelect');
        const employeeName = employeeSelect && employeeSelect.value === employeeId ?
            employeeSelect.options[employeeSelect.selectedIndex]?.textContent?.trim() :
            '–°–ª—É–∂–∏—Ç–µ–ª';

        // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ (backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏)
        await loadAndShowWeeklySchedule(employeeId, employeeName);

        console.log('‚úÖ Weekly schedule refreshed successfully (with paid leave logic)');

    } catch (error) {
        console.error('‚ùå Error refreshing weekly schedule:', error);
        showErrorMessage('Error updating weekly data');
    }
}

/**
 * –ü–£–ë–õ–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ —Å–∞ –≤–∏–¥–∏–º–∏ –≤ –º–æ–º–µ–Ω—Ç–∞
 * @returns {boolean} true –∞–∫–æ —Å–∞ –≤–∏–¥–∏–º–∏
 */
function isWeeklyScheduleVisible() {
    const container = document.getElementById('weekly-schedule-section');
    return container && !container.classList.contains('hidden');
}

/**
 * –ü–£–ë–õ–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ ID –Ω–∞ —Ç–µ–∫—É—â–æ –∏–∑–±—Ä–∞–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª
 * @returns {string|null} ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏–ª–∏ null
 */
function getCurrentSelectedEmployeeId() {
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ employeeSelect dropdown
    const employeeSelect = document.getElementById('employeeSelect');
    if (employeeSelect && employeeSelect.value) {
        console.log(`üîç Found employee ID from dropdown: ${employeeSelect.value}`);
        return employeeSelect.value;
    }

    // –ê–∫–æ –Ω—è–º–∞ dropdown, —Ç—ä—Ä—Å–∏–º –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
    const urlParams = new URLSearchParams(window.location.search);
    const employeeId = urlParams.get('employeeId');
    if (employeeId) {
        console.log(`üîç Found employee ID from URL: ${employeeId}`);
        return employeeId;
    }

    console.warn('‚ö†Ô∏è No employee ID found');
    return null;
}

/**
 * –ü–£–ë–õ–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
 * @returns {number|null} –î–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ null
 */
function getCurrentEmployeeHourlyRate() {
    return currentEmployeeHourlyRate;
}

/**
 * –ü–£–ë–õ–ò–ß–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
 * @returns {number|null} –°–µ–¥–º–∏—á–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ null
 */
function getCurrentEmployeeWeeklyContractHours() {
    if (!currentEmployeeHourlyRate) {
        return null;
    }
    return calculateWeeklyContractHours(currentEmployeeHourlyRate);
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ event listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –º–µ—Å–µ—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
 * –ö–æ–≥–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–∞–≤–∏–≥–∏—Ä–∞ –¥–æ –¥—Ä—É–≥ –º–µ—Å–µ—Ü, –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
 */
function setupCalendarMonthChangeListener() {
    console.log('üìÖ Setting up calendar month change listener with paid leave support...');

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ listener –∫–æ–≥–∞—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –µ –≥–æ—Ç–æ–≤
    function addCalendarListener() {
        if (!window.calendar) {
            console.log('‚è≥ Calendar not ready yet, waiting...');
            return false;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –∏–º–∞ –º–µ—Ç–æ–¥–∞ on()
            if (typeof window.calendar.on !== 'function') {
                console.log('‚è≥ Calendar API not fully loaded, waiting...');
                return false;
            }

            // –î–æ–±–∞–≤—è–º–µ event listener –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ view-—Ç–æ (–º–µ—Å–µ—Ü–∞)
            window.calendar.on('datesSet', function(info) {
                console.log('üìÖ Calendar month/view changed:', {
                    start: info.start,
                    end: info.end,
                    viewType: info.view.type
                });

                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –∏–∑–±—Ä–∞–Ω —Å–ª—É–∂–∏—Ç–µ–ª
                if (currentSelectedEmployeeId) {
                    const employeeSelect = document.getElementById('employeeSelect');
                    const selectedEmployeeName = employeeSelect && employeeSelect.value === currentSelectedEmployeeId ?
                        employeeSelect.options[employeeSelect.selectedIndex]?.textContent?.trim() :
                        '–°–ª—É–∂–∏—Ç–µ–ª';

                    console.log(`üîÑ Calendar month changed, refreshing weekly schedule for employee ${selectedEmployeeName} (ID: ${currentSelectedEmployeeId}) with paid leave logic`);

                    // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –∑–∞ –Ω–æ–≤–∏—è –º–µ—Å–µ—Ü (–≤–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏)
                    loadAndShowWeeklySchedule(currentSelectedEmployeeId, selectedEmployeeName);
                } else {
                    console.log('‚ÑπÔ∏è No employee selected, skipping weekly schedule refresh');
                }
            });

            console.log('‚úÖ Calendar month change listener set up successfully with paid leave support');
            return true;

        } catch (error) {
            console.warn('‚ö†Ô∏è Error setting up calendar listener:', error);
            return false;
        }
    }

    // –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –¥–æ–±–∞–≤–∏–º listener –≤–µ–¥–Ω–∞–≥–∞
    if (addCalendarListener()) {
        return; // –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–µ–Ω
    }

    // –ê–∫–æ –Ω–µ —É—Å–ø—è—Ö–º–µ, —á–∞–∫–∞–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—ä—Ç –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞
    let attempts = 0;
    const maxAttempts = 10;
    const interval = setInterval(() => {
        attempts++;
        console.log(`üìÖ Attempt ${attempts}/${maxAttempts} to set up calendar listener...`);

        if (addCalendarListener()) {
            clearInterval(interval);
        } else if (attempts >= maxAttempts) {
            clearInterval(interval);
            console.warn('‚ö†Ô∏è Failed to set up calendar month change listener after maximum attempts');
        }
    }, 500); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –Ω–∞ –≤—Å–µ–∫–∏ 500ms
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ —Å—ä—Å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –¥–∞—Ç–∞
 * @param {string} employeeName - –ò–º–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 */
function updateWeeklyScheduleTitleWithDate(employeeName, year, month) {
    const title = document.getElementById('weekly-schedule-title');
    const subtitle = document.getElementById('weekly-schedule-subtitle');

    if (title) {
        title.textContent = 'üìä Weekly hours';
    }

    if (subtitle) {
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        const monthName = monthNames[month - 1];

        subtitle.textContent = `${employeeName} - ${monthName} ${year}`;
        console.log(`üìù Title updated with calendar date: ${employeeName} - ${monthName} ${year}`);
    }
}

/**
 * –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–≤–∞ toggle –±—É—Ç–æ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ/—Å–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
 */
function setupWeeklyScheduleToggle() {
    const toggleBtn = document.getElementById('weekly-schedule-toggle');
    const content = document.getElementById('weekly-schedule-content');
    const toggleIcon = document.querySelector('.toggle-icon');
    const toggleText = document.querySelector('.toggle-text');

    if (!toggleBtn || !content) {
        console.warn('‚ö†Ô∏è Weekly schedule toggle elements not found');
        return;
    }

    toggleBtn.addEventListener('click', function() {
        const isHidden = content.classList.contains('hidden');

        if (isHidden) {
            // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            content.classList.remove('hidden');
            toggleIcon.textContent = 'üìã';
            toggleText.textContent = 'Hide Info';
            toggleBtn.classList.add('expanded');
            console.log('üìä Weekly schedule table shown');
        } else {
            // –°–∫—Ä–∏–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            content.classList.add('hidden');
            toggleIcon.textContent = 'üìä';
            toggleText.textContent = 'More Info';
            toggleBtn.classList.remove('expanded');
            console.log('üìä Weekly schedule table hidden');
        }
    });

    console.log('‚úÖ Weekly schedule toggle set up successfully');
}

/**
 * –°–¢–™–ü–ö–ê 3: –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø –ó–ê –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê PDF
 * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –∫–æ–≥–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–ª–∏–∫–Ω–µ –Ω–∞ "Download PDF Schedule" –±—É—Ç–æ–Ω–∞
 *
 * @param {string} employeeName - –ò–º–µ—Ç–æ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 */
async function downloadSchedulePDF(employeeName, year, month) {
    console.log(`üéØ === –ó–ê–ü–û–ß–í–ê PDF –ì–ï–ù–ï–†–ò–†–ê–ù–ï (–ü–û–ü–†–ê–í–ï–ù–ê –í–ï–†–°–ò–Ø) ===`);
    console.log(`üë§ Employee: ${employeeName}`);
    console.log(`üìÖ Period: ${month}/${year}`);

    try {
        // –°–¢–™–ü–ö–ê 1: –ü–æ–¥–≥–æ—Ç–≤—è–º–µ UI-–∞
        const downloadBtn = document.getElementById('download-schedule-pdf');
        const originalText = downloadBtn.innerHTML;
        downloadBtn.innerHTML = '<span>‚è≥</span><span>Generating PDF...</span>';
        downloadBtn.disabled = true;

        // –°–¢–™–ü–ö–ê 2: –ü–æ–ª—É—á–∞–≤–∞–º–µ ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
        const employeeId = getCurrentSelectedEmployeeId();
        if (!employeeId) {
            throw new Error('No employee selected');
        }
        console.log(`üîç Employee ID: ${employeeId}`);

        // –°–¢–™–ü–ö–ê 3: –í–ê–ñ–ù–û! –ò–∑–ø–æ–ª–∑–≤–∞–º–µ dailyHoursManager –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
        console.log('üìã Fetching daily work hours from backend (USING DAILY HOURS MANAGER)...');

        // –¢—É–∫ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç dailyHoursManager.js
        const dailyHoursData = await getDailyWorkHoursForEmployee(employeeId, year, month);
        console.log(`üìä Retrieved ${dailyHoursData.tableRows.length} days with proper work hours`);

        // –°–¢–™–ü–ö–ê 4: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        console.log('üìÑ Generating PDF document with work hours...');
        await generatePDFDocumentWithWorkHours(employeeName, year, month, dailyHoursData);

        // –°–¢–™–ü–ö–ê 5: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –±—É—Ç–æ–Ω–∞
        downloadBtn.innerHTML = originalText;
        downloadBtn.disabled = false;

        console.log('‚úÖ PDF generated successfully with work hours!');

    } catch (error) {
        console.error('‚ùå Error generating PDF:', error);

        // –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –±—É—Ç–æ–Ω–∞ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
        const downloadBtn = document.getElementById('download-schedule-pdf');
        if (downloadBtn) {
            downloadBtn.innerHTML = '<span>üìÑ</span><span>Download PDF</span>';
            downloadBtn.disabled = false;
        }

        alert('Error generating PDF: ' + error.message);
    }
}

/**
 * –°–¢–™–ü–ö–ê 3.A: –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø - –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –º–µ—Å–µ—Ü
 *
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @returns {Array} –ú–∞—Å–∏–≤ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –∑–∞ –º–µ—Å–µ—Ü–∞
 */
/**
 * –ü–û–ü–†–ê–í–ï–ù–ê –°–¢–™–ü–ö–ê 6: –§–£–ù–ö–¶–ò–ò –ó–ê –ü–†–ê–í–ò–õ–ù–û –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –°–ú–ï–ù–ò–¢–ï
 * –ó–∞–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ fetchEmployeeEventsForMonth –∏ createDailyScheduleTable —Å —Ç–µ–∑–∏ –≤–µ—Ä—Å–∏–∏
 */

/**
 * –ü–û–ü–†–ê–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –º–µ—Å–µ—Ü
 * –ü–û–î–û–ë–†–ï–ù–ê –õ–û–ì–ò–ö–ê: –ü–æ-—Ç–æ—á–Ω–æ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∏ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 *
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @returns {Array} –ú–∞—Å–∏–≤ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –∑–∞ –º–µ—Å–µ—Ü–∞
 */
async function fetchEmployeeEventsForMonth(employeeId, year, month) {
    console.log(`üîç === –ó–ê–ü–û–ß–í–ê –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–Ø ===`);
    console.log(`üë§ Employee ID: ${employeeId} (type: ${typeof employeeId})`);
    console.log(`üìÖ Target month: ${month}/${year}`);

    try {
        // –°–¢–™–ü–ö–ê 6.1: –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º backend –∑–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è
        console.log('üì° Fetching all events from backend...');
        const response = await fetch('http://localhost:8080/events');

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: Failed to fetch events`);
        }

        const allEvents = await response.json();
        console.log(`üìä Backend returned ${allEvents.length} total events`);

        // –°–¢–™–ü–ö–ê 6.2: Debug - –ø–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ –Ω—è–∫–æ–ª–∫–æ —Å—ä–±–∏—Ç–∏—è –∑–∞ –∞–Ω–∞–ª–∏–∑
        if (allEvents.length > 0) {
            console.log('üîç Sample event structure:', allEvents[0]);
            console.log('üìã First 3 events:');
            allEvents.slice(0, 3).forEach((event, index) => {
                console.log(`  ${index + 1}. Employee ID: ${event.employee?.id} (${typeof event.employee?.id}), Title: "${event.title}", Start: "${event.start}"`);
            });
        }

        // –°–¢–™–ü–ö–ê 6.3: –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å—ä–±–∏—Ç–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—è —Å–ª—É–∂–∏—Ç–µ–ª
        console.log(`üéØ Filtering events for employee ID: ${employeeId}`);

        const employeeEvents = allEvents.filter(event => {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ employee –æ–±–µ–∫—Ç
            if (!event.employee || !event.employee.id) {
                console.log(`‚ö†Ô∏è Event without employee: ${event.id}`);
                return false;
            }

            // –°—Ä–∞–≤–Ω—è–≤–∞–º–µ ID-—Ç–∞—Ç–∞ –∫–∞—Ç–æ strings –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
            const eventEmployeeId = event.employee.id.toString();
            const targetEmployeeId = employeeId.toString();

            const isMatch = eventEmployeeId === targetEmployeeId;

            if (isMatch) {
                console.log(`‚úÖ Employee match found: Event ID ${event.id}, Employee ID ${eventEmployeeId}`);
            }

            return isMatch;
        });

        console.log(`üìä Found ${employeeEvents.length} events for employee ${employeeId}`);

        // –°–¢–™–ü–ö–ê 6.4: –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø–æ –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞
        console.log(`üìÖ Filtering events for ${month}/${year}...`);

        const employeeEventsForMonth = employeeEvents.filter(event => {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ start –¥–∞—Ç–∞
            if (!event.start) {
                console.log(`‚ö†Ô∏è Event ${event.id} has no start date`);
                return false;
            }

            try {
                // –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ - backend –≤—Ä—ä—â–∞ —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM:SS"
                const eventDate = new Date(event.start);

                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞
                if (isNaN(eventDate.getTime())) {
                    console.log(`‚ö†Ô∏è Invalid date in event ${event.id}: "${event.start}"`);
                    return false;
                }

                const eventYear = eventDate.getFullYear();
                const eventMonth = eventDate.getMonth() + 1; // JS –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based (0-11)

                const isInTargetMonth = eventYear === year && eventMonth === month;

                if (isInTargetMonth) {
                    console.log(`‚úÖ Event in target month: ID ${event.id}, Date: ${eventDate.toLocaleDateString()}, Start: "${event.start}"`);
                } else {
                    console.log(`‚ùå Event NOT in target month: ID ${event.id}, Event date: ${eventMonth}/${eventYear}, Target: ${month}/${year}`);
                }

                return isInTargetMonth;

            } catch (error) {
                console.warn(`‚ö†Ô∏è Error parsing date for event ${event.id}: "${event.start}" - ${error.message}`);
                return false;
            }
        });

        console.log(`‚úÖ Final result: ${employeeEventsForMonth.length} events for employee ${employeeId} in ${month}/${year}`);

        // –°–¢–™–ü–ö–ê 6.5: Debug - –ø–æ–∫–∞–∑–≤–∞–º–µ —Ñ–∏–Ω–∞–ª–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        if (employeeEventsForMonth.length > 0) {
            console.log('üìã Events found for the month:');
            employeeEventsForMonth.forEach((event, index) => {
                const eventDate = new Date(event.start);
                const day = eventDate.getDate();
                const timeStr = eventDate.toLocaleTimeString('bg-BG', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                console.log(`  ${index + 1}. Day ${day}: ${timeStr} - ${event.activity || event.leaveType || 'Work'}`);
            });
        } else {
            console.log('‚ùå NO EVENTS found for this employee in this month!');
            console.log('üîç Debugging info:');
            console.log(`   - Total events in system: ${allEvents.length}`);
            console.log(`   - Events for employee ${employeeId}: ${employeeEvents.length}`);
            console.log(`   - Target month/year: ${month}/${year}`);
        }

        // –°–¢–™–ü–ö–ê 6.6: –°–æ—Ä—Ç–∏—Ä–∞–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞ –ø–æ –¥–∞—Ç–∞
        employeeEventsForMonth.sort((a, b) => {
            const dateA = new Date(a.start);
            const dateB = new Date(b.start);
            return dateA - dateB;
        });

        return employeeEventsForMonth;

    } catch (error) {
        console.error('‚ùå Error fetching employee events:', error);
        throw error;
    }
}

/**
 * –ü–û–ü–†–ê–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –≤—Å–∏—á–∫–∏ –¥–Ω–∏ –æ—Ç –º–µ—Å–µ—Ü–∞
 * –ü–û–î–û–ë–†–ï–ù–ê –õ–û–ì–ò–ö–ê: –ü–æ-—Ç–æ—á–Ω–æ —Å—ä–ø–æ—Å—Ç–∞–≤—è–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è –ø–æ –¥–∞—Ç–∏
 *
 * @param {number} year - –ì–æ–¥–∏–Ω–∞
 * @param {number} month - –ú–µ—Å–µ—Ü (1-12)
 * @param {Array} events - –ú–∞—Å–∏–≤ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –∑–∞ –º–µ—Å–µ—Ü–∞
 * @returns {Array} –ú–∞—Å–∏–≤ —Å –æ–±–µ–∫—Ç–∏ {day, date, event} –∑–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω
 */
function createDailyScheduleTable(year, month, events) {
    console.log(`üìÖ === –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –î–ù–ï–í–ù–ê –¢–ê–ë–õ–ò–¶–ê ===`);
    console.log(`üìä Input: ${month}/${year} with ${events.length} events`);

    // –°–¢–™–ü–ö–ê 6.7: –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–ª–∫–æ –¥–Ω–∏ –∏–º–∞ –º–µ—Å–µ—Ü—ä—Ç
    const daysInMonth = getDaysInMonth(year, month);
    console.log(`üìã Month ${month}/${year} has ${daysInMonth} days`);

    // –°–¢–™–ü–ö–ê 6.8: –°—ä–∑–¥–∞–≤–∞–º–µ –ø–æ–¥—Ä–æ–±–µ–Ω map —Å—ä—Å —Å—ä–±–∏—Ç–∏—è—Ç–∞ –ø–æ –¥–∞—Ç–∏
    console.log('üóÇÔ∏è Creating events map by day...');
    const eventsByDate = new Map();

    events.forEach((event, eventIndex) => {
        try {
            // –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
            const eventDate = new Date(event.start);

            // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–µ–Ω—è –æ—Ç –º–µ—Å–µ—Ü–∞ (1-31)
            const dayOfMonth = eventDate.getDate();

            console.log(`üìå Processing event ${eventIndex + 1}:`);
            console.log(`   - Event ID: ${event.id}`);
            console.log(`   - Start: "${event.start}"`);
            console.log(`   - Parsed date: ${eventDate.toLocaleDateString()}`);
            console.log(`   - Day of month: ${dayOfMonth}`);
            console.log(`   - Activity/Leave: ${event.activity || event.leaveType || 'Work'}`);

            // –ê–∫–æ –≤–µ—á–µ –∏–º–∞ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–æ–∑–∏ –¥–µ–Ω, –¥–æ–±–∞–≤—è–º–µ –≥–æ –∫—ä–º –º–∞—Å–∏–≤–∞
            if (!eventsByDate.has(dayOfMonth)) {
                eventsByDate.set(dayOfMonth, []);
                console.log(`   - Created new array for day ${dayOfMonth}`);
            }

            eventsByDate.get(dayOfMonth).push(event);
            console.log(`   - Added to day ${dayOfMonth} (total events for day: ${eventsByDate.get(dayOfMonth).length})`);

        } catch (error) {
            console.error(`‚ùå Error processing event ${eventIndex + 1}:`, error);
            console.error(`   - Event data:`, event);
        }
    });

    console.log(`üóÇÔ∏è Events map created:`);
    eventsByDate.forEach((dayEvents, day) => {
        console.log(`   - Day ${day}: ${dayEvents.length} events`);
    });

    // –°–¢–™–ü–ö–ê 6.9: –°—ä–∑–¥–∞–≤–∞–º–µ –º–∞—Å–∏–≤ —Å –≤—Å–∏—á–∫–∏ –¥–Ω–∏ –æ—Ç –º–µ—Å–µ—Ü–∞
    console.log('üìã Creating daily schedule array...');
    const dailySchedule = [];

    for (let day = 1; day <= daysInMonth; day++) {
        // –°–¢–™–ü–ö–ê 6.10: –°—ä–∑–¥–∞–≤–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏—è –¥–µ–Ω
        const currentDate = new Date(year, month - 1, day); // month-1 –∑–∞—â–æ—Ç–æ JS –º–µ—Å–µ—Ü–∏—Ç–µ —Å–∞ 0-based
        const dayName = getDayNameBulgarian(currentDate.getDay());

        console.log(`üìÖ Processing day ${day} (${dayName}):`);

        // –°–¢–™–ü–ö–ê 6.11: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–æ–∑–∏ –¥–µ–Ω
        const dayEvents = eventsByDate.get(day) || [];
        console.log(`   - Found ${dayEvents.length} events for day ${day}`);

        let eventDescription = '';

        if (dayEvents.length > 0) {
            // –°–¢–™–ü–ö–ê 6.12: –ê–∫–æ –∏–º–∞ —Å—ä–±–∏—Ç–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≥–∏
            console.log(`   - Processing ${dayEvents.length} events...`);

            eventDescription = dayEvents.map((event, eventIndex) => {
                console.log(`     Event ${eventIndex + 1}:`);

                if (event.leaveType && event.leaveType.trim() !== '') {
                    // –ó–∞ –æ—Ç–ø—É—Å–∫–∏ –ø–æ–∫–∞–∑–≤–∞–º–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫
                    console.log(`       - Leave type: ${event.leaveType}`);
                    return `${event.leaveType}`;
                } else {
                    // –ó–∞ —Ä–∞–±–æ—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è –ø–æ–∫–∞–∑–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞
                    try {
                        const startTime = new Date(event.start).toLocaleTimeString('bg-BG', {
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        const endTime = new Date(event.end).toLocaleTimeString('bg-BG', {
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        const activity = event.activity || 'Work';

                        const formattedEvent = `${startTime}-${endTime} (${activity})`;
                        console.log(`       - Work shift: ${formattedEvent}`);
                        return formattedEvent;

                    } catch (timeError) {
                        console.error(`       - Error formatting time:`, timeError);
                        return `Work shift (${event.activity || 'Work'})`;
                    }
                }
            }).join(', ');

            console.log(`   - Final description: "${eventDescription}"`);
        } else {
            // –°–¢–™–ü–ö–ê 6.13: –ê–∫–æ –Ω—è–º–∞ —Å—ä–±–∏—Ç–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–º–µ —Ç–∏–ø–∞ –¥–µ–Ω
            console.log(`   - No events found for day ${day}`);

            if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
                // –°—ä–±–æ—Ç–∞ (6) –∏–ª–∏ –Ω–µ–¥–µ–ª—è (0)
                eventDescription = 'Weekend';
                console.log(`   - Marked as Weekend (day of week: ${currentDate.getDay()})`);
            } else {
                // –†–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –±–µ–∑ –ø–ª–∞–Ω—É–≤–∞–Ω–æ —Å—ä–±–∏—Ç–∏–µ
                eventDescription = 'Day off';
                console.log(`   - Marked as Day off (workday with no events)`);
            }
        }

        // –°–¢–™–ü–ö–ê 6.14: –î–æ–±–∞–≤—è–º–µ —Ä–µ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        const dayData = {
            day: day,
            dayName: dayName,
            fullDate: currentDate.toLocaleDateString('bg-BG'),
            eventDescription: eventDescription,
            hasEvent: dayEvents.length > 0
        };

        dailySchedule.push(dayData);
        console.log(`‚úÖ Day ${day} added: ${eventDescription}`);
    }

    console.log(`‚úÖ === –î–ù–ï–í–ù–ê –¢–ê–ë–õ–ò–¶–ê –ó–ê–í–™–†–®–ï–ù–ê ===`);
    console.log(`üìä Created ${dailySchedule.length} entries for ${month}/${year}`);

    // –°–¢–™–ü–ö–ê 6.15: –§–∏–Ω–∞–ª–µ–Ω debug - –ø–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const daysWithEvents = dailySchedule.filter(day => day.hasEvent).length;
    const dayOffs = dailySchedule.filter(day => day.eventDescription === 'Day off').length;
    const weekends = dailySchedule.filter(day => day.eventDescription === 'Weekend').length;

    console.log(`üìà Statistics:`);
    console.log(`   - Days with events: ${daysWithEvents}`);
    console.log(`   - Day offs: ${dayOffs}`);
    console.log(`   - Weekends: ${weekends}`);
    console.log(`   - Total: ${daysWithEvents + dayOffs + weekends} (should be ${daysInMonth})`);

    return dailySchedule;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–æ–±—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –¥–Ω–∏—Ç–µ –≤ –º–µ—Å–µ—Ü–∞
 * –°—ä—â–æ —Ç–∞–∫–∞ –ø—Ä–∞–≤–∏ debug –ø—Ä–æ–≤–µ—Ä–∫–∞
 */
function getDaysInMonth(year, month) {
    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ JavaScript Date —Ç—Ä–∏–∫
    const lastDayOfMonth = new Date(year, month, 0).getDate();

    console.log(`üìÖ Days in month ${month}/${year}: ${lastDayOfMonth}`);

    // Debug –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ñ–µ–≤—Ä—É–∞—Ä–∏ –∏ –≤–∏—Å–æ–∫–æ—Å–Ω–∏ –≥–æ–¥–∏–Ω–∏
    if (month === 2) {
        const isLeap = ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0));
        console.log(`üóìÔ∏è February ${year}: ${isLeap ? 'LEAP' : 'NORMAL'} year = ${lastDayOfMonth} days`);
    }

    return lastDayOfMonth;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –±—ä–ª–≥–∞—Ä—Å–∫–æ—Ç–æ –∏–º–µ –Ω–∞ –¥–µ–Ω—è (–ø–æ–¥–æ–±—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è)
 */
function getDayNameBulgarian(dayIndex) {
    const englishDays = [
        'Sunday',    // 0 - –ù–µ–¥–µ–ª—è
        'Monday',    // 1 - –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫
        'Tuesday',   // 2 - –í—Ç–æ—Ä–Ω–∏–∫
        'Wednesday', // 3 - –°—Ä—è–¥–∞
        'Thursday',  // 4 - –ß–µ—Ç–≤—ä—Ä—Ç—ä–∫
        'Friday',    // 5 - –ü–µ—Ç—ä–∫
        'Saturday'   // 6 - –°—ä–±–æ—Ç–∞
    ];

    return englishDays[dayIndex] || 'Unknown';
}

// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –Ω–∞ –ø–æ–ø—Ä–∞–≤–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.fetchEmployeeEventsForMonth = fetchEmployeeEventsForMonth;
window.createDailyScheduleTable = createDailyScheduleTable;
window.getDaysInMonth = getDaysInMonth;
window.getDayNameBulgarian = getDayNameBulgarian;

console.log('‚úÖ –ü–û–ü–†–ê–í–ï–ù–ò PDF —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–¥–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–¥–æ–±—Ä–µ–Ω debug!');
/**
 * –ù–û–í–ê –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 * –ó–∞–º–µ–Ω—è —Å—Ç–∞—Ä–∞—Ç–∞ generatePDFDocument —Ñ—É–Ω–∫—Ü–∏—è
 *
 * @param {string} employeeName - –∏–º–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –≥–æ–¥–∏–Ω–∞
 * @param {number} month - –º–µ—Å–µ—Ü
 * @param {Object} dailyHoursData - –¥–∞–Ω–Ω–∏ –æ—Ç dailyHoursManager
 */
async function generatePDFDocumentWithWorkHours(employeeName, year, month, dailyHoursData) {
    console.log('üìÑ === –ó–ê–ü–û–ß–í–ê –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê PDF –î–û–ö–£–ú–ï–ù–¢ –° –ß–ê–°–û–í–ï –û–ë–û–ë–©–ï–ù–ò–ï ===');

    try {
        // –°–¢–™–ü–ö–ê 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ jsPDF
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ —à–∏—Ä–∏–Ω–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
        const pageWidth = doc.internal.pageSize.getWidth();

        function drawCenteredText(doc, text, y, fontSize = 10, fontStyle = 'normal', color = [80, 80, 80]) {
            doc.setFontSize(fontSize);
            doc.setFont('helvetica', fontStyle);
            doc.setTextColor(...color);
            const textWidth = doc.getTextWidth(text);
            const x = (pageWidth - textWidth) / 2;
            doc.text(text, x, y);
        }


        // –°–¢–™–ü–ö–ê 2: –î–æ–±–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–∏–µ
        console.log('üìù Adding PDF header...');
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        const monthName = monthNames[month - 1];

        // –ó–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–æ)
        const titleText = `Work Schedule - ${monthName} ${year}`;
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(40, 40, 40);
        doc.text(titleText, (pageWidth - doc.getTextWidth(titleText)) / 2, 25);

        // –ò–º–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (—Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–æ)
        const employeeText = `Employee: ${employeeName}`;
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(80, 80, 80);
        doc.text(employeeText, (pageWidth - doc.getTextWidth(employeeText)) / 2, 35);

        // –°–¢–™–ü–ö–ê 3: –î–æ–±–∞–≤—è–º–µ –æ–±–æ–±—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–∞)
        console.log('üìä Adding summary statistics...');
        doc.setFontSize(10);
        doc.setTextColor(100, 100, 100);
        const summary = dailyHoursData.summary;
        const summaryText = `Total Days: ${summary.totalDays} | Work Days: ${summary.workDays} | Days Off: ${summary.dayOffs} | Leave Days: ${summary.leaveDays}`;
        doc.text(summaryText, (pageWidth - doc.getTextWidth(summaryText)) / 2, 45);
        // –°–¢–™–ü–ö–ê 4: –°—ä–∑–¥–∞–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        console.log('üìã Creating table data...');

        // –ó–∞–≥–ª–∞–≤–∏—è –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        const tableHeaders = [['Date', 'Day', 'Work Hours']];

        // –î–∞–Ω–Ω–∏ –∑–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ
        const tableData = dailyHoursData.tableRows.map(row => [
            row.date,           // –î–∞—Ç–∞ (–î–î.–ú–ú)
            row.dayOfWeek,      // –î–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (Mon, Tue...)
            row.workHours       // –†–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
        ]);

        // –ü—ä—Ä–≤–æ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–π –∂–µ–ª–∞–Ω–∞—Ç–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ (—Å—É–º–∞—Ç–∞ –Ω–∞ cellWidth)
        const tableWidth = 25 + 25 + 60; // –ò–ª–∏ –∫–∞–∫–≤–∏—Ç–æ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∏–º–∞—à –≤ columnStyles

        // –ò–∑—á–∏—Å–ª–∏ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–Ω–∏—è margin
        const horizontalMargin = (pageWidth - tableWidth) / 2;

        // –°–¢–™–ü–ö–ê 5: –î–æ–±–∞–≤—è–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å autoTable
        console.log('üìä Adding schedule table...');
        doc.autoTable({
            head: tableHeaders,
            body: tableData,
            startY: 55,
            margin: { left: horizontalMargin },
            theme: 'grid',
            styles: {
                fontSize: 9,
                cellPadding: 3,
            },
            headStyles: {
                fillColor: [41, 128, 185],
                textColor: 255,
                fontStyle: 'bold'
            },
            columnStyles: {
                0: { cellWidth: 25, halign: 'center' },  // Date column
                1: { cellWidth: 25, halign: 'center' },  // Day column
                2: { cellWidth: 60, halign: 'left' }     // Work Hours column
            },
            didParseCell: function(data) {
                // –°–¢–™–ü–ö–ê 5a: –°—Ç–∏–ª–∏–∑–∏—Ä–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ –¥–Ω–∏ —Å —Ü–≤–µ—Ç–æ–≤–µ
                if (data.section === 'body') {
                    const workHours = data.cell.raw;

                    // –†–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ (—Å—ä–¥—ä—Ä–∂–∞—Ç —Ç–∏—Ä–µ)
                    if (typeof workHours === 'string' && workHours.includes(' - ')) {
                        data.cell.styles.fillColor = [217, 237, 217]; // –°–≤–µ—Ç–ª–æ –∑–µ–ª–µ–Ω–æ
                        data.cell.styles.textColor = [27, 94, 32];
                    }
                    // –û—Ç–ø—É—Å–∫–∏ (—Å—ä–¥—ä—Ä–∂–∞—Ç "leave")
                    else if (typeof workHours === 'string' && workHours.toLowerCase().includes('leave')) {
                        data.cell.styles.fillColor = [255, 228, 225]; // –°–≤–µ—Ç–ª–æ —á–µ—Ä–≤–µ–Ω–æ
                        data.cell.styles.textColor = [183, 28, 28];
                    }
                    // –ü–æ—á–∏–≤–Ω–∏ –¥–Ω–∏
                    else if (workHours === 'Day off') {
                        data.cell.styles.fillColor = [255, 248, 225]; // –°–≤–µ—Ç–ª–æ –∂—ä–ª—Ç–æ
                        data.cell.styles.textColor = [255, 111, 0];
                    }
                    // –£–∏–∫–µ–Ω–¥–∏
                    else if (workHours === 'Weekend') {
                        data.cell.styles.fillColor = [248, 248, 248]; // –°–≤–µ—Ç–ª–æ —Å–∏–≤–æ
                        data.cell.styles.textColor = [117, 117, 117];
                    }
                }
            }
        });

        // –°–¢–™–ü–ö–ê 6: ‚úÖ –ù–û–í–ê –ß–ê–°–¢ - –ò–ó–ü–û–õ–ó–í–ê–ú–ï –°–™–©–ï–°–¢–í–£–í–ê–©–ò–¢–ï –§–£–ù–ö–¶–ò–ò
        console.log('‚è∞ === –î–û–ë–ê–í–Ø–ú–ï –û–ë–û–ë–©–ï–ù–ò–ï –° –ß–ê–°–û–í–ï (–ò–ó–ü–û–õ–ó–í–ê–ú–ï –°–™–©–ï–°–¢–í–£–í–ê–©–ò –§–£–ù–ö–¶–ò–ò) ===');

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ —Å–ª–µ–¥ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        const finalY = doc.lastAutoTable.finalY || 100;
        let currentY = finalY + 15;

        // ‚úÖ –ò–ó–ü–û–õ–ó–í–ê–ú–ï —Ç–≤–æ–∏—Ç–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω–∏:

        // 1. –ü–æ–ª—É—á–∞–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
        const contractHoursPerDay = currentEmployeeHourlyRate || 8; // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∞—Ç–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞

        // 2. –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–≤–æ—è—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è calculateContractHoursForMonth
        console.log('üßÆ Using existing calculateContractHoursForMonth function...');
        const contractCalculation = calculateContractHoursForMonth(contractHoursPerDay, year, month);
        const expectedHours = contractCalculation.totalContractHours;

        // 3. –ü–æ–ª—É—á–∞–≤–∞–º–µ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –æ—Ç currentWeeklyData (–∞–∫–æ –µ –Ω–∞–ª–∏—á–Ω–æ)
        let actualPlannedHours = 0;
        if (currentWeeklyData && currentWeeklyData.weeklySchedule) {
            // –°—É–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏ —á–∞—Å–æ–≤–µ –æ—Ç —Å–µ–¥–º–∏—Ü–∏—Ç–µ
            actualPlannedHours = currentWeeklyData.weeklySchedule.reduce((total, week) => {
                return total + (parseFloat(week.plannedHours) || 0);
            }, 0);
            console.log(`üìä Using currentWeeklyData: ${actualPlannedHours}h planned`);
        } else {
            // Fallback: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ—Ç dailyHoursData
            actualPlannedHours = calculateHoursFromDailyData(dailyHoursData.tableRows, contractHoursPerDay);
            console.log(`üìä Fallback calculation: ${actualPlannedHours}h planned`);
        }

        // 4. –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑–ª–∏–∫–∞—Ç–∞ (–∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—ä—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–æ –≤ summary-—Ç–æ)
        const hoursDifference = actualPlannedHours - expectedHours;

        console.log(`üìä Hours calculation summary:`);
        console.log(`   Expected (contract): ${expectedHours}h`);
        console.log(`   Actual (planned): ${actualPlannedHours.toFixed(1)}h`);
        console.log(`   Difference: ${hoursDifference >= 0 ? '+' : ''}${hoursDifference.toFixed(1)}h`);

        // –°–¢–™–ü–ö–ê 6a: –ó–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –æ–±–æ–±—â–µ–Ω–∏–µ—Ç–æ
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(40, 40, 40);
        const summaryTitle = 'Monthly Hours Summary';
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(40, 40, 40);
        doc.text(summaryTitle, (pageWidth - doc.getTextWidth(summaryTitle)) / 2, currentY);
        currentY += 10;

        // –°–¢–™–ü–ö–ê 6b: –î–æ–±–∞–≤—è–º–µ –ª–∏–Ω–∏—è –∑–∞ —Ä–∞–∑–¥–µ–ª—è–Ω–µ
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.5);
        doc.line(20, currentY, 190, currentY);
        currentY += 8;

        // –°–¢–™–ü–ö–ê 6c: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(80, 80, 80);

        // –†–µ–¥ 1: –î–æ–≥–æ–≤–æ—Ä–µ–Ω–∞ –Ω–æ—Ä–º–∞
        drawCenteredText(doc, `Contract: ${contractHoursPerDay} hours/day √ó ${contractCalculation.workingDays} working days`, currentY, 10, 'normal', [80, 80, 80]);
        currentY += 6;

        // –†–µ–¥ 2: –û—á–∞–∫–≤–∞–Ω–∏ —á–∞—Å–æ–≤–µ
        drawCenteredText(doc, `Expected Hours: ${expectedHours} hours`, currentY, 10, 'bold', [80, 80, 80]);
        currentY += 8;

        // –†–µ–¥ 3: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–∏ —á–∞—Å–æ–≤–µ
       drawCenteredText(doc, `Actual Planned: ${actualPlannedHours.toFixed(1)} hours`, currentY, 10, 'bold', [80, 80, 80]);
       currentY += 8;

        // –†–µ–¥ 4: –†–∞–∑–ª–∏–∫–∞—Ç–∞ (—Å —Ü–≤—è—Ç —Å–ø–æ—Ä–µ–¥ –∑–Ω–∞–∫–∞)
        doc.setFontSize(11);
        doc.setFont('helvetica', 'bold');

        // –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Ü–≤–µ—Ç–∞ —Å–ø–æ—Ä–µ–¥ —Ä–∞–∑–ª–∏–∫–∞—Ç–∞
        let diffText = `Difference: ${hoursDifference >= 0 ? '+' : ''}${hoursDifference.toFixed(1)} hours`;
        let diffNote = hoursDifference > 0 ? ' (above target)' :
                       hoursDifference < 0 ? ' (below target)' :
                       ' (exactly on target)';
        let diffColor = hoursDifference > 0 ? [27, 94, 32] :
                        hoursDifference < 0 ? [183, 28, 28] :
                        [80, 80, 80];

        drawCenteredText(doc, `${diffText}${diffNote}`, currentY, 11, 'bold', diffColor);
        currentY += 8;

        // –°–¢–™–ü–ö–ê 6d: –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        drawCenteredText(
            doc,
            `Working days calculation: ${contractCalculation.totalDaysInMonth} total days - ${contractCalculation.weekendDays} weekends = ${contractCalculation.workingDays} working days`,
            currentY,
            8,
            'italic',
            [100, 100, 100]
        );
        currentY += 5;

        drawCenteredText(
            doc,
            `* Paid leave days are included in planned hours`,
            currentY,
            8,
            'italic',
            [100, 100, 100]
        );


        // –°–¢–™–ü–ö–ê 7: –î–æ–±–∞–≤—è–º–µ footer (–ø—Ä–µ–º–µ—Å—Ç–µ–Ω –ø–æ-–Ω–∞–¥–æ–ª—É)
        console.log('üìù Adding footer...');
        const pageHeight = doc.internal.pageSize.height;
        const footerY = pageHeight - 20;

        // –¢—ä–Ω–∫–∞ –ª–∏–Ω–∏—è
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.3);
        doc.line(20, footerY - 5, 190, footerY - 5);

        // Footer —Ç–µ–∫—Å—Ç
        doc.setFontSize(8);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(100, 100, 100);
        doc.text('Generated by Employee Schedule System', 20, footerY);

        // –î–∞—Ç–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
        const now = new Date();
        const generatedDateTime = now.toLocaleString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        doc.text(`Generated: ${generatedDateTime}`, 190, footerY, { align: 'right' });

        // –°–¢–™–ü–ö–ê 8: –ó–∞–ø–∏—Å–≤–∞–º–µ —Ñ–∞–π–ª–∞
        console.log('üíæ Saving PDF file...');
        const fileName = `Schedule_${employeeName.replace(/\s+/g, '')}_${year}_${monthName}_with_hours.pdf`;
        doc.save(fileName);

        console.log(`‚úÖ PDF saved as: ${fileName}`);
        console.log('üéâ PDF generation completed successfully with hours summary using existing functions!');

    } catch (error) {
        console.error('‚ùå Error generating PDF document:', error);
        throw error;
    }
}

// –°–¢–™–ü–ö–ê 4.10: –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏—Ç–µ –∏–º–µ–Ω–∞ –Ω–∞ –¥–Ω–∏—Ç–µ
// (–ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –≤ createDailyScheduleTable —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞)
function getDayNameBulgarian(dayIndex) {
    // dayIndex: 0=–ù–µ–¥–µ–ª—è, 1=–ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫, 2=–í—Ç–æ—Ä–Ω–∏–∫, –∏ —Ç.–Ω.
    const bulgarianDays = [
        'Sunday',    // 0 - –ù–µ–¥–µ–ª—è
        'Monday',    // 1 - –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫
        'Tuesday',   // 2 - –í—Ç–æ—Ä–Ω–∏–∫
        'Wednesday', // 3 - –°—Ä—è–¥–∞
        'Thursday',  // 4 - –ß–µ—Ç–≤—ä—Ä—Ç—ä–∫
        'Friday',    // 5 - –ü–µ—Ç—ä–∫
        'Saturday'   // 6 - –°—ä–±–æ—Ç–∞
    ];

    return bulgarianDays[dayIndex] || 'Unknown';
}

/**
 * ‚úÖ –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–Ω–µ–≤–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ (fallback –∞–∫–æ –Ω—è–º–∞ currentWeeklyData)
 * @param {Array} tableRows - —Ä–µ–¥–æ–≤–µ—Ç–µ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
 * @param {number} contractHoursPerDay - —á–∞—Å–æ–≤–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
 * @returns {number} –æ–±—â–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏ —á–∞—Å–æ–≤–µ
 */
function calculateHoursFromDailyData(tableRows, contractHoursPerDay) {
    let totalHours = 0;

    console.log('üßÆ Calculating hours from daily data (fallback method)...');

    tableRows.forEach((row, index) => {
        if (row.workHours && typeof row.workHours === 'string') {

            // –°–õ–£–ß–ê–ô 1: –†–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ (—Å—ä–¥—ä—Ä–∂–∞—Ç —Ç–∏—Ä–µ, –Ω–∞–ø—Ä. "13:30 - 22:30")
            if (row.workHours.includes(' - ')) {
                const hours = calculateHoursFromTimeRange(row.workHours);
                totalHours += hours;
                console.log(`   Day ${index + 1}: ${row.date} - ${row.workHours} = ${hours}h`);
            }
            // –°–õ–£–ß–ê–ô 2: –ü–ª–∞—Ç–µ–Ω–∏ –æ—Ç–ø—É—Å–∫–∏ (count as work hours)
            else if (row.workHours.toLowerCase().includes('paid leave') ||
                     row.workHours.toLowerCase().includes('vacation')) {
                totalHours += contractHoursPerDay;
                console.log(`   Day ${index + 1}: ${row.date} - ${row.workHours} = ${contractHoursPerDay}h (paid leave)`);
            }
            // –°–õ–£–ß–ê–ô 3: –ù–µ–ø–ª–∞—Ç–µ–Ω–∏ –æ—Ç–ø—É—Å–∫–∏ –∏–ª–∏ –ø–æ—á–∏–≤–Ω–∏ –¥–Ω–∏ (–Ω–µ –±—Ä–æ–∏–º)
            else {
                console.log(`   Day ${index + 1}: ${row.date} - ${row.workHours} = 0h (not counted)`);
            }
        }
    });

    console.log(`üìä Total calculated hours from daily data: ${totalHours}h`);
    return totalHours;
}

/**
 * ‚úÖ –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç –≤—Ä–µ–º–µ
 * @param {string} timeRange - –Ω–∞–ø—Ä. "13:30 - 22:30"
 * @returns {number} —á–∞—Å–æ–≤–µ—Ç–µ
 */
function calculateHoursFromTimeRange(timeRange) {
    try {
        const parts = timeRange.split(' - ');
        if (parts.length !== 2) return 0;

        const startTime = parts[0].trim();
        const endTime = parts[1].trim();

        const [startHour, startMin] = startTime.split(':').map(Number);
        const [endHour, endMin] = endTime.split(':').map(Number);

        const startMinutes = startHour * 60 + startMin;
        const endMinutes = endHour * 60 + endMin;

        const diffMinutes = endMinutes - startMinutes;
        const hours = diffMinutes / 60;

        return Math.max(0, hours);

    } catch (error) {
        console.error('‚ùå Error calculating hours from time range:', timeRange, error);
        return 0;
    }
}
window.calculateHoursFromDailyData = calculateHoursFromDailyData;
window.calculateHoursFromTimeRange = calculateHoursFromTimeRange;
// –°–¢–™–ü–ö–ê 4.11: –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –Ω–∞ –Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –≥–ª–æ–±–∞–ª–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
window.downloadSchedulePDF = downloadSchedulePDF;
//window.fetchEmployeeEventsForMonth = fetchEmployeeEventsForMonth;
//window.createDailyScheduleTable = createDailyScheduleTable;
window.generatePDFDocumentWithWorkHours = generatePDFDocumentWithWorkHours;

// =====================================
// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –ù–ê –§–£–ù–ö–¶–ò–ò–¢–ï
// –ü—Ä–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –¥–æ—Å—Ç—ä–ø–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –≤ –¥—Ä—É–≥–∏ –º–æ–¥—É–ª–∏
// =====================================

window.initializeWeeklyScheduleManager = initializeWeeklyScheduleManager;
window.refreshWeeklyScheduleForEmployee = refreshWeeklyScheduleForEmployee;
window.isWeeklyScheduleVisible = isWeeklyScheduleVisible;
window.getCurrentSelectedEmployeeId = getCurrentSelectedEmployeeId;
window.getCurrentEmployeeHourlyRate = getCurrentEmployeeHourlyRate;
window.getCurrentEmployeeWeeklyContractHours = getCurrentEmployeeWeeklyContractHours;
window.calculateWeeklyContractHours = calculateWeeklyContractHours;

// –ù–û–í–ò –§–£–ù–ö–¶–ò–ò –ó–ê –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò:
window.isPaidLeaveType = isPaidLeaveType; // –ù–û–í–ê: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –æ—Ç–ø—É—Å–∫—ä—Ç –µ –ø–ª–∞—Ç–µ–Ω
window.generateSummaryInfoWithPaidLeave = generateSummaryInfoWithPaidLeave; // –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø

// –§–£–ù–ö–¶–ò–ò –ó–ê –¢–û–ß–ù–û –ò–ó–ß–ò–°–õ–ï–ù–ò–ï –ù–ê –î–û–ì–û–í–û–†–ï–ù–ò–¢–ï –ß–ê–°–û–í–ï:
window.calculateContractHoursForMonth = calculateContractHoursForMonth;
window.getDaysInMonth = getDaysInMonth;
window.isLeapYearCheck = isLeapYearCheck;
window.countWeekendsInMonth = countWeekendsInMonth;
window.getDayNameBulgarian = getDayNameBulgarian;
window.getCurrentCalendarMonth = getCurrentCalendarMonth;

// –°–¢–ê–†–ò –§–£–ù–ö–¶–ò–ò (–ó–ê–ü–ê–ó–ï–ù–ò –ó–ê –°–™–í–ú–ï–°–¢–ò–ú–û–°–¢):
window.setupCalendarMonthChangeListener = setupCalendarMonthChangeListener;
window.updateWeeklyScheduleTitleWithDate = updateWeeklyScheduleTitleWithDate;
window.setupWeeklyScheduleToggle = setupWeeklyScheduleToggle;

console.log('‚úÖ Weekly Schedule Manager with PAID LEAVE support loaded successfully');
console.log('üí∞ Supported paid leave types:', Array.from(PAID_LEAVE_TYPES));
console.log('üö´ Unsupported leave types:', Array.from(UNPAID_LEAVE_TYPES));