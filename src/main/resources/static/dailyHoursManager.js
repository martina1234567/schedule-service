/**
 * IMPROVED DAILY HOURS MANAGER MODULE
 * –ü–æ–¥–æ–±—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å –ø–æ-–¥–æ–±—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏ –∏ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 */

/**
 * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –º–µ—Å–µ—Ü
 * –ü–û–î–û–ë–†–ï–ù–ê –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–π–ª–µ–Ω debug –∏ error handling
 *
 * @param {string} employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
 * @param {number} year - –≥–æ–¥–∏–Ω–∞ (–Ω–∞–ø—Ä. 2025)
 * @param {number} month - –º–µ—Å–µ—Ü –æ—Ç 1 –¥–æ 12 (–Ω–∞–ø—Ä. 7 –∑–∞ —é–ª–∏)
 * @returns {Promise<Object>} Promise –∫–æ–π—Ç–æ –≤—Ä—ä—â–∞ –æ–±–µ–∫—Ç —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 */
async function getDailyWorkHoursForEmployee(employeeId, year, month) {
    console.log(`üìÖ === –ó–ê–ü–û–ß–í–ê –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –î–ù–ï–í–ù–ò –ß–ê–°–û–í–ï ===`);
    console.log(`üë§ Employee ID: ${employeeId}`);
    console.log(`üìÖ Period: ${month}/${year}`);

    try {
        // –°–¢–™–ü–ö–ê 1: –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        if (!employeeId || !year || !month) {
            throw new Error(`Missing parameters: employeeId=${employeeId}, year=${year}, month=${month}`);
        }

        if (month < 1 || month > 12) {
            throw new Error(`Invalid month: ${month}. Must be between 1 and 12.`);
        }

        // –°–¢–™–ü–ö–ê 2: –ü—Ä–∞–≤–∏–º –∑–∞—è–≤–∫–∞ –∫—ä–º backend-–∞
        const apiUrl = `http://localhost:8080/api/weekly-schedule/${employeeId}/daily-hours?year=${year}&month=${month}`;
        console.log(`üì° Making API request to: ${apiUrl}`);

        const response = await fetch(apiUrl);
        console.log(`üì° Backend response status: ${response.status}`);

        // –°–¢–™–ü–ö–ê 3: –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∞
        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Backend error: ${response.status} - ${response.statusText}`);
            console.error(`‚ùå Error details: ${errorText}`);
            throw new Error(`HTTP ${response.status}: ${response.statusText}. Details: ${errorText}`);
        }

        // –°–¢–™–ü–ö–ê 4: –ü–∞—Ä—Å–∏—Ä–∞–º–µ JSON –æ—Ç–≥–æ–≤–æ—Ä–∞
        const data = await response.json();
        console.log('üìã Raw data received from backend:', JSON.stringify(data, null, 2));

        // –°–¢–™–ü–ö–ê 5: –í–∞–ª–∏–¥–∏—Ä–∞–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
        if (!data || !data.dailyWorkHours || !Array.isArray(data.dailyWorkHours)) {
            console.error('‚ùå Invalid data structure received:', data);
            throw new Error('Invalid data structure: missing dailyWorkHours array');
        }

        console.log(`üìä Received ${data.dailyWorkHours.length} daily records`);

        // –°–¢–™–ü–ö–ê 6: –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø–æ-–ª–µ—Å–Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞ –≤ PDF
        const processedData = processDailyHoursForPDF(data);

        // –°–¢–™–ü–ö–ê 7: –§–∏–Ω–∞–ª–µ–Ω debug –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        console.log(`‚úÖ Successfully processed daily hours:`);
        console.log(`   üìä Total days: ${processedData.summary.totalDays}`);
        console.log(`   üíº Work days: ${processedData.summary.workDays}`);
        console.log(`   üè† Days off: ${processedData.summary.dayOffs}`);
        console.log(`   üèñÔ∏è Leave days: ${processedData.summary.leaveDays}`);

        // Debug –ø—ä—Ä–≤–∏—Ç–µ –Ω—è–∫–æ–ª–∫–æ –¥–Ω–∏
        console.log(`üìã Sample processed days:`);
        processedData.tableRows.slice(0, 5).forEach((row, index) => {
            console.log(`   Day ${index + 1}: ${row.date} (${row.dayOfWeek}) - ${row.workHours}`);
        });

        return processedData;

    } catch (error) {
        console.error('‚ùå Error in getDailyWorkHoursForEmployee:', error);
        console.error('‚ùå Stack trace:', error.stack);

        // –í—Ä—ä—â–∞–º–µ –≥—Ä–µ—à–∫–∞ —Å –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        throw new Error(`Failed to get daily work hours: ${error.message}`);
    }
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–≤–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø–æ-–ª–µ—Å–Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞ –≤ PDF –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ
 * –ü–û–î–û–ë–†–ï–ù–ê –í–ï–†–°–ò–Ø —Å –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ-–¥–æ–±—Ä–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ
 *
 * @param {Object} data - –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç backend-–∞
 * @returns {Object} –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ PDF
 */
function processDailyHoursForPDF(data) {
    console.log('üîÑ === –ó–ê–ü–û–ß–í–ê –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –î–ê–ù–ù–ò –ó–ê PDF ===');

    try {
        // –°–¢–™–ü–ö–ê 1: –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        if (!data.dailyWorkHours || !Array.isArray(data.dailyWorkHours)) {
            throw new Error('Invalid input: missing dailyWorkHours array');
        }

        // –°–¢–™–ü–ö–ê 2: –°—ä–∑–¥–∞–≤–∞–º–µ –º–∞—Å–∏–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ –∑–∞ PDF —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
        const tableRows = data.dailyWorkHours.map((day, index) => {
            console.log(`üîÑ Processing day ${index + 1}:`, day);

            // –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
            if (!day.date) {
                console.warn(`‚ö†Ô∏è Missing date for day ${index + 1}`);
                return null;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ (–Ω–∞–ø—Ä. "01.07" –∑–∞ 1 —é–ª–∏)
            const formattedDate = formatDateForTable(day.date);

            // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–µ–Ω—è –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ü–æ–Ω, –í—Ç, –°—Ä...)
            const dayOfWeek = getDayOfWeekShort(day.date);

            // –°–¢–™–ü–ö–ê 3: –û–ø—Ä–µ–¥–µ–ª—è–º–µ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ —Å—ä—Å —Å–ø–µ—Ü–∏–∞–ª–Ω–∞ –ª–æ–≥–∏–∫–∞
            let workHoursText = determineWorkHoursText(day);

            console.log(`üìä Day ${index + 1}: ${formattedDate} (${dayOfWeek}) - ${workHoursText}`);

            return {
                date: formattedDate,
                fullDate: day.date,
                dayOfWeek: dayOfWeek,
                workHours: workHoursText,
                startTime: day.startTime || null,
                endTime: day.endTime || null,
                activity: day.activity || null,
                leaveType: day.leaveType || null,
                isWorkDay: day.isWorkDay || false,
                isDayOff: day.isDayOff || false,
                // –ó–∞ –ø–æ-–ª–µ—Å–Ω–æ —Å—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ –≤ PDF
                cssClass: getCSSClassForDay(day)
            };
        }).filter(row => row !== null); // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏—Ç–µ —Ä–µ–¥–æ–≤–µ

        // –°–¢–™–ü–ö–ê 4: –°—ä–∑–¥–∞–≤–∞–º–µ –æ–±–æ–±—â–µ–Ω–∏ –¥–∞–Ω–Ω–∏
        const summary = createSummaryData(data, tableRows);

        console.log('üìã PDF data processing completed:', {
            totalRows: tableRows.length,
            workDays: summary.workDays,
            dayOffs: summary.dayOffs,
            leaveDays: summary.leaveDays
        });

        return {
            tableRows: tableRows,
            summary: summary,
            originalData: data // –ó–∞–ø–∞–∑–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∞–∫–æ —Å–∞ –Ω—É–∂–Ω–∏
        };

    } catch (error) {
        console.error('‚ùå Error in processDailyHoursForPDF:', error);
        throw new Error(`Failed to process daily hours for PDF: ${error.message}`);
    }
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–ø—Ä–µ–¥–µ–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 *
 * @param {Object} day - –æ–±–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–µ–Ω—è
 * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω —Ç–µ–∫—Å—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 */
function determineWorkHoursText(day) {
    console.log(`üîç Determining work hours for day:`, day);

    // –°–õ–£–ß–ê–ô 1: –ê–∫–æ –∏–º–∞ —Ç–∏–ø –æ—Ç–ø—É—Å–∫ - –ø–æ–∫–∞–∑–≤–∞–º–µ –≥–æ –¥–∏—Ä–µ–∫—Ç–Ω–æ
    if (day.leaveType && day.leaveType.trim() !== '') {
        console.log(`   - Leave type detected: ${day.leaveType}`);
        return day.leaveType;
    }

    // –°–õ–£–ß–ê–ô 2: ‚úÖ –ü–û–ü–†–ê–í–ö–ê - –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∞–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
    // –ê–∫–æ –∏–º–∞ startTime –∏ endTime - —Ç–æ–≤–∞ –µ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥–∞–ª–∏ –µ —É–∏–∫–µ–Ω–¥!
    if (day.startTime && day.endTime) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ
        const startTime = formatTimeForDisplay(day.startTime);
        const endTime = formatTimeForDisplay(day.endTime);
        const timeText = `${startTime} - ${endTime}`;

        console.log(`   - ‚úÖ REAL WORK HOURS found: ${timeText} (–¥–∞–∂–µ –≤ —É–∏–∫–µ–Ω–¥!)`);
        return timeText;
    }

    // –°–õ–£–ß–ê–ô 3: –ê–∫–æ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω –Ω–æ –Ω—è–º–∞ —á–∞—Å–æ–≤–µ (—Å—Ç—Ä–∞–Ω–µ–Ω —Å–ª—É—á–∞–π)
    if (day.isWorkDay) {
        console.log(`   - Marked as work day but no hours - showing generic work hours`);
        return 'Work Day'; // –ò–ª–∏ –Ω—è–∫–∞–∫—ä–≤ default —á–∞—Å
    }

    // –°–õ–£–ß–ê–ô 4: –ê–∫–æ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω –∫–∞—Ç–æ –ø–æ—á–∏–≤–µ–Ω –¥–µ–Ω
    if (day.isDayOff) {
        console.log(`   - Day off detected`);
        return 'Day off';
    }

    // –°–õ–£–ß–ê–ô 5: ‚úÖ –ü–û–ü–†–ê–í–ö–ê - –°–ê–ú–û –°–ï–ì–ê –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ —É–∏–∫–µ–Ω–¥ (–∞–∫–æ –Ω—è–º–∞ —Ä–µ–∞–ª–Ω–∏ —Å–º–µ–Ω–∏)
    // –¢–∞–∑–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ –ø—Ä–∞–≤–∏ —Å–ª–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞ —Ä–µ–∞–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
    const date = new Date(day.date);
    const dayOfWeek = date.getDay(); // 0 = –Ω–µ–¥–µ–ª—è, 6 = —Å—ä–±–æ—Ç–∞
    if (day.startTime && day.endTime) {
        return `${startTime} - ${endTime}`; // ‚úÖ –ü—ä—Ä–≤–æ –≥–ª–µ–¥–∞ —Å–º–µ–Ω–∏—Ç–µ!
    }

    // –°–õ–£–ß–ê–ô 6: –ù–µ–ø–æ–∑–Ω–∞—Ç —Å–ª—É—á–∞–π - –≤—Ä—ä—â–∞–º–µ day off –∫–∞—Ç–æ default
    console.log(`   - Unknown case, defaulting to Day off`);
    return 'Day off';
}


/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ –æ–±–æ–±—â–µ–Ω–∏ –¥–∞–Ω–Ω–∏
 * @param {Object} data - –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç backend
 * @param {Array} tableRows - –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏ —Ä–µ–¥–æ–≤–µ
 * @returns {Object} –æ–±–æ–±—â–µ–Ω–∏ –¥–∞–Ω–Ω–∏
 */
function createSummaryData(data, tableRows) {
    const summary = {
        employeeId: data.employeeId || 'Unknown',
        year: data.year || new Date().getFullYear(),
        month: data.month || new Date().getMonth() + 1,
        monthName: data.monthName || 'Unknown',
        totalDays: tableRows.length,

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        workDays: tableRows.filter(row => row.isWorkDay).length,
        dayOffs: tableRows.filter(row => row.workHours === 'Day off').length,
        leaveDays: tableRows.filter(row => row.leaveType && row.leaveType.trim() !== '').length,
        weekends: tableRows.filter(row => row.workHours === 'Weekend').length
    };

    // –î–æ–±–∞–≤—è–º–µ –ø–æ–ª–µ–∑–Ω–∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
    summary.workPercentage = summary.totalDays > 0 ?
        ((summary.workDays / summary.totalDays) * 100).toFixed(1) : '0.0';

    summary.firstWorkDay = tableRows.find(row => row.isWorkDay)?.fullDate || null;
    summary.lastWorkDay = tableRows.slice().reverse().find(row => row.isWorkDay)?.fullDate || null;

    return summary;
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥–∞—Ç–∞ –∑–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ (–î–î.–ú–ú)
 * –ü–û–î–û–ë–†–ï–ù–ê –í–ï–†–°–ò–Ø —Å –ø–æ-–¥–æ–±—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏
 *
 * @param {string} dateString - –¥–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
 * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–∞ –¥–∞—Ç–∞ (–î–î.–ú–ú)
 */
function formatDateForTable(dateString) {
    try {
        const date = new Date(dateString + 'T00:00:00'); // –î–æ–±–∞–≤—è–º–µ —á–∞—Å –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º timezone –ø—Ä–æ–±–ª–µ–º–∏
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        return `${day}.${month}`;
    } catch (error) {
        console.warn('‚ö†Ô∏è Error formatting date:', dateString, error);
        return dateString; // –í—Ä—ä—â–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∫–∞—Ç–æ fallback
    }
}
function formatTimeForDisplay(timeString) {
    if (!timeString) return '';

    // –ê–∫–æ –µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç "13:30:00", –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å–µ–∫—É–Ω–¥–∏—Ç–µ
    if (timeString.includes(':')) {
        const parts = timeString.split(':');
        return `${parts[0]}:${parts[1]}`;
    }

    return timeString;
}
/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ —Å—ä–∫—Ä–∞—Ç–µ–Ω–æ—Ç–æ –∏–º–µ –Ω–∞ –¥–µ–Ω—è –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞
 * –ü–û–î–û–ë–†–ï–ù–ê –í–ï–†–°–ò–Ø —Å—ä—Å –∑–∞—â–∏—Ç–∞ –æ—Ç –≥—Ä–µ—à–∫–∏
 *
 * @param {string} dateString - –¥–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
 * @returns {string} —Å—ä–∫—Ä–∞—Ç–µ–Ω–æ –∏–º–µ –Ω–∞ –¥–µ–Ω—è (Mon, Tue, Wed...)
 */
function getDayOfWeekShort(dateString) {
    try {
        const date = new Date(dateString + 'T00:00:00'); // –î–æ–±–∞–≤—è–º–µ —á–∞—Å –∑–∞ timezone
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        return days[date.getDay()];
    } catch (error) {
        console.warn('‚ö†Ô∏è Error getting day of week:', dateString, error);
        return 'Unknown';
    }
}

/**
 * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –û–ø—Ä–µ–¥–µ–ª—è CSS –∫–ª–∞—Å–∞ –∑–∞ –¥–µ–Ω—è (–∑–∞ —Å—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ)
 * @param {Object} day - –æ–±–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–µ–Ω—è
 * @returns {string} CSS –∫–ª–∞—Å
 */
function getCSSClassForDay(day) {
    if (day.leaveType && day.leaveType.trim() !== '') {
        return 'leave-day';
    } else if (day.isWorkDay) {
        return 'work-day';
    } else if (day.isDayOff) {
        return 'day-off';
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ —É–∏–∫–µ–Ω–¥
        const date = new Date(day.date);
        const dayOfWeek = date.getDay();
        if (dayOfWeek === 0 || dayOfWeek === 6) {
            return 'weekend';
        }
        return 'unknown-day';
    }
}

// =====================================
// –ï–ö–°–ü–û–†–¢–ò–†–ê–ù–ï –ù–ê –§–£–ù–ö–¶–ò–ò–¢–ï
// –ü—Ä–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –¥–æ—Å—Ç—ä–ø–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ
// =====================================

window.getDailyWorkHoursForEmployee = getDailyWorkHoursForEmployee;
window.processDailyHoursForPDF = processDailyHoursForPDF;

// –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
window.formatDateForTable = formatDateForTable;
window.getDayOfWeekShort = getDayOfWeekShort;
window.getCSSClassForDay = getCSSClassForDay;
window.determineWorkHoursText = determineWorkHoursText;
window.createSummaryData = createSummaryData;
window.formatTimeForDisplay = formatTimeForDisplay;

console.log('‚úÖ IMPROVED Daily Hours Manager loaded successfully!');
console.log('üîß This version has better error handling and detailed debug information');

/**
 * –ü–û–î–û–ë–†–ï–ù–ò–Ø –í –¢–ê–ó–ò –í–ï–†–°–ò–Ø:
 *
 * 1. ‚úÖ –ü–æ-–¥–æ–±—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
 * 2. ‚úÖ –î–µ—Ç–∞–π–ª–µ–Ω debug –Ω–∞ –≤—Å—è–∫–∞ —Å—Ç—ä–ø–∫–∞
 * 3. ‚úÖ –ü–æ-–¥–æ–±—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è
 * 4. ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
 * 5. ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç timezone –ø—Ä–æ–±–ª–µ–º–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∏
 * 6. ‚úÖ Fallback —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Å–∏—á–∫–∏ —Å–ª—É—á–∞–∏
 * 7. ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –∑–∞ –≤—Å—è–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è
 */