package com.example.schedule.controller;

import com.example.schedule.dto.EventDto;
import com.example.schedule.dto.WeeklyScheduleDto;
import com.example.schedule.entity.Employee;
import com.example.schedule.entity.Event;
import com.example.schedule.exception.ValidationException;
import com.example.schedule.repository.EventRepository;
import com.example.schedule.repository.EmployeeRepository;
import com.example.schedule.service.ValidationService;
import com.example.schedule.service.WeeklyScheduleService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/events")
@CrossOrigin(origins = "http://localhost:3000")  // –†–∞–∑—Ä–µ—à–∞–≤–∞ –∑–∞—è–≤–∫–∏ –æ—Ç React/HTML
public class EventController {

    private final EventRepository eventRepository;
    private final EmployeeRepository employeeRepository;
    private final ValidationService validationService; // –ù–û–í–ê –ó–ê–í–ò–°–ò–ú–û–°–¢
    private final WeeklyScheduleService weeklyScheduleService;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –≤—Å–∏—á–∫–∏ dependencies
     * @param eventRepository - Repository –∑–∞ —Å—ä–±–∏—Ç–∏—è
     * @param employeeRepository - Repository –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏
     * @param validationService - –°–µ—Ä–≤–∏—Å –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
     */
    public EventController(EventRepository eventRepository,
                           EmployeeRepository employeeRepository,
                           ValidationService validationService,
                           WeeklyScheduleService weeklyScheduleService) {
        this.eventRepository = eventRepository;
        this.employeeRepository = employeeRepository;
        this.validationService = validationService; // –ò–ù–ñ–ï–ö–¢–ò–†–ê–ú–ï VALIDATION SERVICE
        this.weeklyScheduleService = weeklyScheduleService;
    }

    /**
     * GET –º–µ—Ç–æ–¥ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è
     * @return List<EventDto> - –°–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è
     */
    @GetMapping
    public List<EventDto> getAllEvents() {
        return eventRepository.findAllEventDtos();
    }

    /**
     * –û–ë–ù–û–í–ï–ù POST –ú–ï–¢–û–î –ó–ê –°–™–ó–î–ê–í–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–ï –° –í–ê–õ–ò–î–ê–¶–ò–Ø
     * –î–æ–±–∞–≤–µ–Ω–∞ –µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –ø—Ä–µ–¥–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ
     *
     * @param event - –°—ä–±–∏—Ç–∏–µ—Ç–æ –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ
     * @return ResponseEntity<Event> - –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
     */
    @PostMapping
    public ResponseEntity<?> createEvent(@RequestBody Event event) {
        System.out.println("üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ: " + event.getTitle());

        try {
            // –û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (event.getEmployee() == null || event.getEmployee().getId() == null) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Employee information is required"));
            }

            // –ù–∞–º–∏—Ä–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
            Optional<Employee> employeeOpt = employeeRepository.findById(event.getEmployee().getId());
            if (employeeOpt.isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Employee not found"));
            }

            Employee employee = employeeOpt.get();
            event.setEmployee(employee); // –ó–∞–¥–∞–≤–∞–º–µ –ø—ä–ª–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è

            // –ü–û–ü–†–ê–í–ö–ê: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ title-–∞ –æ—Ç –∑–∞—è–≤–∫–∞—Ç–∞ –∏–ª–∏ —Å–∞–º–æ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ
            if (event.getTitle() == null || event.getTitle().trim().isEmpty()) {
                // –ê–∫–æ –Ω—è–º–∞ title, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ
                event.setTitle(employee.getName().split(" ")[0]);
            } else {
                // –ê–∫–æ –∏–º–∞ title, –≥–æ –∑–∞–ø–∞–∑–≤–∞–º–µ
                String requestTitle = event.getTitle().trim();
                // –ó–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–∞–º–æ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ –∞–∫–æ title-–∞ –µ —Ç–≤—ä—Ä–¥–µ –¥—ä–ª—ä–≥
                if (requestTitle.length() > 20) {
                    event.setTitle(employee.getName().split(" ")[0]);
                }
                // –ò–Ω–∞—á–µ –∑–∞–ø–∞–∑–≤–∞–º–µ title-–∞ –æ—Ç –∑–∞—è–≤–∫–∞—Ç–∞ (–∫–æ–π—Ç–æ –≤–µ—á–µ –µ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ)
            }

            System.out.println("üë§ Final event title set to: " + event.getTitle());

            String leaveType = event.getLeaveType();

            // –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –æ—Ç–ø—É—Å–∫–∏
            if (leaveType != null && !leaveType.isEmpty()) {
                // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ start –∫–∞—Ç–æ –∏–∑—Ç–æ—á–Ω–∏–∫ –Ω–∞ –¥–∞—Ç–∞, –∞–∫–æ –µ null ‚Äî –æ—Ç–∫–∞–∑–≤–∞–º–µ
                if (event.getStart() == null) {
                    return ResponseEntity.badRequest()
                            .body(createErrorResponse("Start date is required"));
                }

                LocalDate selectedDate = event.getStart().toLocalDate();
                LocalDateTime dateTimeAtMidnight = selectedDate.atTime(0, 0); // 00:00

                event.setStart(dateTimeAtMidnight);
                event.setEnd(dateTimeAtMidnight);
                event.setActivity(null); // Activity –Ω–µ –µ –Ω—É–∂–Ω–æ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫
            }

            // ========================================
            // –ù–û–í–ê –ß–ê–°–¢: –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –†–ê–ë–û–¢–ù–ò–¢–ï –ß–ê–°–û–í–ï
            // ========================================

            System.out.println("üîç –ó–∞–ø–æ—á–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ...");

            // –ò–∑–≤—ä—Ä—à–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ (false = –Ω–µ –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ)
            ValidationService.ValidationResult validationResult = validationService.validateEvent(event, true);

            if (!validationResult.isValid()) {
                // –ê–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –º–∏–Ω–µ, –≤—Ä—ä—â–∞–º–µ –≥—Ä–µ—à–∫–∞
                System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞: " + validationResult.getErrors());
                return ResponseEntity.badRequest()
                        .body(createErrorResponse(validationResult.getFirstError()));
            }

            System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // ========================================
            // –ó–ê–ü–ê–ó–í–ê–ù–ï –í –ë–ê–ó–ê–¢–ê –î–ê–ù–ù–ò
            // ========================================

            // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—ä–±–∏—Ç–∏–µ—Ç–æ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
            Event savedEvent = eventRepository.save(event);

            System.out.println("‚úÖ –°—ä–±–∏—Ç–∏–µ—Ç–æ –µ –∑–∞–ø–∞–∑–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å ID: " + savedEvent.getId());
            // ========================================
            // –ù–û–í–ê –ß–ê–°–¢: –ê–ö–¢–£–ê–õ–ò–ó–ò–†–ê–ú–ï –°–ï–î–ú–ò–ß–ù–ò–Ø –ì–†–ê–§–ò–ö
            // ========================================
            try {
                // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ç–æ–∑–∏ —Å–ª—É–∂–∏—Ç–µ–ª
                weeklyScheduleService.updateWeeklyScheduleForEvent(
                        employee.getId(),
                        savedEvent.getStart().toLocalDate()
                );
                System.out.println("‚úÖ –°–µ–¥–º–∏—á–Ω–∏—è—Ç –≥—Ä–∞—Ñ–∏–∫ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è    private final EventRepository eventRepository");
                final EmployeeRepository employeeRepository;
                final ValidationService validationService; // –ù–û–í–ê –ó–ê–í–ò–°–ò–ú–û–°–¢
                final WeeklyScheduleService weeklyScheduleService; // –î–û–ë–ê–í–Ø–ú–ï WEEKLY SCHEDULE SERVICE
            }


            return ResponseEntity.status(HttpStatus.CREATED).body(savedEvent);

        } catch (ValidationException e) {
            // –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ –≥—Ä–µ—à–∫–∏
            System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getFirstError()));

        } catch (Exception e) {
            // –û–±—â–∏ –≥—Ä–µ—à–∫–∏
            System.out.println("‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred"));
        }
    }

    /**
     * GET –º–µ—Ç–æ–¥ –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ –ø–æ ID
     * @param id - ID –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
     * @return ResponseEntity<Event> - –°—ä–±–∏—Ç–∏–µ—Ç–æ –∏–ª–∏ 404
     */
    @GetMapping("/{id}")
    public ResponseEntity<Event> getEventById(@PathVariable Long id) {
        return eventRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * –û–ë–ù–û–í–ï–ù PUT –ú–ï–¢–û–î –ó–ê –†–ï–î–ê–ö–¢–ò–†–ê–ù–ï –ù–ê –°–™–ë–ò–¢–ò–ï –° –í–ê–õ–ò–î–ê–¶–ò–Ø
     * –î–æ–±–∞–≤–µ–Ω–∞ –µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –ø—Ä–µ–¥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ
     *
     * @param id - ID –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
     * @param updatedEvent - –ù–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
     * @return ResponseEntity<?> - –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
     */
    @PutMapping("/{id}")
    public ResponseEntity<?> updateEvent(@PathVariable Long id, @RequestBody Event updatedEvent) {
        System.out.println("üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ —Å ID: " + id);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—ä–±–∏—Ç–∏–µ—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            Optional<Event> existingOpt = eventRepository.findById(id);
            if (existingOpt.isEmpty()) {
                return ResponseEntity.notFound().build();
            }

            Event existing = existingOpt.get();

            // –í–ê–ñ–ù–û: –ó–∞–¥–∞–≤–∞–º–µ ID –Ω–∞ updatedEvent –∑–∞ –¥–∞ –º–æ–∂–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –¥–∞ –≥–æ –∏–∑–∫–ª—é—á–∏
            updatedEvent.setId(id);
            updatedEvent.setEmployee(existing.getEmployee()); // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è

            // –ü–û–ü–†–ê–í–ö–ê: –ù–µ –ø—Ä–µ–∑–∞–ø–∏—Å–≤–∞–º–µ title-–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            if (updatedEvent.getTitle() == null || updatedEvent.getTitle().trim().isEmpty()) {
                // –ê–∫–æ –Ω—è–º–∞ title, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—ä—Ä–≤–æ—Ç–æ –∏–º–µ
                updatedEvent.setTitle(existing.getEmployee().getName().split(" ")[0]);
            }

            System.out.println("üë§ Updated event title set to: " + updatedEvent.getTitle());

            System.out.println("üîß DEBUG INFO –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ:");
            System.out.println("  - Existing event ID: " + existing.getId());
            System.out.println("  - Updated event ID: " + updatedEvent.getId());
            System.out.println("  - Employee ID: " + updatedEvent.getEmployee().getId());

            // –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –æ—Ç–ø—É—Å–∫–∏
            if (updatedEvent.getLeaveType() != null && !updatedEvent.getLeaveType().isEmpty()) {
                // –ó–∞ –æ—Ç–ø—É—Å–∫–∏ –∑–∞–¥–∞–≤–∞–º–µ –≤—Ä–µ–º–µ 00:00
                if (updatedEvent.getStart() != null) {
                    LocalDate selectedDate = updatedEvent.getStart().toLocalDate();
                    LocalDateTime dateTimeAtMidnight = selectedDate.atTime(0, 0);
                    updatedEvent.setStart(dateTimeAtMidnight);
                    updatedEvent.setEnd(dateTimeAtMidnight);
                }
                updatedEvent.setActivity(null);
            }

            // ========================================
            // –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –†–ê–ë–û–¢–ù–ò–¢–ï –ß–ê–°–û–í–ï
            // ========================================

            System.out.println("üîç –ó–∞–ø–æ—á–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ...");

            ValidationService.ValidationResult validationResult = validationService.validateEvent(updatedEvent, true);

            if (!validationResult.isValid()) {
                System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞: " + validationResult.getErrors());
                return ResponseEntity.badRequest()
                        .body(createErrorResponse(validationResult.getFirstError()));
            }

            System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // ========================================
            // –ó–ê–ü–ê–ó–í–ê–ù–ï –ù–ê –ü–†–û–ú–ï–ù–ò–¢–ï
            // ========================================

            // –ó–∞–ø–∞–∑–≤–∞–º–µ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
            Event saved = eventRepository.save(updatedEvent);

            System.out.println("‚úÖ –°—ä–±–∏—Ç–∏–µ—Ç–æ –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");

            // ========================================
            // –ù–û–í–ê –ß–ê–°–¢: –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê –°–ï–î–ú–ò–ß–ù–ò–Ø –ì–†–ê–§–ò–ö
            // ========================================
            try {
                // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ç–æ–∑–∏ —Å–ª—É–∂–∏—Ç–µ–ª
                weeklyScheduleService.updateWeeklyScheduleForEvent(
                        saved.getEmployee().getId(),
                        saved.getStart().toLocalDate()
                );
                System.out.println("‚úÖ –°–µ–¥–º–∏—á–Ω–∏—è—Ç –≥—Ä–∞—Ñ–∏–∫ –µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω —Å–ª–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫: " + e.getMessage());
                // –ù–µ —Å–ø–∏—Ä–∞–º–µ –ø—Ä–æ—Ü–µ—Å–∞, —Å–∞–º–æ –ª–æ–≥–≤–∞–º–µ –≥—Ä–µ—à–∫–∞—Ç–∞
            }

            return ResponseEntity.ok(saved);

        } catch (ValidationException e) {
            System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getFirstError()));

        } catch (Exception e) {
            System.out.println("‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred"));
        }
    }
    /**
     * DELETE –º–µ—Ç–æ–¥ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ
     * @param id - ID –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ
     * @return ResponseEntity<Void> - –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEvent(@PathVariable Long id) {
        System.out.println("üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ —Å ID: " + id);

        if (eventRepository.existsById(id)) {
            eventRepository.deleteById(id);
            System.out.println("‚úÖ –°—ä–±–∏—Ç–∏–µ—Ç–æ –µ –∏–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ");
            return ResponseEntity.noContent().build();
        } else {
            System.out.println("‚ùå –°—ä–±–∏—Ç–∏–µ—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ");
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ error response –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
     * @param message - –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞
     * @return Map<String, String> - Error response
     */
    private Map<String, String> createErrorResponse(String message) {
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", message);
        errorResponse.put("timestamp", LocalDateTime.now().toString());
        return errorResponse;
    }
    @GetMapping("/schedules")
    public List<WeeklyScheduleDto> getWeeklySchedules() {
        return weeklyScheduleService.getAllWeeklySchedules();
    }

}