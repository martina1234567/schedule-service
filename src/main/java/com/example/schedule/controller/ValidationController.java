package com.example.schedule.controller;

import com.example.schedule.entity.Event;
import com.example.schedule.service.ValidationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.schedule.repository.EventRepository;

import java.util.List;
import java.util.stream.Collectors;


import java.util.Map;
import java.util.HashMap;

/**
 * VALIDATION CONTROLLER –ó–ê –¢–ï–°–¢–í–ê–ù–ï
 * –¢–æ–∑–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è–≤–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –±–µ–∑ –¥–∞ —Å–µ –∑–∞–ø–∞–∑–≤–∞—Ç –¥–∞–Ω–Ω–∏ –≤ –±–∞–∑–∞—Ç–∞
 */
@RestController
@RequestMapping("/api/validate")
@CrossOrigin(origins = "http://localhost:3000")
public class ValidationController {

    @Autowired
    private ValidationService validationService;

    /**
     * –î–û–ë–ê–í–ò –¢–û–ó–ò –ú–ï–¢–û–î –ö–™–ú ValidationController.java
     * –ü–æ—á–∏—Å—Ç–≤–∞ —Å—ä–±–∏—Ç–∏—è —Å null start/end –¥–∞—Ç–∏
     */

    @Autowired
    private EventRepository eventRepository;

    /**
     * ENDPOINT –ó–ê –ü–û–ß–ò–°–¢–í–ê–ù–ï –ù–ê –ü–û–í–†–ï–î–ï–ù–ò –î–ê–ù–ù–ò
     * –í–ù–ò–ú–ê–ù–ò–ï: –ò–∑–ø–æ–ª–∑–≤–∞–π —Å–∞–º–æ –∞–∫–æ —Å–∏ —Å–∏–≥—É—Ä–µ–Ω —á–µ –∏—Å–∫–∞—à –¥–∞ –∏–∑—Ç—Ä–∏–µ—à –ø–æ–≤—Ä–µ–¥–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏!
     */
    @PostMapping("/event")
    public ResponseEntity<?> validateEvent(@RequestBody Event event) {
        System.out.println("üîç –¢–µ—Å—Ç–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ: " + event.getTitle());

        try {
            // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞–ª–∏ –µ update
            boolean isUpdate = (event.getId() != null);

            System.out.println("üîß ValidationController DEBUG:");
            System.out.println("  - event.getId(): " + event.getId());
            System.out.println("  - Auto-determined isUpdate: " + isUpdate);

            // –ò–∑–≤—ä—Ä—à–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
            ValidationService.ValidationResult result = validationService.validateEvent(event, isUpdate);

            // –°—ä–∑–¥–∞–≤–∞–º–µ response
            Map<String, Object> response = new HashMap<>();
            response.put("valid", result.isValid());
            response.put("errors", result.getErrors());
            response.put("isUpdate", isUpdate); // –î–æ–±–∞–≤—è–º–µ –∑–∞ debugging

            if (result.isValid()) {
                response.put("message", "Validation passed successfully");
                System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                return ResponseEntity.ok(response);
            } else {
                response.put("message", "Validation failed");
                System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞: " + result.getErrors());
                return ResponseEntity.badRequest().body(response);
            }

        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è: " + e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("valid", false);
            errorResponse.put("error", "Validation error: " + e.getMessage());
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }
}