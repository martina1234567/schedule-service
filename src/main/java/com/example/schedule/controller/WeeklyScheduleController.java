package com.example.schedule.controller;

import com.example.schedule.dto.WeeklyScheduleDto;
import com.example.schedule.service.WeeklyScheduleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.schedule.dto.DailyWorkHoursDto;

import java.time.temporal.ChronoUnit;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * REST Controller –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏—Ü–∏ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏—Ç–µ
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—è endpoints –∑–∞ —á–µ—Ç–µ–Ω–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
 */
@RestController
@RequestMapping("/api/weekly-schedule")
@CrossOrigin(origins = "http://localhost:3000") // –ü–æ–∑–≤–æ–ª—è–≤–∞ –∑–∞—è–≤–∫–∏ –æ—Ç frontend
public class WeeklyScheduleController {

    @Autowired
    private WeeklyScheduleService weeklyScheduleService;

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å–µ—Ü
     * GET /api/weekly-schedule/{employeeId}?year=2025&month=6
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param year       - –≥–æ–¥–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Ç–µ–∫—É—â–∞—Ç–∞)
     * @param month      - –º–µ—Å–µ—Ü 1-12 (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Ç–µ–∫—É—â–∏—è)
     * @return —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –º–µ—Å–µ—Ü–∞
     */
    @GetMapping("/{employeeId}")
    public ResponseEntity<?> getWeeklyScheduleForEmployee(
            @PathVariable Long employeeId,
            @RequestParam(required = false) Integer year,
            @RequestParam(required = false) Integer month) {

        System.out.println(String.format("üìÖ GET request for weekly schedule - Employee: %d, Year: %d, Month: %d",
                employeeId, year, month));

        try {
            // –ê–∫–æ –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–∞ –≥–æ–¥–∏–Ω–∞ –∏–ª–∏ –º–µ—Å–µ—Ü, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∏—Ç–µ
            if (year == null || month == null) {
                YearMonth current = YearMonth.now();
                year = year != null ? year : current.getYear();
                month = month != null ? month : current.getMonthValue();
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (month < 1 || month > 12) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Invalid month. Must be between 1 and 12."));
            }

            if (year < 2020 || year > 2030) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Invalid year. Must be between 2020 and 2030."));
            }

            // –ü–æ–ª—É—á–∞–≤–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –æ—Ç service
            List<WeeklyScheduleDto> weeklyData = weeklyScheduleService.getWeeklyScheduleForMonth(employeeId, year, month);

            System.out.println(String.format("‚úÖ Returning %d weekly records for employee %d (%d/%d)",
                    weeklyData.size(), employeeId, month, year));

            // –°—ä–∑–¥–∞–≤–∞–º–µ response —Å –º–µ—Ç–∞–¥–∞–Ω–Ω–∏
            Map<String, Object> response = new HashMap<>();
            response.put("employeeId", employeeId);
            response.put("year", year);
            response.put("month", month);
            response.put("monthName", getMonthName(month));
            response.put("totalWeeks", weeklyData.size());
            response.put("weeklySchedule", weeklyData);

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            // –ì—Ä–µ—à–∫–∞ –æ—Ç service —Å–ª–æ—è (–Ω–∞–ø—Ä. —Å–ª—É–∂–∏—Ç–µ–ª –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω)
            System.err.println("‚ùå Business logic error: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getMessage()));

        } catch (Exception e) {
            // –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Unexpected error in getWeeklyScheduleForEmployee: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred while fetching weekly schedule."));
        }
    }

    /**
     * –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å–µ–¥–º–∏—á–µ–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–ª–µ–¥ –ø—Ä–æ–º—è–Ω–∞ –≤ —Å—ä–±–∏—Ç–∏–µ
     * POST /api/weekly-schedule/update
     *
     * @param request - –∑–∞—è–≤–∫–∞—Ç–∞ —Å –¥–∞–Ω–Ω–∏ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
     * @return –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ —É—Å–ø–µ—à–Ω–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
     */
    @PostMapping("/update")
    public ResponseEntity<?> updateWeeklySchedule(@RequestBody UpdateScheduleRequest request) {
        System.out.println(String.format("üîÑ POST request to update weekly schedule - Employee: %d, Date: %s",
                request.getEmployeeId(), request.getEventDate()));

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (request.getEmployeeId() == null) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Employee ID is required."));
            }

            if (request.getEventDate() == null) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Event date is required."));
            }

            // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫
            weeklyScheduleService.updateWeeklyScheduleForEvent(request.getEmployeeId(), request.getEventDate());

            System.out.println("‚úÖ Weekly schedule updated successfully");

            // –°—ä–∑–¥–∞–≤–∞–º–µ success response
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Weekly schedule updated successfully");
            response.put("employeeId", request.getEmployeeId());
            response.put("eventDate", request.getEventDate());
            response.put("updatedAt", LocalDate.now());

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            // –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Business logic error in updateWeeklySchedule: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getMessage()));

        } catch (Exception e) {
            // –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Unexpected error in updateWeeklySchedule: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred while updating weekly schedule."));
        }
    }

    /**
     * –ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—á–Ω–∏ –≥—Ä–∞—Ñ–∏—Ü–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª
     * POST /api/weekly-schedule/{employeeId}/recalculate
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @return –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–∏–∑—á–∏—Å–ª–µ–Ω–∏–µ
     */
    @PostMapping("/{employeeId}/recalculate")
    public ResponseEntity<?> recalculateWeeklySchedules(@PathVariable Long employeeId) {
        System.out.println(String.format("üîÑ POST request to recalculate all schedules for employee %d", employeeId));

        try {
            // –ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—á–Ω–∏—Ü–∏ –≥—Ä–∞—Ñ–∏—Ü–∏
            weeklyScheduleService.recalculateAllWeeklySchedules(employeeId);

            System.out.println("‚úÖ All weekly schedules recalculated successfully");

            // Success response
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "All weekly schedules recalculated successfully");
            response.put("employeeId", employeeId);
            response.put("recalculatedAt", LocalDate.now());

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            // –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Business logic error in recalculateWeeklySchedules: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getMessage()));

        } catch (Exception e) {
            // –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Unexpected error in recalculateWeeklySchedules: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred while recalculating schedules."));
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –∫—Ä–∞—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª
     * GET /api/weekly-schedule/{employeeId}/stats?year=2025
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param year       - –≥–æ–¥–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
     * @return —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥–∏–Ω–∞—Ç–∞
     */
    @GetMapping("/{employeeId}/stats")
    public ResponseEntity<?> getEmployeeStats(@PathVariable Long employeeId,
                                              @RequestParam(required = false) Integer year) {
        System.out.println(String.format("üìä GET request for employee stats - Employee: %d, Year: %d",
                employeeId, year));

        try {
            // –ê–∫–æ –Ω—è–º–∞ –≥–æ–¥–∏–Ω–∞, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞
            if (year == null) {
                year = LocalDate.now().getYear();
            }

            // TODO: –ú–æ–∂–µ—à –¥–∞ –¥–æ–±–∞–≤–∏—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∞ —Ç—É–∫
            // –ó–∞ —Å–µ–≥–∞ –≤—Ä—ä—â–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Map<String, Object> stats = new HashMap<>();
            stats.put("employeeId", employeeId);
            stats.put("year", year);
            stats.put("message", "Statistics feature coming soon");

            return ResponseEntity.ok(stats);

        } catch (Exception e) {
            System.err.println("‚ùå Error getting employee stats: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("Error fetching employee statistics."));
        }
    }

    /**
     * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ error response
     *
     * @param message - —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ –≥—Ä–µ—à–∫–∞
     * @return error response –æ–±–µ–∫—Ç
     */
    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("error", message);
        errorResponse.put("timestamp", LocalDate.now().toString());
        return errorResponse;
    }

    /**
     * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –í—Ä—ä—â–∞ –∏–º–µ—Ç–æ –Ω–∞ –º–µ—Å–µ—Ü–∞ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏
     *
     * @param month - –Ω–æ–º–µ—Ä –Ω–∞ –º–µ—Å–µ—Ü–∞ (1-12)
     * @return –∏–º–µ—Ç–æ –Ω–∞ –º–µ—Å–µ—Ü–∞
     */
    private String getMonthName(Integer month) {
        String[] monthNames = {
                "–Ø–Ω—É–∞—Ä–∏", "–§–µ–≤—Ä—É–∞—Ä–∏", "–ú–∞—Ä—Ç", "–ê–ø—Ä–∏–ª", "–ú–∞–π", "–Æ–Ω–∏",
                "–Æ–ª–∏", "–ê–≤–≥—É—Å—Ç", "–°–µ–ø—Ç–µ–º–≤—Ä–∏", "–û–∫—Ç–æ–º–≤—Ä–∏", "–ù–æ–µ–º–≤—Ä–∏", "–î–µ–∫–µ–º–≤—Ä–∏"
        };

        if (month >= 1 && month <= 12) {
            return monthNames[month - 1];
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
    }

    /**
     * DTO –∫–ª–∞—Å –∑–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
     */
    public static class UpdateScheduleRequest {
        private Long employeeId;
        private LocalDate eventDate;
        private String action; // "CREATE", "UPDATE", "DELETE"

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
        public UpdateScheduleRequest() {
        }

        public UpdateScheduleRequest(Long employeeId, LocalDate eventDate, String action) {
            this.employeeId = employeeId;
            this.eventDate = eventDate;
            this.action = action;
        }

        // Getters –∏ Setters
        public Long getEmployeeId() {
            return employeeId;
        }

        public void setEmployeeId(Long employeeId) {
            this.employeeId = employeeId;
        }

        public LocalDate getEventDate() {
            return eventDate;
        }

        public void setEventDate(LocalDate eventDate) {
            this.eventDate = eventDate;
        }

        public String getAction() {
            return action;
        }

        public void setAction(String action) {
            this.action = action;
        }

        @Override
        public String toString() {
            return String.format("UpdateScheduleRequest{employeeId=%d, eventDate=%s, action='%s'}",
                    employeeId, eventDate, action);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å–µ—Ü
     * GET /api/weekly-schedule/{employeeId}/daily-hours?year=2025&month=7
     * <p>
     * –¢–æ–∑–∏ endpoint –≤—Ä—ä—â–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω –≤ –º–µ—Å–µ—Ü–∞:
     * - –ê–∫–æ –∏–º–∞ —Å—ä–±–∏—Ç–∏–µ –≤ event —Ç–∞–±–ª–∏—Ü–∞—Ç–∞: –ø–æ–∫–∞–∑–≤–∞ "08:00 - 16:00" (—Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω) –∏–ª–∏ "Paid leave" (–æ—Ç–ø—É—Å–∫)
     * - –ê–∫–æ –Ω—è–º–∞ —Å—ä–±–∏—Ç–∏–µ: –ø–æ–∫–∞–∑–≤–∞ "Day off"
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param year       - –≥–æ–¥–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Ç–µ–∫—É—â–∞—Ç–∞)
     * @param month      - –º–µ—Å–µ—Ü 1-12 (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ —Ç–µ–∫—É—â–∏—è)
     * @return —Å–ø–∏—Å—ä–∫ —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω –≤ –º–µ—Å–µ—Ü–∞
     */
    @GetMapping("/{employeeId}/daily-hours")
    public ResponseEntity<?> getDailyWorkHours(
            @PathVariable Long employeeId,
            @RequestParam(required = false) Integer year,
            @RequestParam(required = false) Integer month) {

        System.out.println(String.format("üìÖ GET request for daily work hours - Employee: %d, Year: %d, Month: %d",
                employeeId, year, month));

        try {
            // –ê–∫–æ –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–∞ –≥–æ–¥–∏–Ω–∞ –∏–ª–∏ –º–µ—Å–µ—Ü, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–µ–∫—É—â–∏—Ç–µ
            if (year == null || month == null) {
                YearMonth current = YearMonth.now();
                year = year != null ? year : current.getYear();
                month = month != null ? month : current.getMonthValue();
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (month < 1 || month > 12) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Invalid month. Must be between 1 and 12."));
            }

            if (year < 2020 || year > 2030) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Invalid year. Must be between 2020 and 2030."));
            }

            // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –æ—Ç service
            List<DailyWorkHoursDto> dailyHours = weeklyScheduleService.getDailyWorkHoursForMonth(employeeId, year, month);

            System.out.println(String.format("‚úÖ Returning %d daily records for employee %d (%d/%d)",
                    dailyHours.size(), employeeId, month, year));

            // –°—ä–∑–¥–∞–≤–∞–º–µ response —Å –º–µ—Ç–∞–¥–∞–Ω–Ω–∏
            Map<String, Object> response = new HashMap<>();
            response.put("employeeId", employeeId);
            response.put("year", year);
            response.put("month", month);
            response.put("monthName", getMonthName(month));
            response.put("totalDays", dailyHours.size());
            response.put("dailyWorkHours", dailyHours);

            // –î–æ–±–∞–≤—è–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            long workDays = dailyHours.stream().mapToLong(d -> d.isWorkDay() ? 1 : 0).sum();
            long dayOffs = dailyHours.stream().mapToLong(d -> d.isDayOff() ? 1 : 0).sum();
            long leaveDays = dailyHours.stream().mapToLong(d -> d.getLeaveType() != null ? 1 : 0).sum();

            response.put("statistics", Map.of(
                    "workDays", workDays,
                    "dayOffs", dayOffs,
                    "leaveDays", leaveDays
            ));

            return ResponseEntity.ok(response);

        } catch (RuntimeException e) {
            // –ì—Ä–µ—à–∫–∞ –æ—Ç service —Å–ª–æ—è (–Ω–∞–ø—Ä. —Å–ª—É–∂–∏—Ç–µ–ª –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω)
            System.err.println("‚ùå Business logic error: " + e.getMessage());
            return ResponseEntity.badRequest()
                    .body(createErrorResponse(e.getMessage()));

        } catch (Exception e) {
            // –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞
            System.err.println("‚ùå Unexpected error in getDailyWorkHours: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred while fetching daily work hours."));
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥
     * GET /api/weekly-schedule/{employeeId}/daily-hours/period?startDate=2025-07-01&endDate=2025-07-31
     * <p>
     * –ü–æ–∑–≤–æ–ª—è–≤–∞ –≥—ä–≤–∫–∞–≤–æ –∑–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ (–º–æ–∂–µ –¥–∞ –µ —Ä–∞–∑–ª–∏—á–µ–Ω –æ—Ç –º–µ—Å–µ—Ü)
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param startDate  - –Ω–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
     * @param endDate    - –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
     * @return —Å–ø–∏—Å—ä–∫ —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ –ø–µ—Ä–∏–æ–¥–∞
     */
    @GetMapping("/{employeeId}/daily-hours/period")
    public ResponseEntity<?> getDailyWorkHoursForPeriod(
            @PathVariable Long employeeId,
            @RequestParam String startDate,
            @RequestParam String endDate) {

        System.out.println(String.format("üìÖ GET request for daily work hours period - Employee: %d, Period: %s to %s",
                employeeId, startDate, endDate));

        try {
            // –ü–∞—Ä—Å–∏—Ä–∞–º–µ –¥–∞—Ç–∏—Ç–µ
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
            if (start.isAfter(end)) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Start date cannot be after end date."));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–µ—Ä–∏–æ–¥—ä—Ç –Ω–µ –µ —Ç–≤—ä—Ä–¥–µ –¥—ä–ª—ä–≥ (–º–∞–∫—Å–∏–º—É–º 3 –º–µ—Å–µ—Ü–∞)
            if (ChronoUnit.DAYS.between(start, end) > 90) {
                return ResponseEntity.badRequest()
                        .body(createErrorResponse("Period cannot be longer than 90 days."));
            }

            // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –æ—Ç service
            List<DailyWorkHoursDto> dailyHours = weeklyScheduleService.getDailyWorkHours(employeeId, start, end);

            System.out.println(String.format("‚úÖ Returning %d daily records for employee %d (period %s to %s)",
                    dailyHours.size(), employeeId, startDate, endDate));

            // –°—ä–∑–¥–∞–≤–∞–º–µ response
            Map<String, Object> response = new HashMap<>();
            response.put("employeeId", employeeId);
            response.put("startDate", start);
            response.put("endDate", end);
            response.put("totalDays", dailyHours.size());
            response.put("dailyWorkHours", dailyHours);

            // –î–æ–±–∞–≤—è–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            long workDays = dailyHours.stream().mapToLong(d -> d.isWorkDay() ? 1 : 0).sum();
            long dayOffs = dailyHours.stream().mapToLong(d -> d.isDayOff() ? 1 : 0).sum();
            long leaveDays = dailyHours.stream().mapToLong(d -> d.getLeaveType() != null ? 1 : 0).sum();

            response.put("statistics", Map.of(
                    "workDays", workDays,
                    "dayOffs", dayOffs,
                    "leaveDays", leaveDays
            ));

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Error in getDailyWorkHoursForPeriod: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(createErrorResponse("An unexpected error occurred while fetching daily work hours for period."));
        }
    }
}