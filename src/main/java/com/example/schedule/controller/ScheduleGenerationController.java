package com.example.schedule.controller;

import com.example.schedule.service.ScheduleGeneratorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

/**
 * –ö–û–ù–¢–†–û–õ–ï–† –ó–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê –†–ê–ë–û–¢–ù–ò –ì–†–ê–§–ò–¶–ò
 * –û–±—Ä–∞–±–æ—Ç–≤–∞ –∑–∞—è–≤–∫–∏ –æ—Ç frontend-–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–µ—Å–µ—á–Ω–∏ –≥—Ä–∞—Ñ–∏—Ü–∏
 */
@RestController
@RequestMapping("/api/schedule-generation")
@CrossOrigin(origins = "*") // –ü–æ–∑–≤–æ–ª—è–≤–∞–º–µ CORS –∑–∞—è–≤–∫–∏ –æ—Ç frontend
public class ScheduleGenerationController {

    @Autowired
    private ScheduleGeneratorService scheduleGeneratorService;

    /**
     * ENDPOINT: –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–∞–¥–µ–Ω –º–µ—Å–µ—Ü
     *
     * @param request JSON –æ–±–µ–∫—Ç —Å—ä—Å –≥–æ–¥–∏–Ω–∞ –∏ –º–µ—Å–µ—Ü
     * @return JSON –æ—Ç–≥–æ–≤–æ—Ä —Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ
     *
     * –ü—Ä–∏–º–µ—Ä –∑–∞—è–≤–∫–∞:
     * POST /api/schedule-generation/generate
     * {
     *   "year": 2025,
     *   "month": 9
     * }
     */
    @PostMapping("/generate")
    public ResponseEntity<Map<String, Object>> generateSchedule(@RequestBody GenerateScheduleRequest request) {
        System.out.println("üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫");
        System.out.println(String.format("üìÖ –ü–µ—Ä–∏–æ–¥: %02d/%d", request.getMonth(), request.getYear()));

        Map<String, Object> response = new HashMap<>();

        try {
            // –°–¢–™–ü–ö–ê 1: –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            if (request.getYear() < 2020 || request.getYear() > 2030) {
                response.put("success", false);
                response.put("error", "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –≥–æ–¥–∏–Ω–∞. –ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –≥–æ–¥–∏–Ω–∞ –º–µ–∂–¥—É 2020 –∏ 2030.");
                return ResponseEntity.badRequest().body(response);
            }

            if (request.getMonth() < 1 || request.getMonth() > 12) {
                response.put("success", false);
                response.put("error", "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –º–µ—Å–µ—Ü. –ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –º–µ—Å–µ—Ü –º–µ–∂–¥—É 1 –∏ 12.");
                return ResponseEntity.badRequest().body(response);
            }

            // –°–¢–™–ü–ö–ê 2: –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            System.out.println("‚öôÔ∏è –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ...");
            int generatedShifts = scheduleGeneratorService.generateMonthlySchedule(request.getYear(), request.getMonth());

            // –°–¢–™–ü–ö–ê 3: –ü–æ–¥–≥–æ—Ç–≤—è–º–µ —É—Å–ø–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
            response.put("success", true);
            response.put("message", String.format("–ì—Ä–∞—Ñ–∏–∫—ä—Ç –∑–∞ %02d/%d –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!",
                    request.getMonth(), request.getYear()));
            response.put("generatedShifts", generatedShifts);
            response.put("year", request.getYear());
            response.put("month", request.getMonth());

            System.out.println(String.format("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ! –°—ä–∑–¥–∞–¥–µ–Ω–∏ %d —Å–º–µ–Ω–∏", generatedShifts));

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            // –°–¢–™–ü–ö–ê 4: –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –≥—Ä–µ—à–∫–∏
            System.err.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫: " + e.getMessage());
            e.printStackTrace();

            response.put("success", false);
            response.put("error", "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ: " + e.getMessage());
            response.put("details", e.getClass().getSimpleName());

            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * ENDPOINT: –ü–æ–ª—É—á–∞–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü (–ø–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è)
     *
     * @return JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ç–µ–∫—É—â–∏—è –º–µ—Å–µ—Ü –∏ –≥–æ–¥–∏–Ω–∞
     */
    @GetMapping("/current-month")
    public ResponseEntity<Map<String, Object>> getCurrentMonth() {
        Map<String, Object> response = new HashMap<>();

        java.time.LocalDate today = java.time.LocalDate.now();

        response.put("currentYear", today.getYear());
        response.put("currentMonth", today.getMonthValue());
        response.put("monthName", today.getMonth().toString());

        // –ü—Ä–µ–¥–ª–∞–≥–∞–º–µ –∏ —Å–ª–µ–¥–≤–∞—â–∏—è –º–µ—Å–µ—Ü –∫–∞—Ç–æ –æ–ø—Ü–∏—è
        java.time.LocalDate nextMonth = today.plusMonths(1);
        response.put("nextMonthYear", nextMonth.getYear());
        response.put("nextMonth", nextMonth.getMonthValue());
        response.put("nextMonthName", nextMonth.getMonth().toString());

        return ResponseEntity.ok(response);
    }

    /**
     * ENDPOINT: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ –¥–∞–¥–µ–Ω –º–µ—Å–µ—Ü
     *
     * @param year –ì–æ–¥–∏–Ω–∞
     * @param month –ú–µ—Å–µ—Ü
     * @return JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–ª–∏ –∏–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏
     */
    @GetMapping("/check-existing")
    public ResponseEntity<Map<String, Object>> checkExistingSchedule(
            @RequestParam int year,
            @RequestParam int month) {

        Map<String, Object> response = new HashMap<>();

        try {
            // –¢—É–∫ –º–æ–∂–µ–º –¥–∞ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫–∞ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏
            // –ó–∞ –ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤—Ä—ä—â–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ –≤–∏–Ω–∞–≥–∏ –º–æ–∂–µ –¥–∞ —Å–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞
            response.put("hasExistingSchedule", false);
            response.put("message", String.format("–ì–æ—Ç–æ–≤–æ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ %02d/%d", month, year));

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            response.put("error", "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –í–™–¢–†–ï–®–ï–ù –ö–õ–ê–°: –ú–æ–¥–µ–ª –∑–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
     */
    public static class GenerateScheduleRequest {
        private int year;
        private int month;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
        public GenerateScheduleRequest() {}

        public GenerateScheduleRequest(int year, int month) {
            this.year = year;
            this.month = month;
        }

        // Getters –∏ Setters
        public int getYear() {
            return year;
        }

        public void setYear(int year) {
            this.year = year;
        }

        public int getMonth() {
            return month;
        }

        public void setMonth(int month) {
            this.month = month;
        }

        @Override
        public String toString() {
            return String.format("GenerateScheduleRequest{year=%d, month=%d}", year, month);
        }
    }
}