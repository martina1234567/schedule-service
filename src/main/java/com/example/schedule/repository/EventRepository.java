package com.example.schedule.repository;

import com.example.schedule.dto.EventDto;
import com.example.schedule.entity.Event;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * REPOSITORY ЗА РАБОТА СЪС СЪБИТИЯ/СМЕНИ
 * Съдържа всички методи за достъп до данните в таблицата Event
 * Включва специализирани заявки за автоматичното генериране на график
 */
public interface EventRepository extends JpaRepository<Event, Long> {

    // ========================================
    // СЪЩЕСТВУВАЩИ МЕТОДИ
    // ========================================

    /**
     * Намира всички събития като DTO обекти
     * Използва се за показване в календара
     */
    @Query("SELECT new com.example.schedule.dto.EventDto(e.id, e.title, e.start, e.end, e.activity, e.leaveType, emp.name) " +
            "FROM Event e JOIN e.employee emp")
    List<EventDto> findAllEventDtos();

    /**
     * Намира събитията на конкретен служител с eager loading
     * Избягва lazy loading проблеми
     */
    @Query("SELECT e FROM Event e JOIN FETCH e.employee emp WHERE emp.id = :employeeId")
    List<Event> findEventsByEmployeeIdWithEmployee(@Param("employeeId") Long employeeId);

    // ========================================
    // НОВИ МЕТОДИ ЗА АВТОМАТИЧНОТО ГЕНЕРИРАНЕ
    // ========================================

    /**
     * Намира всички събития в даден период
     * Използва се за зареждане на съществуващи смени при генериране
     *
     * @param startDate начална дата и час
     * @param endDate крайна дата и час
     * @return списък със събитията в периода
     */
    @Query("SELECT e FROM Event e WHERE e.start >= :startDate AND e.start <= :endDate")
    List<Event> findEventsInPeriod(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира всички автоматично генерирани събития в даден период
     * Използва се за изтриване на стари автоматични смени преди ново генериране
     *
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return списък с автоматично генерираните събития
     */
    @Query("SELECT e FROM Event e WHERE e.isAutoGenerated = true " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    List<Event> findAutoGeneratedEventsInPeriod(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира ръчно въведените събития в даден период
     * Тези събития имат приоритет и не се променят при автоматично генериране
     *
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return списък с ръчно въведените събития
     */
    @Query("SELECT e FROM Event e WHERE (e.isAutoGenerated = false OR e.isAutoGenerated IS NULL) " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    List<Event> findManualEventsInPeriod(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира събитията на конкретен служител в даден период
     * Използва се за проверка на работното натоварване и валидация
     *
     * @param employeeId ID на служителя
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return списък със събитията, сортирани по начален час
     */
    @Query("SELECT e FROM Event e WHERE e.employee.id = :employeeId " +
            "AND e.start >= :startDate AND e.start <= :endDate " +
            "ORDER BY e.start ASC")
    List<Event> findEmployeeEventsInPeriod(
            @Param("employeeId") Long employeeId,
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира последната смяна на служител преди дадена дата
     * Използва се за проверка на 12-часовото правило за почивка
     *
     * @param employeeId ID на служителя
     * @param beforeDate референтна дата
     * @return последната смяна преди датата (ако има)
     */
    @Query("SELECT e FROM Event e WHERE e.employee.id = :employeeId " +
            "AND e.end < :beforeDate " +
            "ORDER BY e.end DESC")
    List<Event> findLastShiftBefore(
            @Param("employeeId") Long employeeId,
            @Param("beforeDate") LocalDateTime beforeDate
    );

    /**
     * Намира първата смяна на служител след дадена дата
     * Използва се за проверка на почивката между смени
     *
     * @param employeeId ID на служителя
     * @param afterDate референтна дата
     * @return първата смяна след датата
     */
    @Query("SELECT e FROM Event e WHERE e.employee.id = :employeeId " +
            "AND e.start > :afterDate " +
            "ORDER BY e.start ASC")
    Optional<Event> findFirstShiftAfter(
            @Param("employeeId") Long employeeId,
            @Param("afterDate") LocalDateTime afterDate
    );

    /**
     * Брои смените на служител в даден период
     * Използва се за статистики и баланс
     *
     * @param employeeId ID на служителя
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return брой смени
     */
    @Query("SELECT COUNT(e) FROM Event e WHERE e.employee.id = :employeeId " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    Long countEmployeeEventsInPeriod(
            @Param("employeeId") Long employeeId,
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира смените по тип (първа/втора/междинна) за даден ден
     * Използва се за проверка на баланса между смените
     *
     * @param shiftType тип на смяната (FIRST, SECOND, INTERMEDIATE)
     * @param date дата
     * @return списък със смените от този тип
     */
    @Query("SELECT e FROM Event e WHERE DATE(e.start) = DATE(:date) " +
            "AND e.activity = :shiftType")
    List<Event> findShiftsByTypeAndDate(
            @Param("shiftType") String shiftType,
            @Param("date") LocalDateTime date
    );

    /**
     * Изтрива автоматично генерираните смени за даден период
     * Използва се преди ново генериране
     * ВАЖНО: Този метод директно изтрива от базата данни!
     *
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return брой изтрити записи
     */
    @Modifying
    @Transactional
    @Query("DELETE FROM Event e WHERE e.isAutoGenerated = true " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    int deleteAutoGeneratedEventsInPeriod(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира конфликтни смени (припокриващи се по време)
     * Използва се за валидация преди добавяне на нова смяна
     *
     * @param employeeId ID на служителя
     * @param startTime начален час на новата смяна
     * @param endTime краен час на новата смяна
     * @return списък с конфликтните смени
     */
    @Query("SELECT e FROM Event e WHERE e.employee.id = :employeeId " +
            "AND ((e.start <= :startTime AND e.end > :startTime) " +
            "OR (e.start < :endTime AND e.end >= :endTime) " +
            "OR (e.start >= :startTime AND e.end <= :endTime))")
    List<Event> findConflictingEvents(
            @Param("employeeId") Long employeeId,
            @Param("startTime") LocalDateTime startTime,
            @Param("endTime") LocalDateTime endTime
    );

    /**
     * Намира всички смени за конкретна дата
     * Използва се за дневен преглед
     *
     * @param date датата за която търсим
     * @return списък със смените за деня
     */
    @Query("SELECT e FROM Event e WHERE DATE(e.start) = DATE(:date) " +
            "ORDER BY e.start, e.employee.name")
    List<Event> findEventsByDate(@Param("date") LocalDateTime date);

    /**
     * Намира смените по тип (автоматични или ръчни)
     *
     * @param isAutoGenerated true за автоматични, false за ръчни
     * @return списък със смените
     */
    @Query("SELECT e FROM Event e WHERE e.isAutoGenerated = :isAutoGenerated")
    List<Event> findEventsByGenerationType(@Param("isAutoGenerated") Boolean isAutoGenerated);

    /**
     * Изчислява общите работни часове на служител за период
     * Връща сумата от часовете
     *
     * @param employeeId ID на служителя
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return общ брой часове
     */
    @Query("SELECT SUM(TIMESTAMPDIFF(HOUR, e.start, e.end)) " +
            "FROM Event e WHERE e.employee.id = :employeeId " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    Long calculateTotalHoursForEmployee(
            @Param("employeeId") Long employeeId,
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Намира последователните работни дни на служител
     * Използва се за проверка на правилото за макс. 6 последователни дни
     *
     * @param employeeId ID на служителя
     * @param fromDate начална дата за проверка
     * @param toDate крайна дата за проверка
     * @return списък със смените в периода
     */
    @Query("SELECT e FROM Event e WHERE e.employee.id = :employeeId " +
            "AND DATE(e.start) >= DATE(:fromDate) " +
            "AND DATE(e.start) <= DATE(:toDate) " +
            "ORDER BY e.start")
    List<Event> findConsecutiveWorkDays(
            @Param("employeeId") Long employeeId,
            @Param("fromDate") LocalDateTime fromDate,
            @Param("toDate") LocalDateTime toDate
    );

    /**
     * Статистика: Брои смените по тип за даден месец
     *
     * @param year година
     * @param month месец (1-12)
     * @return списък с броя смени по тип
     */
    @Query("SELECT e.activity, COUNT(e) FROM Event e " +
            "WHERE YEAR(e.start) = :year AND MONTH(e.start) = :month " +
            "GROUP BY e.activity")
    List<Object[]> countShiftsByTypeForMonth(
            @Param("year") int year,
            @Param("month") int month
    );

    /**
     * Намира служителите с най-много/най-малко смени за период
     * Използва се за баланс при генериране
     *
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return списък с employee ID и брой смени
     */
    @Query("SELECT e.employee.id, COUNT(e) as shiftCount " +
            "FROM Event e " +
            "WHERE e.start >= :startDate AND e.start <= :endDate " +
            "GROUP BY e.employee.id " +
            "ORDER BY shiftCount")
    List<Object[]> findEmployeeShiftCounts(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );

    /**
     * Проверява дали служител има смяна на конкретна дата
     *
     * @param employeeId ID на служителя
     * @param date датата за проверка
     * @return true ако има смяна
     */
    @Query("SELECT CASE WHEN COUNT(e) > 0 THEN true ELSE false END " +
            "FROM Event e WHERE e.employee.id = :employeeId " +
            "AND DATE(e.start) = DATE(:date)")
    boolean hasShiftOnDate(
            @Param("employeeId") Long employeeId,
            @Param("date") LocalDateTime date
    );

    /**
     * Намира всички отпуски за даден период
     *
     * @param startDate начална дата
     * @param endDate крайна дата
     * @return списък с отпуските
     */
    @Query("SELECT e FROM Event e WHERE e.leaveType IS NOT NULL " +
            "AND e.start >= :startDate AND e.start <= :endDate")
    List<Event> findLeavesInPeriod(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate
    );
}