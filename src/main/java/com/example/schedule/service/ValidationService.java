package com.example.schedule.service;

import com.example.schedule.entity.Event;
import com.example.schedule.entity.Employee;
import com.example.schedule.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.HashSet;

/**
 * –°–ï–†–í–ò–° –ó–ê –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –†–ê–ë–û–¢–ù–ò–¢–ï –ß–ê–°–û–í–ï
 * –û–±–Ω–æ–≤–µ–Ω —Å –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
 */
@Service
@Component
public class ValidationService {

    @Autowired
    private EventRepository eventRepository;

    /**
     * –ö–û–ù–°–¢–ê–ù–¢–ò –ó–ê –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–ò–¢–ï –ü–†–ê–í–ò–õ–ê
     */
    private static final long MIN_REST_HOURS = 12;      // –ú–∏–Ω–∏–º—É–º 12 —á–∞—Å–∞ –ø–æ—á–∏–≤–∫–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∏
    private static final long MAX_DAILY_HOURS = 12;     // –ú–∞–∫—Å–∏–º—É–º 12 —á–∞—Å–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–µ–Ω
    private static final int MAX_CONSECUTIVE_DAYS = 6;  // –ù–û–í–û: –ú–∞–∫—Å–∏–º—É–º 6 –¥–Ω–∏ –ø–æ–¥—Ä–µ–¥ —Ä–∞–±–æ—Ç–∞

    public ValidationService() {
        System.out.println("‚úÖ ValidationService bean —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    }

    @Autowired
    public void init() {
        System.out.println("üîß ValidationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —Å EventRepository: " +
                (eventRepository != null ? "‚úÖ OK" : "‚ùå NULL"));
    }

    /**
     * –ì–õ–ê–í–ù–ê –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–ê –§–£–ù–ö–¶–ò–Ø (–û–ë–ù–û–í–ï–ù–ê –° –ù–û–í–ê –í–ê–õ–ò–î–ê–¶–ò–Ø)
     */
    public ValidationResult validateEvent(Event event, boolean isUpdate) {
        System.out.println("üîç –ó–∞–ø–æ—á–≤–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—ä–±–∏—Ç–∏–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª: " +
                (event.getEmployee() != null ? event.getEmployee().getId() : "NULL"));

        System.out.println("üîß DEBUG INFO:");
        System.out.println("  - isUpdate: " + isUpdate);
        System.out.println("  - event.getId(): " + event.getId());
        System.out.println("  - event.getTitle(): " + event.getTitle());
        System.out.println("  - event.getStart(): " + event.getStart());
        System.out.println("  - event.getEnd(): " + event.getEnd());

        // NULL CHECKS (—Å—ä—â–∏—Ç–µ –∫–∞—Ç–æ –ø—Ä–µ–¥–∏)
        if (event == null) {
            System.out.println("‚ùå –°—ä–±–∏—Ç–∏–µ—Ç–æ –µ null");
            ValidationResult result = new ValidationResult();
            result.addError("Event cannot be null");
            return result;
        }

        if (event.getEmployee() == null) {
            System.out.println("‚ùå –°–ª—É–∂–∏—Ç–µ–ª—è—Ç –µ null");
            ValidationResult result = new ValidationResult();
            result.addError("Employee cannot be null");
            return result;
        }

        if (event.getStart() == null || event.getEnd() == null) {
            System.out.println("‚ùå Start –∏–ª–∏ End –¥–∞—Ç–∞ –µ null: start=" + event.getStart() + ", end=" + event.getEnd());

            if (event.getLeaveType() != null && !event.getLeaveType().trim().isEmpty()) {
                System.out.println("üèñÔ∏è –¢–æ–≤–∞ –µ –æ—Ç–ø—É—Å–∫ —Å null –¥–∞—Ç–∏, —Ç–æ–≤–∞ –µ –Ω–æ—Ä–º–∞–ª–Ω–æ");
                return ValidationResult.success();
            }

            ValidationResult result = new ValidationResult();
            result.addError("Event start and end time cannot be null for work shifts");
            return result;
        }

        // –ê–∫–æ –µ leave type (–æ—Ç–ø—É—Å–∫), –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–∞–º–µ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
        if (event.getLeaveType() != null && !event.getLeaveType().trim().isEmpty()) {
            System.out.println("üèñÔ∏è –¢–æ–≤–∞ –µ –æ—Ç–ø—É—Å–∫, –ø—Ä–æ–ø—É—Å–∫–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ");
            return ValidationResult.success();
        }

        // –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
        ValidationResult result = new ValidationResult();

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ work —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–æ–∑–∏ —Å–ª—É–∂–∏—Ç–µ–ª
        List<Event> employeeWorkEvents = getEmployeeWorkEvents(event.getEmployee().getId());

        System.out.println("üìä –ü–†–ï–î–ò —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ: " + employeeWorkEvents.size() + " work —Å—ä–±–∏—Ç–∏—è");

        // –ò–∑–∫–ª—é—á–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
        if (isUpdate) {
            System.out.println("üîÑ –¢–æ–≤–∞ –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ - –∏–∑–∫–ª—é—á–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ");

            if (event.getId() != null) {
                int originalSize = employeeWorkEvents.size();

                employeeWorkEvents = employeeWorkEvents.stream()
                        .filter(e -> e.getId() != null && !e.getId().equals(event.getId()))
                        .collect(Collectors.toList());

                int newSize = employeeWorkEvents.size();
                System.out.println("‚úÖ –ò–∑–∫–ª—é—á–µ–Ω–æ –ø–æ ID: " + event.getId() + " (" + originalSize + " -> " + newSize + " —Å—ä–±–∏—Ç–∏—è)");

            } else {
                System.out.println("‚ö†Ô∏è –ù—è–º–∞ ID –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ, –æ–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –Ω–∞–º–µ—Ä–∏–º –ø–æ –¥–∞—Ç–∞ –∏ —Å–ª—É–∂–∏—Ç–µ–ª");

                LocalDateTime eventStart = event.getStart();
                List<Event> sameDayEvents = employeeWorkEvents.stream()
                        .filter(e -> e.getStart() != null &&
                                e.getStart().toLocalDate().equals(eventStart.toLocalDate()))
                        .collect(Collectors.toList());

                if (sameDayEvents.size() == 1) {
                    Event eventToExclude = sameDayEvents.get(0);
                    System.out.println("üéØ –ù–∞–º–µ—Ä–µ–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ —Å—ä–±–∏—Ç–∏–µ –≤ —Å—ä—â–∏—è –¥–µ–Ω - –∏–∑–∫–ª—é—á–≤–∞–º–µ ID: " + eventToExclude.getId());

                    int originalSize = employeeWorkEvents.size();
                    employeeWorkEvents = employeeWorkEvents.stream()
                            .filter(e -> e.getId() != null && !e.getId().equals(eventToExclude.getId()))
                            .collect(Collectors.toList());

                    int newSize = employeeWorkEvents.size();
                    System.out.println("‚úÖ –ò–∑–∫–ª—é—á–µ–Ω–æ –ø–æ –¥–∞—Ç–∞: " + eventToExclude.getId() + " (" + originalSize + " -> " + newSize + " —Å—ä–±–∏—Ç–∏—è)");
                }
            }
        } else {
            System.out.println("‚ûï –¢–æ–≤–∞ –µ –Ω–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ - –Ω–µ –∏–∑–∫–ª—é—á–≤–∞–º–µ –Ω–∏—â–æ");
        }

        System.out.println("üìä –°–õ–ï–î —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ: " + employeeWorkEvents.size() + " —Å—ä–±–∏—Ç–∏—è –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è");

        // –í–ê–õ–ò–î–ê–¶–ò–Ø 1: –î–Ω–µ–≤–Ω–∏ —á–∞—Å–æ–≤–µ
        String dailyHoursError = validateDailyHours(event, employeeWorkEvents);
        if (dailyHoursError != null) {
            result.addError(dailyHoursError);
        }

        // –í–ê–õ–ò–î–ê–¶–ò–Ø 2: –ü–æ—á–∏–≤–∫–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∏
        String restPeriodError = validateRestPeriod(event, employeeWorkEvents);
        if (restPeriodError != null) {
            result.addError(restPeriodError);
        }

        // –í–ê–õ–ò–î–ê–¶–ò–Ø 3: –°–µ–¥–º–∏—á–Ω–∏ —á–∞—Å–æ–≤–µ
        String weeklyHoursError = validateWeeklyHours(event, employeeWorkEvents);
        if (weeklyHoursError != null) {
            result.addError(weeklyHoursError);
        }

        // –í–ê–õ–ò–î–ê–¶–ò–Ø 4: –ù–û–í–ê - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
        String consecutiveDaysError = validateConsecutiveWorkDays(event, employeeWorkEvents);
        if (consecutiveDaysError != null) {
            result.addError(consecutiveDaysError);
        }

        // –õ–æ–≥–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
        if (result.isValid()) {
            System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        } else {
            System.out.println("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞: " + result.getErrors());
        }

        return result;
    }

    /**
     * –ù–û–í–ê –í–ê–õ–ò–î–ê–¶–ò–Ø 4: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–ù–ò –†–ê–ë–û–¢–ù–ò –î–ù–ò
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å–ª—É–∂–∏—Ç–µ–ª—è—Ç –Ω—è–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç 6 –¥–Ω–∏ –ø–æ–¥—Ä–µ–¥ —Ä–∞–±–æ—Ç–∞
     *
     * @param newEvent - –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
     * @param existingEvents - –°—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Å—ä–±–∏—Ç–∏—è
     * @return String - –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –≥—Ä–µ—à–∫–∞ –∏–ª–∏ null –∞–∫–æ –µ –≤–∞–ª–∏–¥–Ω–æ
     */
    private String validateConsecutiveWorkDays(Event newEvent, List<Event> existingEvents) {
        System.out.println("üìÖ –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏...");

        // NULL CHECKS
        if (newEvent.getStart() == null) {
            System.out.println("‚ùå –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∏–º–∞ null start –¥–∞—Ç–∞");
            return "Event start date cannot be null";
        }

        LocalDate newEventDate;
        try {
            newEventDate = newEvent.getStart().toLocalDate();
        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞: " + e.getMessage());
            return "Invalid event start date";
        }

        // –°—ä–∑–¥–∞–≤–∞–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –≤—Å–∏—á–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –Ω–æ–≤–æ—Ç–æ)
        Set<LocalDate> workDays = new HashSet<>();

        // –î–æ–±–∞–≤—è–º–µ –¥–∞—Ç–∏—Ç–µ –æ—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        for (Event event : existingEvents) {
            try {
                if (event.getStart() != null) {
                    LocalDate eventDate = event.getStart().toLocalDate();
                    workDays.add(eventDate);
                    System.out.println("üìä –°—ä—â–µ—Å—Ç–≤—É–≤–∞—â —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω: " + eventDate);
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞—Ç–∞ –∑–∞ —Å—ä–±–∏—Ç–∏–µ: " + e.getMessage());
            }
        }

        // –î–æ–±–∞–≤—è–º–µ –Ω–æ–≤–∞—Ç–∞ –¥–∞—Ç–∞
        workDays.add(newEventDate);
        System.out.println("üìä –ù–æ–≤ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω: " + newEventDate);

        System.out.println("üìã –û–±—â–æ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏: " + workDays.size());

        // –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞–π-–¥—ä–ª–≥–∞—Ç–∞ –ø–æ—Ä–µ–¥–∏—Ü–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–Ω–∏
        int maxConsecutiveDays = findMaxConsecutiveDays(workDays, newEventDate);

        System.out.println("‚è±Ô∏è –ù–∞–π-–¥—ä–ª–≥–∞ –ø–æ—Ä–µ–¥–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏: " + maxConsecutiveDays + " / " + MAX_CONSECUTIVE_DAYS);

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞
        if (maxConsecutiveDays > MAX_CONSECUTIVE_DAYS) {
            int excess = maxConsecutiveDays - MAX_CONSECUTIVE_DAYS;
            return String.format("Consecutive work days limit exceeded! Found: %d consecutive days (Max: %d).",
                    maxConsecutiveDays, MAX_CONSECUTIVE_DAYS, excess);
        }

        return null; // –í–∞–ª–∏–¥–Ω–æ
    }

    /**
     * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ù–∞–º–∏—Ä–∞ –Ω–∞–π-–¥—ä–ª–≥–∞—Ç–∞ –ø–æ—Ä–µ–¥–∏—Ü–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
     * @param workDays - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –≤—Å–∏—á–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
     * @param newEventDate - –î–∞—Ç–∞—Ç–∞ –Ω–∞ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
     * @return int - –ù–∞–π-–¥—ä–ª–≥–∞—Ç–∞ –ø–æ—Ä–µ–¥–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–Ω–∏
     */
    private int findMaxConsecutiveDays(Set<LocalDate> workDays, LocalDate newEventDate) {
        if (workDays.isEmpty()) {
            return 0;
        }

        // –ù–∞–º–∏—Ä–∞–º–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç –¥–∞—Ç–∏ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ (2 —Å–µ–¥–º–∏—Ü–∏ –ø—Ä–µ–¥–∏ –∏ —Å–ª–µ–¥ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ)
        LocalDate startDate = newEventDate.minusWeeks(2);
        LocalDate endDate = newEventDate.plusWeeks(2);

        System.out.println("üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø–µ—Ä–∏–æ–¥: " + startDate + " –¥–æ " + endDate);

        int maxConsecutive = 0;
        int currentConsecutive = 0;
        LocalDate currentDate = startDate;

        while (!currentDate.isAfter(endDate)) {
            if (workDays.contains(currentDate)) {
                currentConsecutive++;
                System.out.println("üìä –î–µ–Ω " + currentDate + ": –†–∞–±–æ—Ç–µ–Ω –¥–µ–Ω (–ø–æ—Ä–µ–¥–∏—Ü–∞: " + currentConsecutive + ")");

                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–∞–∑–∏ –ø–æ—Ä–µ–¥–∏—Ü–∞ –≤–∫–ª—é—á–≤–∞ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
                if (currentDate.equals(newEventDate) || currentConsecutive > maxConsecutive) {
                    maxConsecutive = Math.max(maxConsecutive, currentConsecutive);
                }
            } else {
                if (currentConsecutive > 0) {
                    System.out.println("üìä –î–µ–Ω " + currentDate + ": –ü–æ—á–∏–≤–∫–∞ - –ø—Ä–µ–∫—ä—Å–≤–∞–º–µ –ø–æ—Ä–µ–¥–∏—Ü–∞—Ç–∞ –æ—Ç " + currentConsecutive + " –¥–Ω–∏");
                }
                currentConsecutive = 0;
            }

            currentDate = currentDate.plusDays(1);
        }

        // –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–ª—É—á–∞—è –∫–æ–≥–∞—Ç–æ –ø–æ—Ä–µ–¥–∏—Ü–∞—Ç–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞ –¥–æ –∫—Ä–∞—è
        maxConsecutive = Math.max(maxConsecutive, currentConsecutive);

        System.out.println("üéØ –ù–∞–π-–¥—ä–ª–≥–∞ –ø–æ—Ä–µ–¥–∏—Ü–∞ –≤–∫–ª—é—á–≤–∞—â–∞ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ: " + maxConsecutive + " –¥–Ω–∏");

        return maxConsecutive;
    }

    /**
     * –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ –≤–∞–ª–∏–¥–Ω–∏ work —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª (–° NULL CHECKS)
     */
    private List<Event> getEmployeeWorkEvents(Long employeeId) {
        if (employeeId == null) {
            System.out.println("‚ùå Employee ID –µ null");
            return new ArrayList<>();
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
        List<Event> allEvents = eventRepository.findAll().stream()
                .filter(event -> event != null &&
                        event.getEmployee() != null &&
                        event.getEmployee().getId() != null &&
                        event.getEmployee().getId().equals(employeeId))
                .collect(Collectors.toList());

        System.out.println("üìã –ù–∞–º–µ—Ä–µ–Ω–∏ " + allEvents.size() + " –æ–±—â–æ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª " + employeeId);

        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ –≤–∞–ª–∏–¥–Ω–∏ work —Å—ä–±–∏—Ç–∏—è (–Ω–µ leave types –∏ —Å –≤–∞–ª–∏–¥–Ω–∏ –¥–∞—Ç–∏)
        List<Event> validWorkEvents = allEvents.stream()
                .filter(event -> {
                    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ work event (–Ω–µ leave type)
                    boolean isWorkEvent = (event.getLeaveType() == null || event.getLeaveType().trim().isEmpty());

                    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –¥–∞—Ç–∏
                    boolean hasValidDates = (event.getStart() != null && event.getEnd() != null);

                    if (!isWorkEvent) {
                        System.out.println("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ leave event: " + event.getLeaveType());
                    }

                    if (!hasValidDates) {
                        System.out.println("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ —Å—ä–±–∏—Ç–∏–µ —Å null –¥–∞—Ç–∏: ID=" + event.getId() +
                                ", start=" + event.getStart() + ", end=" + event.getEnd());
                    }

                    return isWorkEvent && hasValidDates;
                })
                .collect(Collectors.toList());

        System.out.println("‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ " + validWorkEvents.size() + " –≤–∞–ª–∏–¥–Ω–∏ work —Å—ä–±–∏—Ç–∏—è");

        return validWorkEvents;
    }

    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø 1: –î–ù–ï–í–ù–ò –†–ê–ë–û–¢–ù–ò –ß–ê–°–û–í–ï (–° NULL CHECKS)
     */
    private String validateDailyHours(Event newEvent, List<Event> existingEvents) {
        System.out.println("‚è∞ –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ...");

        // NULL CHECKS
        if (newEvent.getStart() == null || newEvent.getEnd() == null) {
            System.out.println("‚ùå –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∏–º–∞ null –¥–∞—Ç–∏");
            return "Event dates cannot be null";
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–∞—Ç–∞—Ç–∞ –Ω–∞ –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
        LocalDate newEventDate;
        try {
            newEventDate = newEvent.getStart().toLocalDate();
        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞: " + e.getMessage());
            return "Invalid event start date";
        }

        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å—ä—â–∏—è –¥–µ–Ω
        List<Event> sameDayEvents = existingEvents.stream()
                .filter(event -> {
                    try {
                        return event.getStart() != null &&
                                event.getStart().toLocalDate().equals(newEventDate);
                    } catch (Exception e) {
                        System.out.println("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ —Å—ä–±–∏—Ç–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞: " + e.getMessage());
                        return false;
                    }
                })
                .collect(Collectors.toList());

        System.out.println("üìÖ –ù–∞–º–µ—Ä–µ–Ω–∏ " + sameDayEvents.size() + " –≤–∞–ª–∏–¥–Ω–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å—ä—â–∏—è –¥–µ–Ω: " + newEventDate);

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±—â–∏—Ç–µ —á–∞—Å–æ–≤–µ –∑–∞ –¥–µ–Ω—è
        long totalDailyMinutes = 0;

        // –î–æ–±–∞–≤—è–º–µ –º–∏–Ω—É—Ç–∏—Ç–µ –æ—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        for (Event event : sameDayEvents) {
            try {
                if (event.getStart() != null && event.getEnd() != null) {
                    long eventMinutes = ChronoUnit.MINUTES.between(event.getStart(), event.getEnd());
                    totalDailyMinutes += eventMinutes;
                    System.out.println("üìä –í–∞–ª–∏–¥–Ω–æ —Å—ä–±–∏—Ç–∏–µ: " + (eventMinutes / 60.0) + " —á–∞—Å–∞");
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –º–∏–Ω—É—Ç–∏ –∑–∞ —Å—ä–±–∏—Ç–∏–µ: " + e.getMessage());
            }
        }

        // –î–æ–±–∞–≤—è–º–µ –º–∏–Ω—É—Ç–∏—Ç–µ –æ—Ç –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
        try {
            long newEventMinutes = ChronoUnit.MINUTES.between(newEvent.getStart(), newEvent.getEnd());
            totalDailyMinutes += newEventMinutes;
        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –º–∏–Ω—É—Ç–∏ –∑–∞ –Ω–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ: " + e.getMessage());
            return "Invalid event duration";
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ —á–∞—Å–æ–≤–µ
        double totalDailyHours = totalDailyMinutes / 60.0;

        System.out.println("‚è±Ô∏è –û–±—â–æ –¥–Ω–µ–≤–Ω–∏ —á–∞—Å–æ–≤–µ: " + String.format("%.1f", totalDailyHours) + " / " + MAX_DAILY_HOURS);

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞
        if (totalDailyHours > MAX_DAILY_HOURS) {
            double excess = totalDailyHours - MAX_DAILY_HOURS;
            return String.format("Daily work limit exceeded! Total: %.1fh (Max: %dh).",
                    totalDailyHours, MAX_DAILY_HOURS, excess);
        }

        return null; // –í–∞–ª–∏–¥–Ω–æ
    }

    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø 2: –ü–û–ß–ò–í–ö–ê –ú–ï–ñ–î–£ –°–ú–ï–ù–ò (–° NULL CHECKS)
     */
    private String validateRestPeriod(Event newEvent, List<Event> existingEvents) {
        System.out.println("üò¥ –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –ø–æ—á–∏–≤–∫–∞—Ç–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∏...");

        // NULL CHECKS
        if (newEvent.getStart() == null || newEvent.getEnd() == null) {
            System.out.println("‚ùå –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∏–º–∞ null –¥–∞—Ç–∏");
            return "Event dates cannot be null";
        }

        LocalDateTime newStart = newEvent.getStart();
        LocalDateTime newEnd = newEvent.getEnd();

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Å—ä–±–∏—Ç–∏—è
        for (Event event : existingEvents) {
            try {
                if (event.getStart() == null || event.getEnd() == null) {
                    System.out.println("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ —Å—ä–±–∏—Ç–∏–µ —Å null –¥–∞—Ç–∏");
                    continue;
                }

                LocalDateTime eventStart = event.getStart();
                LocalDateTime eventEnd = event.getEnd();

                // –°–õ–£–ß–ê–ô 1: –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∑–∞–ø–æ—á–≤–∞ —Å–∫–æ—Ä–æ —Å–ª–µ–¥ –∫—Ä–∞—è –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–æ
                long hoursSinceEventEnd = ChronoUnit.HOURS.between(eventEnd, newStart);
                if (hoursSinceEventEnd >= 0 && hoursSinceEventEnd < MIN_REST_HOURS) {
                    long shortage = MIN_REST_HOURS - hoursSinceEventEnd;
                    System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ –ø–æ—á–∏–≤–∫–∞ —Å–ª–µ–¥ —Å–º—è–Ω–∞: " + hoursSinceEventEnd + "—á (–ú–∏–Ω: " + MIN_REST_HOURS + "—á)");
                    return String.format("Insufficient rest period! Only %dh after previous shift (Min: %dh). Missing: %dh",
                            hoursSinceEventEnd, MIN_REST_HOURS, shortage);
                }

                // –°–õ–£–ß–ê–ô 2: –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∑–∞–≤—ä—Ä—à–≤–∞ —Å–∫–æ—Ä–æ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–æ
                long hoursUntilEventStart = ChronoUnit.HOURS.between(newEnd, eventStart);
                if (hoursUntilEventStart >= 0 && hoursUntilEventStart < MIN_REST_HOURS) {
                    long shortage = MIN_REST_HOURS - hoursUntilEventStart;
                    System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ –ø–æ—á–∏–≤–∫–∞ –ø—Ä–µ–¥–∏ —Å–º—è–Ω–∞: " + hoursUntilEventStart + "—á (–ú–∏–Ω: " + MIN_REST_HOURS + "—á)");
                    return String.format("Insufficient rest period! Only %dh before next shift (Min: %dh). Missing: %dh",
                            hoursUntilEventStart, MIN_REST_HOURS, shortage);
                }

            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—á–∏–≤–∫–∞—Ç–∞ –∑–∞ —Å—ä–±–∏—Ç–∏–µ: " + e.getMessage());
            }
        }

        System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ –Ω–∞ –ø–æ—á–∏–≤–∫–∞—Ç–∞ –ø—Ä–µ–º–∏–Ω–∞");
        return null; // –í–∞–ª–∏–¥–Ω–æ
    }

    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø 3: –°–ï–î–ú–ò–ß–ù–ò –†–ê–ë–û–¢–ù–ò –ß–ê–°–û–í–ï (–° NULL CHECKS)
     *  * –í–ê–õ–ò–î–ê–¶–ò–Ø 3: –°–ï–î–ú–ò–ß–ù–ò –†–ê–ë–û–¢–ù–ò –ß–ê–°–û–í–ï –°–ü–û–†–ï–î –î–û–ì–û–í–û–†–ê (–û–ë–ù–û–í–ï–ù–ê)
     *  * –ò–∑–ø–æ–ª–∑–≤–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –ª–∏–º–∏—Ç–∏ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è:
     *  * - 4 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ ‚Üí –º–∞–∫—Å–∏–º—É–º 30 —á–∞—Å–∞ —Å–µ–¥–º–∏—á–Ω–æ
     *  * - 6 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ ‚Üí –º–∞–∫—Å–∏–º—É–º 40 —á–∞—Å–∞ —Å–µ–¥–º–∏—á–Ω–æ
     *  * - 8 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ ‚Üí –º–∞–∫—Å–∏–º—É–º 53 —á–∞—Å–∞ —Å–µ–¥–º–∏—á–Ω–æ
     */
    private String validateWeeklyHours(Event newEvent, List<Event> existingEvents) {
        System.out.println("üìÖ –í–∞–ª–∏–¥–∏—Ä–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞...");

        // NULL CHECKS
        if (newEvent.getStart() == null) {
            System.out.println("‚ùå –ù–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ –∏–º–∞ null start –¥–∞—Ç–∞");
            return "Event start date cannot be null";
        }

        // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–≤–∞–º–µ –¥–æ–≥–æ–≤–æ—Ä–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
        Employee employee = newEvent.getEmployee();
        if (employee == null) {
            System.out.println("‚ùå –°–ª—É–∂–∏—Ç–µ–ª –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω");
            return "Employee information is required";
        }

        Integer dailyContractHours = employee.getHourlyRate();
        if (dailyContractHours == null) {
            System.out.println("‚ö†Ô∏è –°–ª—É–∂–∏—Ç–µ–ª—è—Ç –Ω—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä–Ω–∏ —á–∞—Å–æ–≤–µ, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ 8 —á–∞—Å–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ");
            dailyContractHours = 8;
        }

        // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–º–µ –º–∞–∫—Å–∏–º–∞–ª–Ω–∏—Ç–µ —Å–µ–¥–º–∏—á–Ω–∏ —á–∞—Å–æ–≤–µ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
        long maxWeeklyHours;
        switch (dailyContractHours) {
            case 4:
                maxWeeklyHours = 30;
                break;
            case 6:
                maxWeeklyHours = 40;
                break;
            case 8:
                maxWeeklyHours = 53;
                break;
            default:
                System.out.println("‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä–Ω–∏ —á–∞—Å–æ–≤–µ: " + dailyContractHours + ", –∏–∑–ø–æ–ª–∑–≤–∞–º–µ 53 —á–∞—Å–∞ –ª–∏–º–∏—Ç");
                maxWeeklyHours = 53;
                break;
        }

        System.out.println("üìä –î–æ–≥–æ–≤–æ—Ä–Ω–∏ —á–∞—Å–æ–≤–µ: " + dailyContractHours + "—á/–¥–µ–Ω ‚Üí –ú–∞–∫—Å–∏–º—É–º —Å–µ–¥–º–∏—á–Ω–æ: " + maxWeeklyHours + "—á");

        LocalDate newEventDate;
        try {
            newEventDate = newEvent.getStart().toLocalDate();
        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞: " + e.getMessage());
            return "Invalid event start date";
        }

        // –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞—á–∞–ª–æ—Ç–æ –∏ –∫—Ä–∞—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
        LocalDate weekStart = newEventDate.with(java.time.DayOfWeek.MONDAY);
        LocalDate weekEnd = newEventDate.with(java.time.DayOfWeek.SUNDAY);

        System.out.println("üìä –°–µ–¥–º–∏—Ü–∞: " + weekStart + " –¥–æ " + weekEnd);

        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –≤ —Å—ä—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
        List<Event> weekEvents = existingEvents.stream()
                .filter(event -> {
                    try {
                        if (event.getStart() == null) {
                            return false;
                        }
                        LocalDate eventDate = event.getStart().toLocalDate();
                        return !eventDate.isBefore(weekStart) && !eventDate.isAfter(weekEnd);
                    } catch (Exception e) {
                        System.out.println("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ —Å—ä–±–∏—Ç–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞ –≤ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: " + e.getMessage());
                        return false;
                    }
                })
                .collect(Collectors.toList());

        System.out.println("üìã –ù–∞–º–µ—Ä–µ–Ω–∏ " + weekEvents.size() + " –≤–∞–ª–∏–¥–Ω–∏ —Å—ä–±–∏—Ç–∏—è –≤ —Å–µ–¥–º–∏—Ü–∞—Ç–∞");

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±—â–∏—Ç–µ —á–∞—Å–æ–≤–µ –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
        long totalWeeklyMinutes = 0;

        // –î–æ–±–∞–≤—è–º–µ –º–∏–Ω—É—Ç–∏—Ç–µ –æ—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        for (Event event : weekEvents) {
            try {
                if (event.getStart() != null && event.getEnd() != null) {
                    long eventMinutes = ChronoUnit.MINUTES.between(event.getStart(), event.getEnd());
                    totalWeeklyMinutes += eventMinutes;
                    System.out.println("üìä –°—ä–±–∏—Ç–∏–µ –≤ —Å–µ–¥–º–∏—Ü–∞—Ç–∞: " + (eventMinutes / 60.0) + " —á–∞—Å–∞ –Ω–∞ " + event.getStart().toLocalDate());
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –º–∏–Ω—É—Ç–∏ –∑–∞ —Å–µ–¥–º–∏—á–Ω–æ —Å—ä–±–∏—Ç–∏–µ: " + e.getMessage());
            }
        }

        // –î–æ–±–∞–≤—è–º–µ –º–∏–Ω—É—Ç–∏—Ç–µ –æ—Ç –Ω–æ–≤–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
        try {
            if (newEvent.getEnd() != null) {
                long newEventMinutes = ChronoUnit.MINUTES.between(newEvent.getStart(), newEvent.getEnd());
                totalWeeklyMinutes += newEventMinutes;
            }
        } catch (Exception e) {
            System.out.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –º–∏–Ω—É—Ç–∏ –∑–∞ –Ω–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ –≤ —Å–µ–¥–º–∏—á–Ω–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: " + e.getMessage());
            return "Invalid event duration";
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ —á–∞—Å–æ–≤–µ
        double totalWeeklyHours = totalWeeklyMinutes / 60.0;

        System.out.println("‚è±Ô∏è –û–±—â–æ —Å–µ–¥–º–∏—á–Ω–∏ —á–∞—Å–æ–≤–µ: " + String.format("%.1f", totalWeeklyHours) + " / " + maxWeeklyHours);
        System.out.println("üë§ –°–ª—É–∂–∏—Ç–µ–ª —Å –¥–æ–≥–æ–≤–æ—Ä " + dailyContractHours + "—á/–¥–µ–Ω");

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞
        if (totalWeeklyHours > maxWeeklyHours) {
            double excess = totalWeeklyHours - maxWeeklyHours;
            String contractInfo = dailyContractHours + "-hour contract";
            return String.format("Weekly work limit exceeded for %s! Total: %.1fh (Max: %dh). Excess: %.1fh",
                    contractInfo, totalWeeklyHours, maxWeeklyHours, excess);
        }

        System.out.println("‚úÖ –°–µ–¥–º–∏—á–Ω–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–º–∏–Ω–∞ –∑–∞ –¥–æ–≥–æ–≤–æ—Ä " + dailyContractHours + "—á/–¥–µ–Ω");
        return null; // –í–∞–ª–∏–¥–Ω–æ
    }

    /**
     * –í–™–¢–†–ï–®–ï–ù –ö–õ–ê–°: ValidationResult
     */
    public static class ValidationResult {
        private List<String> errors;
        private boolean valid;

        public ValidationResult() {
            this.errors = new ArrayList<>();
            this.valid = true;
        }

        public void addError(String error) {
            this.errors.add(error);
            this.valid = false;
        }

        public boolean isValid() {
            return valid;
        }

        public List<String> getErrors() {
            return errors;
        }

        public String getFirstError() {
            return errors.isEmpty() ? null : errors.get(0);
        }

        public static ValidationResult success() {
            return new ValidationResult();
        }
    }
}