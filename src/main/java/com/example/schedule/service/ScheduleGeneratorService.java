package com.example.schedule.service;

import com.example.schedule.entity.Employee;
import com.example.schedule.entity.Event;
import com.example.schedule.repository.EmployeeRepository;
import com.example.schedule.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.DayOfWeek;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class ScheduleGeneratorService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private EventRepository eventRepository;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∑–∞ —Å–º–µ–Ω–∏—Ç–µ
    private static final LocalTime FIRST_SHIFT_START = LocalTime.of(6, 0);
    private static final LocalTime FIRST_SHIFT_END = LocalTime.of(14, 30);

    private static final LocalTime SECOND_SHIFT_START = LocalTime.of(13, 30);
    private static final LocalTime SECOND_SHIFT_END = LocalTime.of(22, 0);

    private static final LocalTime MIDDLE_SHIFT_START = LocalTime.of(9, 30);
    private static final LocalTime MIDDLE_SHIFT_END = LocalTime.of(18, 0);

    // –ï–Ω—É–º –∑–∞ —Ç–∏–ø–æ–≤–µ—Ç–µ —Å–º–µ–Ω–∏
    public enum ShiftType {
        FIRST("First Shift", FIRST_SHIFT_START, FIRST_SHIFT_END),
        SECOND("Second Shift", SECOND_SHIFT_START, SECOND_SHIFT_END),
        MIDDLE("Middle Shift", MIDDLE_SHIFT_START, MIDDLE_SHIFT_END);

        private final String name;
        private final LocalTime startTime;
        private final LocalTime endTime;

        ShiftType(String name, LocalTime startTime, LocalTime endTime) {
            this.name = name;
            this.startTime = startTime;
            this.endTime = endTime;
        }

        public String getName() { return name; }
        public LocalTime getStartTime() { return startTime; }
        public LocalTime getEndTime() { return endTime; }
    }

    /**
     * –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å–µ—Ü–∞
     * @param year –ì–æ–¥–∏–Ω–∞ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ
     * @param month –ú–µ—Å–µ—Ü –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (1-12)
     * @return –ë—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏
     */
    @Transactional
    public int generateMonthlySchedule(int year, int month) {
        System.out.println("üöÄ === –ó–ê–ü–û–ß–í–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê –ì–†–ê–§–ò–ö ===");
        System.out.println(String.format("üìÖ –ü–µ—Ä–∏–æ–¥: %02d/%d", month, year));

        // –°–¢–™–ü–ö–ê 1: –í–∑–µ–º–∞–º–µ –≤—Å–∏—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏ —Å–ª—É–∂–∏—Ç–µ–ª–∏
        List<Employee> allEmployees = employeeRepository.findAll();
        if (allEmployees.isEmpty()) {
            System.out.println("‚ùå –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Å–ª—É–∂–∏—Ç–µ–ª–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫");
            return 0;
        }
        System.out.println(String.format("üë• –ù–∞–º–µ—Ä–µ–Ω–∏ %d —Å–ª—É–∂–∏—Ç–µ–ª–∏", allEmployees.size()));

        // –°–¢–™–ü–ö–ê 2: –ò–∑—Ç—Ä–∏–≤–∞–º–µ —Å—Ç–∞—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ –º–µ—Å–µ—Ü–∞
        deleteAutoGeneratedShiftsForMonth(year, month);

        // –°–¢–™–ü–ö–ê 3: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ –∑–∞ –º–µ—Å–µ—Ü–∞ (–±–µ–∑ —É–∏–∫–µ–Ω–¥–∏)
        List<LocalDate> workingDays = generateWorkingDaysForMonth(year, month);
        System.out.println(String.format("üìä –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ %d —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏", workingDays.size()));

        // –°–¢–™–ü–ö–ê 4: –ó–∞ –≤—Å–µ–∫–∏ —Å–ª—É–∂–∏—Ç–µ–ª –≥–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫
        int totalGeneratedShifts = 0;
        for (Employee employee : allEmployees) {
            int shiftsForEmployee = generateScheduleForEmployee(employee, workingDays, year, month);
            totalGeneratedShifts += shiftsForEmployee;
            System.out.println(String.format("‚úÖ –°–ª—É–∂–∏—Ç–µ–ª %s: %d —Å–º–µ–Ω–∏",
                    employee.getName(), shiftsForEmployee));
        }

        System.out.println(String.format("üéØ –ì–ï–ù–ï–†–ò–†–ê–ù–ï–¢–û –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û! –û–±—â–æ —Å–º–µ–Ω–∏: %d", totalGeneratedShifts));
        return totalGeneratedShifts;
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ò–∑—Ç—Ä–∏–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ –¥–∞–¥–µ–Ω –º–µ—Å–µ—Ü
     * –ó–∞–ø–∞–∑–≤–∞ —Ä—ä—á–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏—Ç–µ —Å–º–µ–Ω–∏
     */
    private void deleteAutoGeneratedShiftsForMonth(int year, int month) {
        LocalDate startOfMonth = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());

        LocalDateTime startDateTime = startOfMonth.atStartOfDay();
        LocalDateTime endDateTime = endOfMonth.atTime(23, 59, 59);

        // –ù–∞–º–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ –º–µ—Å–µ—Ü–∞
        List<Event> autoGeneratedEvents = eventRepository.findAll().stream()
                .filter(event -> event.getIsAutoGenerated() != null && event.getIsAutoGenerated())
                .filter(event -> event.getStart() != null)
                .filter(event -> !event.getStart().isBefore(startDateTime) && !event.getStart().isAfter(endDateTime))
                .collect(Collectors.toList());

        if (!autoGeneratedEvents.isEmpty()) {
            eventRepository.deleteAll(autoGeneratedEvents);
            System.out.println(String.format("üóëÔ∏è  –ò–∑—Ç—Ä–∏—Ç–∏ %d —Å—Ç–∞—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏", autoGeneratedEvents.size()));
        }
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ –∑–∞ –º–µ—Å–µ—Ü–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
     */
    private List<LocalDate> generateWorkingDaysForMonth(int year, int month) {
        List<LocalDate> workingDays = new ArrayList<>();
        LocalDate date = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = date.withDayOfMonth(date.lengthOfMonth());

        while (!date.isAfter(endOfMonth)) {
            // –í–∫–ª—é—á–≤–∞–º–µ —Å–∞–º–æ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫-–ø–µ—Ç—ä–∫)
            if (date.getDayOfWeek() != DayOfWeek.SATURDAY && date.getDayOfWeek() != DayOfWeek.SUNDAY) {
                workingDays.add(date);
            }
            date = date.plusDays(1);
        }

        return workingDays;
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å–ª—É–∂–∏—Ç–µ–ª
     */
    private int generateScheduleForEmployee(Employee employee, List<LocalDate> workingDays, int year, int month) {
        System.out.println(String.format("üë§ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –∑–∞ %s (–¥–æ–≥–æ–≤–æ—Ä: %d—á/–¥–µ–Ω)",
                employee.getName(), employee.getHourlyRate()));

        // –°–¢–™–ü–ö–ê 1: –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–ª–∫–æ –¥–Ω–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Ä–∞–±–æ—Ç–∏ —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
        int contractHours = employee.getHourlyRate() != null ? employee.getHourlyRate() : 8;
        int workDaysNeeded = calculateWorkDaysNeeded(contractHours, workingDays.size());

        System.out.println(String.format("üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏: %d –æ—Ç %d –Ω–∞–ª–∏—á–Ω–∏",
                workDaysNeeded, workingDays.size()));

        // –°–¢–™–ü–ö–ê 2: –ü–æ–ª—É—á–∞–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Ä—ä—á–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
        List<Event> existingManualShifts = getExistingManualShifts(employee, year, month);
        Set<LocalDate> occupiedDates = existingManualShifts.stream()
                .map(event -> event.getStart().toLocalDate())
                .collect(Collectors.toSet());

        System.out.println(String.format("üìå –†—ä—á–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —Å–º–µ–Ω–∏: %d", existingManualShifts.size()));

        // –°–¢–™–ü–ö–ê 3: –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ –¥–Ω–∏ (–∏–∑–∫–ª—é—á–≤–∞–º–µ –∑–∞–µ—Ç–∏—Ç–µ)
        List<LocalDate> availableDays = workingDays.stream()
                .filter(date -> !occupiedDates.contains(date))
                .collect(Collectors.toList());

        // –°–¢–™–ü–ö–ê 4: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–æ–ª–∫–æ –æ—â–µ –¥–Ω–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º–µ
        int additionalDaysNeeded = Math.max(0, workDaysNeeded - existingManualShifts.size());
        additionalDaysNeeded = Math.min(additionalDaysNeeded, availableDays.size());

        if (additionalDaysNeeded == 0) {
            System.out.println("‚úÖ –°–ª—É–∂–∏—Ç–µ–ª—è—Ç –≤–µ—á–µ –∏–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Å–º–µ–Ω–∏");
            return 0;
        }

        // –°–¢–™–ü–ö–ê 5: –ò–∑–±–∏—Ä–∞–º–µ –¥–Ω–∏ –∑–∞ —Ä–∞–±–æ—Ç–∞, —Å–ø–∞–∑–≤–∞–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞
        List<LocalDate> selectedDays = selectWorkDaysWithConstraints(availableDays, additionalDaysNeeded, occupiedDates);

        // –°–¢–™–ü–ö–ê 6: –†–∞–∑–ø—Ä–µ–¥–µ–ª—è–º–µ —Å–º–µ–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–æ
        List<Event> generatedShifts = createBalancedShifts(employee, selectedDays);

        // –°–¢–™–ü–ö–ê 7: –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        eventRepository.saveAll(generatedShifts);

        return generatedShifts.size();
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ –∫–æ–ª–∫–æ –¥–Ω–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Ä–∞–±–æ—Ç–∏ —Å–ª—É–∂–∏—Ç–µ–ª—è—Ç —Å–ø–æ—Ä–µ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞
     */
    private int calculateWorkDaysNeeded(int contractHours, int totalWorkingDays) {
        // –õ–æ–≥–∏–∫–∞: —Å–ª—É–∂–∏—Ç–µ–ª —Å 8—á –¥–æ–≥–æ–≤–æ—Ä —Ä–∞–±–æ—Ç–∏ –≤—Å–∏—á–∫–∏ –¥–Ω–∏
        // —Å–ª—É–∂–∏—Ç–µ–ª —Å 4—á –¥–æ–≥–æ–≤–æ—Ä —Ä–∞–±–æ—Ç–∏ –ø–æ–ª–æ–≤–∏–Ω–∞—Ç–∞ –¥–Ω–∏, –∏ —Ç.–Ω.
        double workRatio = contractHours / 8.0; // 8 —á–∞—Å–∞ –µ –ø—ä–ª–µ–Ω —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
        int daysNeeded = (int) Math.round(totalWorkingDays * workRatio);

        // –ú–∏–Ω–∏–º—É–º 2 –¥–Ω–∏, –º–∞–∫—Å–∏–º—É–º –≤—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –¥–Ω–∏
        return Math.max(2, Math.min(daysNeeded, totalWorkingDays));
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–≤–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Ä—ä—á–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     */
    private List<Event> getExistingManualShifts(Employee employee, int year, int month) {
        LocalDate startOfMonth = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());

        LocalDateTime startDateTime = startOfMonth.atStartOfDay();
        LocalDateTime endDateTime = endOfMonth.atTime(23, 59, 59);

        return eventRepository.findAll().stream()
                .filter(event -> employee.getId().equals(event.getEmployee().getId()))
                .filter(event -> event.getIsAutoGenerated() == null || !event.getIsAutoGenerated()) // –†—ä—á–Ω–æ —Å—ä–∑–¥–∞–¥–µ–Ω–∏
                .filter(event -> event.getStart() != null)
                .filter(event -> !event.getStart().isBefore(startDateTime) && !event.getStart().isAfter(endDateTime))
                .filter(event -> event.getLeaveType() == null) // –ò–∑–∫–ª—é—á–≤–∞–º–µ –æ—Ç–ø—É—Å–∫–∏
                .collect(Collectors.toList());
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ò–∑–±–∏—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏, —Å–ø–∞–∑–≤–∞–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞
     * - –ú–∞–∫—Å–∏–º—É–º 6 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
     * - –ú–∏–Ω–∏–º—É–º 2 –ø–æ—á–∏–≤–Ω–∏ –¥–Ω–∏ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞
     */
    private List<LocalDate> selectWorkDaysWithConstraints(List<LocalDate> availableDays, int daysNeeded, Set<LocalDate> occupiedDates) {
        List<LocalDate> selectedDays = new ArrayList<>();
        Collections.shuffle(availableDays); // –°–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

        for (LocalDate day : availableDays) {
            if (selectedDays.size() >= daysNeeded) {
                break;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–æ–±–∞–≤—è–Ω–µ—Ç–æ –Ω–∞ —Ç–æ–∑–∏ –¥–µ–Ω –Ω–∞—Ä—É—à–∞–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞
            if (isValidWorkDay(day, selectedDays, occupiedDates)) {
                selectedDays.add(day);
            }
        }

        // –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ –∑–∞ –ø–æ-–ª–µ—Å–Ω–æ —á–µ—Ç–µ–Ω–µ
        selectedDays.sort(LocalDate::compareTo);
        return selectedDays;
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω–∏—è –¥–µ–Ω –º–æ–∂–µ –¥–∞ –±—ä–¥–µ —Ä–∞–±–æ—Ç–µ–Ω –±–µ–∑ –Ω–∞—Ä—É—à–∞–≤–∞–Ω–µ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞
     */
    private boolean isValidWorkDay(LocalDate candidateDay, List<LocalDate> selectedDays, Set<LocalDate> occupiedDates) {
        // –ö–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–Ω–∏ —Å—ä—Å –∑–∞–µ—Ç–∏—Ç–µ –¥–Ω–∏ –∑–∞ –ø—ä–ª–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∞
        Set<LocalDate> allWorkDays = new HashSet<>(selectedDays);
        allWorkDays.addAll(occupiedDates);
        allWorkDays.add(candidateDay);

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –º–∞–∫—Å–∏–º—É–º 6 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
        return !hasMoreThanSixConsecutiveDays(allWorkDays);
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç 6 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏
     */
    private boolean hasMoreThanSixConsecutiveDays(Set<LocalDate> workDays) {
        if (workDays.size() < 7) {
            return false;
        }

        List<LocalDate> sortedDays = new ArrayList<>(workDays);
        sortedDays.sort(LocalDate::compareTo);

        int consecutiveCount = 1;
        for (int i = 1; i < sortedDays.size(); i++) {
            if (sortedDays.get(i).isEqual(sortedDays.get(i-1).plusDays(1))) {
                consecutiveCount++;
                if (consecutiveCount > 6) {
                    return true;
                }
            } else {
                consecutiveCount = 1;
            }
        }

        return false;
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø: –°—ä–∑–¥–∞–≤–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–∞–Ω–∏ —Å–º–µ–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–Ω–∏
     */
    private List<Event> createBalancedShifts(Employee employee, List<LocalDate> selectedDays) {
        List<Event> shifts = new ArrayList<>();
        ShiftType[] shiftTypes = ShiftType.values();

        for (int i = 0; i < selectedDays.size(); i++) {
            LocalDate workDay = selectedDays.get(i);

            // –¶–∏–∫–ª–∏—á–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ —Å–º–µ–Ω–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å
            ShiftType shiftType = shiftTypes[i % shiftTypes.length];

            // –°—ä–∑–¥–∞–≤–∞–º–µ —Å–º—è–Ω–∞—Ç–∞
            Event shift = new Event();
            shift.setTitle(employee.getName().split(" ")[0]); // –ü—ä—Ä–≤–æ—Ç–æ –∏–º–µ
            shift.setStart(workDay.atTime(shiftType.getStartTime()));
            shift.setEnd(workDay.atTime(shiftType.getEndTime()));
            shift.setActivity("Auto-generated"); // –ú–æ–∂–µ –¥–∞ —Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞
            shift.setEmployee(employee);
            shift.setIsAutoGenerated(true); // –í–ê–ñ–ù–û: –ú–∞—Ä–∫–∏—Ä–∞–º–µ –∫–∞—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞

            shifts.add(shift);

            System.out.println(String.format("üìã –°—ä–∑–¥–∞–¥–µ–Ω–∞ —Å–º—è–Ω–∞: %s –≤ %s (%s)",
                    workDay, shiftType.getName(), employee.getName()));
        }

        return shifts;
    }
}