package com.example.schedule.service;

import com.example.schedule.dto.DailyWorkHoursDto;
import com.example.schedule.dto.WeeklyScheduleDto;
import com.example.schedule.entity.Employee;
import com.example.schedule.entity.Event;
import com.example.schedule.entity.WeeklySchedule;
import com.example.schedule.repository.EmployeeRepository;
import com.example.schedule.repository.EventRepository;
import com.example.schedule.repository.WeeklyScheduleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.time.temporal.WeekFields;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Service –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏—Ü–∏ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª–∏—Ç–µ
 * –û–ë–ù–û–í–ï–ù: –í–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 *
 * –ù–û–í–ê –õ–û–ì–ò–ö–ê –ó–ê –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò:
 * - Paid leave, Sick leave, Maternity leave, Paternity leave ‚Üí –í–ö–õ–Æ–ß–í–ê–¢ –°–ï –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 * - Day off, Unpaid leave, No Leave Selected ‚Üí –ù–ï —Å–µ –≤–∫–ª—é—á–≤–∞—Ç –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
 *
 * –ó–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (4, 6 –∏–ª–∏ 8 —á–∞—Å–∞ –¥–Ω–µ–≤–Ω–æ)
 */
@Service
public class WeeklyScheduleService {

    @Autowired
    private WeeklyScheduleRepository weeklyScheduleRepository;

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private EventRepository eventRepository;

    /**
     * –ö–û–ù–°–¢–ê–ù–¢–ò –ó–ê –¢–ò–ü–û–í–ï–¢–ï –ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò
     * –¢–µ–∑–∏ —Ç–∏–ø–æ–≤–µ –æ—Ç–ø—É—Å–∫–∏ —Å–µ —Å—á–∏—Ç–∞—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ—Ç–æ
     */
    private static final Set<String> PAID_LEAVE_TYPES = Set.of(
            "Paid leave",      // –ü–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
            "Sick leave",      // –ë–æ–ª–Ω–∏—á–µ–Ω
            "Maternity leave", // –ú–∞–π—á–∏–Ω—Å—Ç–≤–æ
            "Paternity leave"  // –ë–∞—â–∏–Ω—Å—Ç–≤–æ
    );

    /**
     * –ö–û–ù–°–¢–ê–ù–¢–ò –ó–ê –¢–ò–ü–û–í–ï–¢–ï –ù–ï–ü–õ–ê–¢–ï–ù–ò –û–¢–ü–£–°–ö–ò
     * –¢–µ–∑–∏ —Ç–∏–ø–æ–≤–µ –æ—Ç–ø—É—Å–∫–∏ –ù–ï —Å–µ —Å—á–∏—Ç–∞—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
     */
    private static final Set<String> UNPAID_LEAVE_TYPES = Set.of(
            "Day off",        // –ü–æ—á–∏–≤–µ–Ω –¥–µ–Ω
            "Unpaid leave"    // –ù–µ–ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
    );

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å–µ—Ü
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param year - –≥–æ–¥–∏–Ω–∞
     * @param month - –º–µ—Å–µ—Ü (1-12)
     * @return —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
     */
    @Transactional(readOnly = true)
    public List<WeeklyScheduleDto> getWeeklyScheduleForMonth(Long employeeId, Integer year, Integer month) {
        System.out.println(String.format("üìÖ Getting weekly schedule for employee %d, month %d/%d", employeeId, month, year));

        // –ù–∞–º–∏—Ä–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
        Employee employee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new RuntimeException("Employee not found: " + employeeId));

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—Ü–∏ –≤ –º–µ—Å–µ—Ü–∞
        List<LocalDate> weeksInMonth = getWeeksForMonth(year, month);
        System.out.println(String.format("üìã Found %d weeks in %d/%d", weeksInMonth.size(), month, year));

        List<WeeklyScheduleDto> result = new ArrayList<>();

        for (LocalDate weekStart : weeksInMonth) {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –∑–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞
            Optional<WeeklySchedule> existingSchedule = weeklyScheduleRepository
                    .findByEmployeeIdAndWeekStartDate(employeeId, weekStart);

            WeeklyScheduleDto weekDto;
            if (existingSchedule.isPresent()) {
                // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è –∑–∞–ø–∏—Å
                weekDto = convertToDto(existingSchedule.get());
                System.out.println(String.format("‚úÖ Found existing schedule for week %s: %s hours",
                        weekStart, weekDto.getFormattedPlannedHours()));
            } else {
                // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ DTO –∑–∞ —Å–µ–¥–º–∏—Ü–∞ –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫
                weekDto = createEmptyWeekDto(employee, weekStart);
                System.out.println(String.format("‚ûï Created empty week DTO for %s", weekStart));
            }

            result.add(weekDto);
        }

        System.out.println(String.format("‚úÖ Returning %d weekly schedules for employee %s",
                result.size(), employee.getName()));
        return result;
    }

    /**
     * –í—Ä—ä—â–∞ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param currentDate - —Ç–µ–∫—É—â–∞ –¥–∞—Ç–∞
     * @return Optional —Å—ä—Å —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫ –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
     */
    public Optional<WeeklySchedule> getCurrentWeekSchedule(Long employeeId, LocalDate currentDate) {
        LocalDate startOfWeek = currentDate.with(DayOfWeek.MONDAY);
        return weeklyScheduleRepository.findByEmployeeIdAndWeekStartDate(employeeId, startOfWeek);
    }

    /**
     * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ —Å–µ–¥–º–∏—á–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫ —Å–ª–µ–¥ –ø—Ä–æ–º—è–Ω–∞ –≤ —Å—ä–±–∏—Ç–∏—è—Ç–∞
     * –ù–û–í–ê –õ–û–ì–ò–ö–ê: –í–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∫–∞—Ç–æ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param eventDate - –¥–∞—Ç–∞—Ç–∞ –Ω–∞ –ø—Ä–æ–º–µ–Ω–µ–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ
     */
    @Transactional
    public void updateWeeklyScheduleForEvent(Long employeeId, LocalDate eventDate) {
        System.out.println(String.format("üîÑ Updating weekly schedule for employee %d, event date %s (WITH PAID LEAVE LOGIC)",
                employeeId, eventDate));

        try {
            // –ù–∞–º–∏—Ä–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
            Employee employee = employeeRepository.findById(employeeId)
                    .orElseThrow(() -> new RuntimeException("Employee not found: " + employeeId));

            // –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
            LocalDate weekStart = getWeekStartDate(eventDate);
            Integer weekNumber = getWeekNumber(weekStart);
            Integer year = weekStart.getYear();

            System.out.println(String.format("üìÖ Week start: %s, week number: %d, year: %d",
                    weekStart, weekNumber, year));

            // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
            WeeklyHours weeklyHours = calculateWeeklyHoursWithPaidLeave(employeeId, weekStart, employee);

            // –ù–∞–º–∏—Ä–∞–º–µ –∏–ª–∏ —Å—ä–∑–¥–∞–≤–∞–º–µ –∑–∞–ø–∏—Å–∞ –≤ –±–∞–∑–∞—Ç–∞
            WeeklySchedule weeklySchedule = weeklyScheduleRepository
                    .findByEmployeeIdAndWeekStartDate(employeeId, weekStart)
                    .orElse(new WeeklySchedule(employee, weekStart, weekNumber, year));

            // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
            weeklySchedule.setPlannedHours(weeklyHours.getWorkHours());
            weeklySchedule.setBreakHours(weeklyHours.getBreakHours());
            weeklySchedule.setActualWorkHours(weeklyHours.getWorkHours()); // –ó–∞ —Å–µ–≥–∞ –∞–∫—Ç—É–∞–ª–Ω–∏—Ç–µ = –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏—Ç–µ

            // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
            weeklySchedule = weeklyScheduleRepository.save(weeklySchedule);

            System.out.println(String.format("‚úÖ Updated weekly schedule ID %d: %.2f work hours (including paid leave), %.2f break hours",
                    weeklySchedule.getId(),
                    weeklyHours.getWorkHours(),
                    weeklyHours.getBreakHours()));

        } catch (Exception e) {
            System.err.println("‚ùå Error updating weekly schedule: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    /**
     * –ò–∑—Ç—Ä–∏–≤–∞ —Å–µ–¥–º–∏—á–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª (–ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª)
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     */
    @Transactional
    public void deleteWeeklySchedulesForEmployee(Long employeeId) {
        System.out.println(String.format("üóëÔ∏è Deleting all weekly schedules for employee %d", employeeId));

        try {
            weeklyScheduleRepository.deleteByEmployeeId(employeeId);
            System.out.println("‚úÖ Weekly schedules deleted successfully");
        } catch (Exception e) {
            System.err.println("‚ùå Error deleting weekly schedules: " + e.getMessage());
            throw e;
        }
    }

    /**
     * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—á–Ω–∏ –≥—Ä–∞—Ñ–∏—Ü–∏ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª
     * –ù–û–í–ê –õ–û–ì–ò–ö–ê: –í–∫–ª—é—á–≤–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     */
    @Transactional
    public void recalculateAllWeeklySchedules(Long employeeId) {
        System.out.println(String.format("üîÑ Recalculating all weekly schedules for employee %d (WITH PAID LEAVE LOGIC)", employeeId));

        try {
            // –ù–∞–º–∏—Ä–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
            Employee employee = employeeRepository.findById(employeeId)
                    .orElseThrow(() -> new RuntimeException("Employee not found: " + employeeId));

            // –°–¢–™–ü–ö–ê 1: –ü–æ–ª—É—á–∞–≤–∞–º–µ –í–°–ò–ß–ö–ò —Å—ä–±–∏—Ç–∏—è –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ leave events)
            List<Event> allEvents = eventRepository.findAll().stream()
                    .filter(event -> event.getEmployee() != null &&
                            event.getEmployee().getId().equals(employeeId))
                    .filter(event -> event.getStart() != null && event.getEnd() != null)
                    .collect(Collectors.toList());

            System.out.println(String.format("üìã Found %d total events for employee (including leave events)", allEvents.size()));

            // –°–¢–™–ü–ö–ê 2: –ì—Ä—É–ø–∏—Ä–∞–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞ –ø–æ —Å–µ–¥–º–∏—Ü–∏
            Map<LocalDate, List<Event>> eventsByWeek = allEvents.stream()
                    .collect(Collectors.groupingBy(event -> getWeekStartDate(event.getStart().toLocalDate())));

            System.out.println(String.format("üìÖ Events spread across %d weeks", eventsByWeek.size()));

            // –°–¢–™–ü–ö–ê 3: –ó–∞ –≤—Å—è–∫–∞ —Å–µ–¥–º–∏—Ü–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–º–µ –∏ –∑–∞–ø–∞–∑–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
            for (Map.Entry<LocalDate, List<Event>> entry : eventsByWeek.entrySet()) {
                LocalDate weekStart = entry.getKey();

                // –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
                WeeklyHours weeklyHours = calculateWeeklyHoursFromEventsWithPaidLeave(entry.getValue(), employee);

                Integer weekNumber = getWeekNumber(weekStart);
                Integer year = weekStart.getYear();

                // –ù–∞–º–∏—Ä–∞–º–µ –∏–ª–∏ —Å—ä–∑–¥–∞–≤–∞–º–µ –∑–∞–ø–∏—Å–∞
                WeeklySchedule weeklySchedule = weeklyScheduleRepository
                        .findByEmployeeIdAndWeekStartDate(employeeId, weekStart)
                        .orElse(new WeeklySchedule(employee, weekStart, weekNumber, year));

                // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
                weeklySchedule.setPlannedHours(weeklyHours.getWorkHours());
                weeklySchedule.setBreakHours(weeklyHours.getBreakHours());
                weeklySchedule.setActualWorkHours(weeklyHours.getWorkHours());

                weeklyScheduleRepository.save(weeklySchedule);

                System.out.println(String.format("‚úÖ Week %s: %.2f hours (including paid leave)",
                        weekStart, weeklyHours.getWorkHours()));
            }

            System.out.println("‚úÖ All weekly schedules recalculated successfully with paid leave logic");

        } catch (Exception e) {
            System.err.println("‚ùå Error recalculating weekly schedules: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    /**
     * –ù–û–í–ê –ì–õ–ê–í–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Å–µ–¥–º–∏—Ü–∞ –í–ö–õ–Æ–ß–ò–¢–ï–õ–ù–û –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
     *
     * –õ–û–ì–ò–ö–ê:
     * 1. –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
     * 2. –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Ç–µ–Ω–∏ –æ—Ç–ø—É—Å–∫–∏ –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
     * 3. –ó–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞
     * 4. –ó–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –¥–æ–±–∞–≤—è–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param weekStart - –Ω–∞—á–∞–ª–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
     * @param employee - –æ–±–µ–∫—Ç—ä—Ç –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è (–∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ hourlyRate)
     * @return –æ–±–µ–∫—Ç —Å —Ä–∞–±–æ—Ç–Ω–∏ –∏ –ø–æ—á–∏–≤–Ω–∏ —á–∞—Å–æ–≤–µ
     */
    private WeeklyHours calculateWeeklyHoursWithPaidLeave(Long employeeId, LocalDate weekStart, Employee employee) {
        LocalDate weekEnd = weekStart.plusDays(6); // –ù–µ–¥–µ–ª—è

        System.out.println(String.format("üîç Calculating hours for employee %d, week %s to %s (INCLUDING PAID LEAVE)",
                employeeId, weekStart, weekEnd));

        // –°–¢–™–ü–ö–ê 1: –ü–æ–ª—É—á–∞–≤–∞–º–µ –í–°–ò–ß–ö–ò —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–∞–∑–∏ —Å–µ–¥–º–∏—Ü–∞ (—Ä–∞–±–æ—Ç–Ω–∏ + –æ—Ç–ø—É—Å–∫–∏)
        List<Event> allWeekEvents = eventRepository.findAll().stream()
                .filter(event -> {
                    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
                    if (event.getEmployee() == null || !event.getEmployee().getId().equals(employeeId)) {
                        return false;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞—Ç–∏—Ç–µ
                    if (event.getStart() == null || event.getEnd() == null) {
                        return false;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –≤ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
                    LocalDate eventDate = event.getStart().toLocalDate();
                    return !eventDate.isBefore(weekStart) && !eventDate.isAfter(weekEnd);
                })
                .collect(Collectors.toList());

        System.out.println(String.format("üìä Found %d total events for week calculation", allWeekEvents.size()));

        // –°–¢–™–ü–ö–ê 2: –†–∞–∑–¥–µ–ª—è–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏ –∏ –æ—Ç–ø—É—Å–∫–∏
        List<Event> workEvents = new ArrayList<>();
        List<Event> paidLeaveEvents = new ArrayList<>();
        List<Event> unpaidLeaveEvents = new ArrayList<>();

        for (Event event : allWeekEvents) {
            String leaveType = event.getLeaveType();

            if (leaveType == null || leaveType.trim().isEmpty()) {
                // –†–∞–±–æ—Ç–Ω–æ —Å—ä–±–∏—Ç–∏–µ
                workEvents.add(event);
                System.out.println(String.format("‚úÖ Work event: %s on %s",
                        event.getActivity(), event.getStart().toLocalDate()));
            } else if (isPaidLeaveType(leaveType)) {
                // –ü–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
                paidLeaveEvents.add(event);
                System.out.println(String.format("üí∞ Paid leave event: %s on %s",
                        leaveType, event.getStart().toLocalDate()));
            } else {
                // –ù–µ–ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
                unpaidLeaveEvents.add(event);
                System.out.println(String.format("üö´ Unpaid leave event: %s on %s",
                        leaveType, event.getStart().toLocalDate()));
            }
        }

        System.out.println(String.format("üìä Event breakdown: %d work, %d paid leave, %d unpaid leave",
                workEvents.size(), paidLeaveEvents.size(), unpaidLeaveEvents.size()));

        // –°–¢–™–ü–ö–ê 3: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        WeeklyHours workHours = calculateWeeklyHoursFromEvents(workEvents);
        System.out.println(String.format("‚è∞ Work events total: %.2f work hours, %.2f break hours",
                workHours.getWorkHours(), workHours.getBreakHours()));

        // –°–¢–™–ü–ö–ê 4: –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
        WeeklyHours paidLeaveHours = calculateHoursFromPaidLeave(paidLeaveEvents, employee);
        System.out.println(String.format("üí∞ Paid leave total: %.2f hours",
                paidLeaveHours.getWorkHours()));

        // –°–¢–™–ü–ö–ê 5: –°—ä–±–∏—Ä–∞–º–µ –æ–±—â–æ —á–∞—Å–æ–≤–µ—Ç–µ
        BigDecimal totalWorkHours = workHours.getWorkHours().add(paidLeaveHours.getWorkHours());
        BigDecimal totalBreakHours = workHours.getBreakHours(); // –ü–æ—á–∏–≤–∫–∏—Ç–µ —Å–µ –¥–æ–±–∞–≤—è—Ç —Å–∞–º–æ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è

        System.out.println(String.format("üéØ FINAL WEEKLY TOTALS: %.2f work hours (%.2f from work + %.2f from paid leave), %.2f break hours",
                totalWorkHours.doubleValue(),
                workHours.getWorkHours().doubleValue(),
                paidLeaveHours.getWorkHours().doubleValue(),
                totalBreakHours.doubleValue()));

        return new WeeklyHours(totalWorkHours, totalBreakHours);
    }

    /**
     * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
     *
     * –õ–û–ì–ò–ö–ê:
     * - –ó–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω —Å –ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫ –¥–æ–±–∞–≤—è–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * - hourlyRate –≤ Employee entity –≤—Å—ä—â–Ω–æ—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ —á–∞—Å–æ–≤–µ—Ç–µ –¥–Ω–µ–≤–Ω–æ (4, 6 –∏–ª–∏ 8)
     *
     * @param paidLeaveEvents - —Å–ø–∏—Å—ä–∫ —Å –ø–ª–∞—Ç–µ–Ω–∏ –æ—Ç–ø—É—Å–∫–∏
     * @param employee - —Å–ª—É–∂–∏—Ç–µ–ª—è—Ç (–∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞)
     * @return –æ–±–µ–∫—Ç —Å —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
     */
    private WeeklyHours calculateHoursFromPaidLeave(List<Event> paidLeaveEvents, Employee employee) {
        // –ü–æ–ª—É—á–∞–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –¥–Ω–µ–≤–Ω–æ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ (hourlyRate –≤ —Ç–æ–∑–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∑–Ω–∞—á–∞–≤–∞ —á–∞—Å–æ–≤–µ –¥–Ω–µ–≤–Ω–æ)
        Integer dailyContractHours = employee.getHourlyRate();
        if (dailyContractHours == null) {
            System.out.println("‚ö†Ô∏è Employee has no hourly rate set, defaulting to 8 hours per day");
            dailyContractHours = 8; // Default —Å—Ç–æ–π–Ω–æ—Å—Ç
        }

        System.out.println(String.format("üìã Employee contract: %d hours per day", dailyContractHours));

        // –ì—Ä—É–ø–∏—Ä–∞–º–µ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –ø–æ –¥–Ω–∏ (–≤ —Å–ª—É—á–∞–π —á–µ –∏–º–∞ –Ω—è–∫–æ–ª–∫–æ —Å—ä–±–∏—Ç–∏z –≤ –µ–¥–∏–Ω –¥–µ–Ω)
        Map<LocalDate, List<Event>> leaveEventsByDay = paidLeaveEvents.stream()
                .collect(Collectors.groupingBy(event -> event.getStart().toLocalDate()));

        BigDecimal totalPaidLeaveHours = BigDecimal.ZERO;

        for (Map.Entry<LocalDate, List<Event>> entry : leaveEventsByDay.entrySet()) {
            LocalDate leaveDate = entry.getKey();
            List<Event> leavesForDay = entry.getValue();

            // –ó–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω —Å –ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫ –¥–æ–±–∞–≤—è–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
            // (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –±—Ä–æ—è leave events –≤ –¥–µ–Ω—è - –µ–¥–∏–Ω –¥–µ–Ω = –µ–¥–Ω–∞ –¥–Ω–µ–≤–Ω–∞ –Ω–æ—Ä–º–∞)
            BigDecimal dailyLeaveHours = BigDecimal.valueOf(dailyContractHours);
            totalPaidLeaveHours = totalPaidLeaveHours.add(dailyLeaveHours);

            System.out.println(String.format("üí∞ Paid leave day %s: +%d hours (contract rate)",
                    leaveDate, dailyContractHours));

            // –õ–æ–≥–≤–∞–º–µ —Ç–∏–ø–æ–≤–µ—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –∑–∞ —Ç–æ–∑–∏ –¥–µ–Ω
            String leaveTypes = leavesForDay.stream()
                    .map(Event::getLeaveType)
                    .distinct()
                    .collect(Collectors.joining(", "));
            System.out.println(String.format("   Types: %s", leaveTypes));
        }

        System.out.println(String.format("üí∞ Total paid leave hours for week: %.2f hours from %d days",
                totalPaidLeaveHours.doubleValue(), leaveEventsByDay.size()));

        // –ü–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞—Ç –ø–æ—á–∏–≤–∫–∏
        return new WeeklyHours(totalPaidLeaveHours, BigDecimal.ZERO);
    }

    /**
     * –û–ë–ù–û–í–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –æ—Ç —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –í–ö–õ–Æ–ß–ò–¢–ï–õ–ù–û –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
     *
     * @param events - —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è (–º–æ–∂–µ –¥–∞ –≤–∫–ª—é—á–≤–∞ –∏ –æ—Ç–ø—É—Å–∫–∏)
     * @param employee - —Å–ª—É–∂–∏—Ç–µ–ª—è—Ç (–∑–∞ –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏)
     * @return –æ–±–µ–∫—Ç —Å —Ä–∞–±–æ—Ç–Ω–∏ –∏ –ø–æ—á–∏–≤–Ω–∏ —á–∞—Å–æ–≤–µ
     */
    private WeeklyHours calculateWeeklyHoursFromEventsWithPaidLeave(List<Event> events, Employee employee) {
        System.out.println(String.format("üßÆ Calculating hours from %d events (including potential paid leave)", events.size()));

        // –†–∞–∑–¥–µ–ª—è–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏ –∏ –æ—Ç–ø—É—Å–∫–∏
        List<Event> workEvents = new ArrayList<>();
        List<Event> paidLeaveEvents = new ArrayList<>();

        for (Event event : events) {
            String leaveType = event.getLeaveType();

            if (leaveType == null || leaveType.trim().isEmpty()) {
                workEvents.add(event);
            } else if (isPaidLeaveType(leaveType)) {
                paidLeaveEvents.add(event);
            }
            // –ù–µ–ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏ –≥–∏ –∏–≥–Ω–æ—Ä–∏—Ä–∞–º–µ
        }

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è
        WeeklyHours workHours = calculateWeeklyHoursFromEvents(workEvents);

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —á–∞—Å–æ–≤–µ—Ç–µ –æ—Ç –ø–ª–∞—Ç–µ–Ω–∏—Ç–µ –æ—Ç–ø—É—Å–∫–∏
        WeeklyHours paidLeaveHours = calculateHoursFromPaidLeave(paidLeaveEvents, employee);

        // –°—ä–±–∏—Ä–∞–º–µ –æ–±—â–æ —á–∞—Å–æ–≤–µ—Ç–µ
        BigDecimal totalWorkHours = workHours.getWorkHours().add(paidLeaveHours.getWorkHours());
        BigDecimal totalBreakHours = workHours.getBreakHours(); // –ü–æ—á–∏–≤–∫–∏—Ç–µ —Å–∞–º–æ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —Å—ä–±–∏—Ç–∏—è

        System.out.println(String.format("‚úÖ Combined totals: %.2fh work + %.2fh paid leave = %.2fh total, %.2fh break",
                workHours.getWorkHours().doubleValue(),
                paidLeaveHours.getWorkHours().doubleValue(),
                totalWorkHours.doubleValue(),
                totalBreakHours.doubleValue()));

        return new WeeklyHours(totalWorkHours, totalBreakHours);
    }

    /**
     * –ù–û–í–ê –ü–û–ú–û–©–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–∞–¥–µ–Ω —Ç–∏–ø –æ—Ç–ø—É—Å–∫ –µ –ø–ª–∞—Ç–µ–Ω
     *
     * @param leaveType - —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫
     * @return true –∞–∫–æ –µ –ø–ª–∞—Ç–µ–Ω –æ—Ç–ø—É—Å–∫
     */
    private boolean isPaidLeaveType(String leaveType) {
        if (leaveType == null) {
            return false;
        }

        boolean isPaid = PAID_LEAVE_TYPES.contains(leaveType.trim());

        if (isPaid) {
            System.out.println(String.format("‚úÖ '%s' is classified as PAID leave", leaveType));
        } else {
            System.out.println(String.format("üö´ '%s' is classified as UNPAID leave", leaveType));
        }

        return isPaid;
    }

    /**
     * –û–†–ò–ì–ò–ù–ê–õ–ù–ê –§–£–ù–ö–¶–ò–Ø: –ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ –æ—Ç —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è (–ë–ï–ó –æ—Ç–ø—É—Å–∫–∏)
     * –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–∞ —Å—ä—â–∞—Ç–∞ - —Ä–∞–±–æ—Ç–∏ —Å–∞–º–æ —Å —Ä–∞–±–æ—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è
     *
     * @param events - —Å–ø–∏—Å—ä–∫ —Å—ä—Å —Ä–∞–±–æ—Ç–Ω–∏ —Å—ä–±–∏—Ç–∏—è
     * @return –æ–±–µ–∫—Ç —Å —Ä–∞–±–æ—Ç–Ω–∏ –∏ –ø–æ—á–∏–≤–Ω–∏ —á–∞—Å–æ–≤–µ
     */
    private WeeklyHours calculateWeeklyHoursFromEvents(List<Event> events) {
        BigDecimal totalWorkHours = BigDecimal.ZERO;
        BigDecimal totalBreakHours = BigDecimal.ZERO;

        System.out.println(String.format("üßÆ Calculating hours from %d work events", events.size()));

        for (Event event : events) {
            // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±—â–∞—Ç–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç –Ω–∞ —Å–º—è–Ω–∞—Ç–∞ –≤ —á–∞—Å–æ–≤–µ
            long totalMinutes = ChronoUnit.MINUTES.between(event.getStart(), event.getEnd());
            BigDecimal totalShiftHours = BigDecimal.valueOf(totalMinutes).divide(BigDecimal.valueOf(60), 2, RoundingMode.HALF_UP);

            // –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø–æ—á–∏–≤–∫–∞—Ç–∞ –∏ —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
            BigDecimal breakHours = BigDecimal.ZERO;
            BigDecimal workHours = totalShiftHours;

            if (totalShiftHours.compareTo(BigDecimal.valueOf(6)) > 0) {
                // –ê–∫–æ —Å–º—è–Ω–∞—Ç–∞ –µ –Ω–∞–¥ 6 —á–∞—Å–∞: –ø–æ—á–∏–≤–∫–∞ = 30 –º–∏–Ω, —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ = –æ–±—â–æ –≤—Ä–µ–º–µ - 30 –º–∏–Ω
                breakHours = BigDecimal.valueOf(0.5); // 30 –º–∏–Ω—É—Ç–∏ = 0.5 —á–∞—Å–∞
                workHours = totalShiftHours.subtract(breakHours); // –ò–∑–≤–∞–∂–¥–∞–º–µ –ø–æ—á–∏–≤–∫–∞—Ç–∞ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏—Ç–µ —á–∞—Å–æ–≤–µ
            }
            // –ê–∫–æ —Å–º—è–Ω–∞—Ç–∞ –µ —Ç–æ—á–Ω–æ 6 —á–∞—Å–∞ –∏–ª–∏ –ø–æ-–º–∞–ª–∫–æ: –ø–æ—á–∏–≤–∫–∞ = 0, —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ = –æ–±—â–æ –≤—Ä–µ–º–µ

            totalWorkHours = totalWorkHours.add(workHours);
            totalBreakHours = totalBreakHours.add(breakHours);

            System.out.println(String.format("üìä Work event: %s -> %.2fh total, %.2fh work, %.2fh break",
                    event.getStart().toLocalDate(),
                    totalShiftHours.doubleValue(),
                    workHours.doubleValue(),
                    breakHours.doubleValue()));
        }

        System.out.println(String.format("‚úÖ Work events totals: %.2fh work, %.2fh break",
                totalWorkHours.doubleValue(),
                totalBreakHours.doubleValue()));

        return new WeeklyHours(totalWorkHours, totalBreakHours);
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—Ü–∏ –∫–æ–∏—Ç–æ –∑–∞—Å—è–≥–∞—Ç –¥–∞–¥–µ–Ω –º–µ—Å–µ—Ü
     * @param year - –≥–æ–¥–∏–Ω–∞
     * @param month - –º–µ—Å–µ—Ü (1-12)
     * @return —Å–ø–∏—Å—ä–∫ —Å –Ω–∞—á–∞–ª–Ω–∏—Ç–µ –¥–∞—Ç–∏ –Ω–∞ —Å–µ–¥–º–∏—Ü–∏—Ç–µ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏—Ü–∏)
     */
    private List<LocalDate> getWeeksForMonth(Integer year, Integer month) {
        List<LocalDate> weeks = new ArrayList<>();

        // –ü—ä—Ä–≤–∏ –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞
        LocalDate firstDayOfMonth = LocalDate.of(year, month, 1);
        // –ü–æ—Å–ª–µ–¥–µ–Ω –¥–µ–Ω –æ—Ç –º–µ—Å–µ—Ü–∞
        LocalDate lastDayOfMonth = firstDayOfMonth.plusMonths(1).minusDays(1);

        // –ù–∞–º–∏—Ä–∞–º–µ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
        LocalDate weekStart = getWeekStartDate(firstDayOfMonth);

        // –î–æ–±–∞–≤—è–º–µ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—Ü–∏ –¥–æ–∫–∞—Ç–æ –Ω–µ –∏–∑–ª–µ–∑–µ–º –æ—Ç –º–µ—Å–µ—Ü–∞
        while (weekStart.isBefore(lastDayOfMonth) ||
                weekStart.plusDays(6).getMonthValue() == month) {
            weeks.add(weekStart);
            weekStart = weekStart.plusWeeks(1);
        }

        return weeks;
    }

    /**
     * –ù–∞–º–∏—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –∑–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞
     * @param date - –¥–∞—Ç–∞
     * @return –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫–∞ –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –Ω–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
     */
    private LocalDate getWeekStartDate(LocalDate date) {
        return date.with(java.time.DayOfWeek.MONDAY);
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ –≤ –≥–æ–¥–∏–Ω–∞—Ç–∞
     * @param date - –¥–∞—Ç–∞
     * @return –Ω–æ–º–µ—Ä –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (1-53)
     */
    private Integer getWeekNumber(LocalDate date) {
        WeekFields weekFields = WeekFields.of(java.time.DayOfWeek.MONDAY, 4);
        return date.get(weekFields.weekOfWeekBasedYear());
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ WeeklySchedule entity –∫—ä–º DTO
     * @param weeklySchedule - entity –æ–±–µ–∫—Ç—ä—Ç
     * @return DTO –æ–±–µ–∫—Ç—ä—Ç
     */
    private WeeklyScheduleDto convertToDto(WeeklySchedule weeklySchedule) {
        return new WeeklyScheduleDto(
                weeklySchedule.getId(),
                weeklySchedule.getEmployee().getId(),
                weeklySchedule.getEmployee().getName() + " " + weeklySchedule.getEmployee().getLastname(),
                weeklySchedule.getWeekStartDate(),
                weeklySchedule.getWeekNumber(),
                weeklySchedule.getYear(),
                weeklySchedule.getPlannedHours(),
                weeklySchedule.getBreakHours(),
                weeklySchedule.getActualWorkHours()
        );
    }

    /**
     * –°—ä–∑–¥–∞–≤–∞ –ø—Ä–∞–∑–µ–Ω DTO –∑–∞ —Å–µ–¥–º–∏—Ü–∞ –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫
     * @param employee - —Å–ª—É–∂–∏—Ç–µ–ª—è—Ç
     * @param weekStart - –Ω–∞—á–∞–ª–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
     * @return DTO —Å –Ω—É–ª–µ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
     */
    private WeeklyScheduleDto createEmptyWeekDto(Employee employee, LocalDate weekStart) {
        Integer weekNumber = getWeekNumber(weekStart);
        Integer year = weekStart.getYear();

        return new WeeklyScheduleDto(
                employee.getId(),
                employee.getName() + " " + employee.getLastname(),
                weekStart,
                weekNumber,
                year
        );
    }

    /**
     * –í—ä—Ç—Ä–µ—à–µ–Ω –∫–ª–∞—Å –∑–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —á–∞—Å–æ–≤–µ—Ç–µ –∑–∞ –µ–¥–Ω–∞ —Å–µ–¥–º–∏—Ü–∞
     */
    private static class WeeklyHours {
        private final BigDecimal workHours;
        private final BigDecimal breakHours;

        public WeeklyHours(BigDecimal workHours, BigDecimal breakHours) {
            this.workHours = workHours != null ? workHours : BigDecimal.ZERO;
            this.breakHours = breakHours != null ? breakHours : BigDecimal.ZERO;
        }

        public BigDecimal getWorkHours() { return workHours; }
        public BigDecimal getBreakHours() { return breakHours; }
    }

    /**
     * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ —Å–µ–¥–º–∏—á–Ω–∏ –≥—Ä–∞—Ñ–∏—Ü–∏ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ (–∑–∞ –≤—Å–∏—á–∫–∏ —Å–ª—É–∂–∏—Ç–µ–ª–∏)
     * @return —Å–ø–∏—Å—ä–∫ —Å DTO –æ–±–µ–∫—Ç–∏
     */
    @Transactional(readOnly = true)
    public List<WeeklyScheduleDto> getAllWeeklySchedules() {
        List<WeeklySchedule> schedules = weeklyScheduleRepository.findAll();
        return schedules.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥
     * –¢–æ–∑–∏ –º–µ—Ç–æ–¥ —á–µ—Ç–µ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ event –∏ –≤—Ä—ä—â–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param startDate - –Ω–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
     * @param endDate - –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
     * @return —Å–ø–∏—Å—ä–∫ —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ –≤—Å–µ–∫–∏ –¥–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥–∞
     */
    @Transactional(readOnly = true)
    public List<DailyWorkHoursDto> getDailyWorkHours(Long employeeId, LocalDate startDate, LocalDate endDate) {
        System.out.println(String.format("üìÖ Getting daily work hours for employee %d from %s to %s (FIXED VERSION)",
                employeeId, startDate, endDate));

        // –°–¢–™–ü–ö–ê 1: –ù–∞–º–∏—Ä–∞–º–µ —Å–ª—É–∂–∏—Ç–µ–ª—è
        Employee employee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new RuntimeException("Employee not found: " + employeeId));

        // –°–¢–™–ü–ö–ê 2: ‚úÖ –ü–û–ü–†–ê–í–ö–ê - –ò–∑–ø–æ–ª–∑–≤–∞–º–µ EAGER loading –≤–º–µ—Å—Ç–æ LAZY
        System.out.println("üìã Fetching events with EAGER loading...");

        // –û–ü–¶–ò–Ø 1: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ —Ç–æ–∑–∏ —Å–ª—É–∂–∏—Ç–µ–ª (–ø–æ-–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
        List<Event> allEmployeeEvents = eventRepository.findEventsByEmployeeIdWithEmployee(employeeId);

        // –û–ü–¶–ò–Ø 2: –ê–∫–æ –Ω—è–º–∞—à –≤—Ä–µ–º–µ –¥–∞ –¥–æ–±–∞–≤–∏—à –Ω–æ–≤–∏—è –º–µ—Ç–æ–¥, –∏–∑–ø–æ–ª–∑–≤–∞–π —Ç–æ–≤–∞:
        // List<Event> allEmployeeEvents = eventRepository.findAllWithEmployee().stream()
        //     .filter(event -> event.getEmployee().getId().equals(employeeId))
        //     .collect(Collectors.toList());

        System.out.println(String.format("üìä Found %d total events for employee %d", allEmployeeEvents.size(), employeeId));

        // –°–¢–™–ü–ö–ê 3: –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞ (—Å–µ–≥–∞ –≤–µ—á–µ –∏–º–∞–º–µ Employee –æ–±–µ–∫—Ç–∏—Ç–µ –∑–∞—Ä–µ–¥–µ–Ω–∏)
        List<Event> events = allEmployeeEvents.stream()
                .filter(event -> {
                    // –°–µ–≥–∞ event.getEmployee() –Ω—è–º–∞ –¥–∞ –µ null!
                    if (event.getStart() == null) {
                        System.out.println("‚ö†Ô∏è Event with null start date: " + event.getId());
                        return false;
                    }

                    LocalDate eventDate = event.getStart().toLocalDate();
                    boolean inPeriod = !eventDate.isBefore(startDate) && !eventDate.isAfter(endDate);

                    if (inPeriod) {
                        System.out.println(String.format("‚úÖ Including event: %s on %s (%s)",
                                event.getId(), eventDate,
                                event.getLeaveType() != null ? event.getLeaveType() : "Work"));
                    } else {
                        System.out.println(String.format("üö´ Excluding event: %s on %s (outside period)",
                                event.getId(), eventDate));
                    }

                    return inPeriod;
                })
                .collect(Collectors.toList());

        System.out.println(String.format("üìã Found %d events for employee in period %s to %s",
                events.size(), startDate, endDate));

        // –°–¢–™–ü–ö–ê 4: DEBUG - –ü–æ–∫–∞–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∑–∞ —Ç–æ–∑–∏ –ø–µ—Ä–∏–æ–¥
        for (Event event : events) {
            System.out.println(String.format("üîç DEBUG Event: ID=%d, Date=%s, Employee=%d, LeaveType=%s, Activity=%s",
                    event.getId(),
                    event.getStart().toLocalDate(),
                    event.getEmployee().getId(), // –°–µ–≥–∞ —Ç–æ–≤–∞ –Ω—è–º–∞ –¥–∞ –µ null!
                    event.getLeaveType(),
                    event.getActivity()));
        }

        // –°–¢–™–ü–ö–ê 5: –°—ä–∑–¥–∞–≤–∞–º–µ map —Å—ä—Å —Å—ä–±–∏—Ç–∏—è—Ç–∞ –ø–æ –¥–∞—Ç–∏ –∑–∞ –±—ä—Ä–∑ –¥–æ—Å—Ç—ä–ø
        Map<LocalDate, Event> eventsByDate = new HashMap<>();
        for (Event event : events) {
            LocalDate eventDate = event.getStart().toLocalDate();
            eventsByDate.put(eventDate, event);

            System.out.println(String.format("üìä Mapped event on %s: %s (%s)",
                    eventDate,
                    event.getLeaveType() != null ? event.getLeaveType() : "Work",
                    event.getLeaveType() != null ? "Leave" :
                            String.format("%s - %s",
                                    event.getStart().toLocalTime(),
                                    event.getEnd().toLocalTime())));
        }

        // –°–¢–™–ü–ö–ê 6: –°—ä–∑–¥–∞–≤–∞–º–µ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –¥–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥–∞
        List<DailyWorkHoursDto> dailyHours = new ArrayList<>();
        LocalDate currentDate = startDate;

        while (!currentDate.isAfter(endDate)) {
            DailyWorkHoursDto dayDto;

            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Å—ä–±–∏—Ç–∏–µ –∑–∞ —Ç–æ–∑–∏ –¥–µ–Ω
            if (eventsByDate.containsKey(currentDate)) {
                Event event = eventsByDate.get(currentDate);

                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –æ—Ç–ø—É—Å–∫ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
                if (event.getLeaveType() != null && !event.getLeaveType().trim().isEmpty()) {
                    // –¢–æ–≤–∞ –µ –æ—Ç–ø—É—Å–∫
                    dayDto = new DailyWorkHoursDto(currentDate, event.getLeaveType());
                    System.out.println(String.format("üèñÔ∏è %s: %s", currentDate, event.getLeaveType()));

                } else {
                    // –¢–æ–≤–∞ –µ —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
                    LocalTime startTime = event.getStart().toLocalTime();
                    LocalTime endTime = event.getEnd().toLocalTime();
                    String activity = event.getActivity();

                    dayDto = new DailyWorkHoursDto(currentDate, startTime, endTime, activity);
                    System.out.println(String.format("üíº %s: %s - %s (%s)",
                            currentDate, startTime, endTime, activity));
                }
            } else {
                // –ù—è–º–∞ —Å—ä–±–∏—Ç–∏–µ –∑–∞ —Ç–æ–∑–∏ –¥–µ–Ω = –ø–æ—á–∏–≤–µ–Ω –¥–µ–Ω
                dayDto = new DailyWorkHoursDto(currentDate); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ —Å–ª–æ–∂–∏ "Day off"
                System.out.println(String.format("üò¥ %s: Day off", currentDate));
            }

            dailyHours.add(dayDto);
            currentDate = currentDate.plusDays(1); // –ü—Ä–µ–º–∏–Ω–∞–≤–∞–º–µ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è –¥–µ–Ω
        }

        System.out.println(String.format("‚úÖ Generated daily hours for %d days (FIXED VERSION)", dailyHours.size()));

        // –§–ò–ù–ê–õ–ï–ù DEBUG
        long workDays = dailyHours.stream().filter(d -> d.isWorkDay()).count();
        long dayOffs = dailyHours.stream().filter(d -> d.isDayOff()).count();
        long leaveDays = dailyHours.stream().filter(d -> d.getLeaveType() != null).count();

        System.out.println(String.format("üìä FINAL STATISTICS: %d work days, %d day offs, %d leave days",
                workDays, dayOffs, leaveDays));

        return dailyHours;
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ —Ü—è–ª –º–µ—Å–µ—Ü
     * –£–¥–æ–±–µ–Ω –º–µ—Ç–æ–¥ –∫–æ–π—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—á–∏—Å–ª—è–≤–∞ –Ω–∞—á–∞–ª–æ—Ç–æ –∏ –∫—Ä–∞—è –Ω–∞ –º–µ—Å–µ—Ü–∞
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param year - –≥–æ–¥–∏–Ω–∞
     * @param month - –º–µ—Å–µ—Ü (1-12)
     * @return —Å–ø–∏—Å—ä–∫ —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Ü–µ–ª–∏—è –º–µ—Å–µ—Ü
     */
    @Transactional(readOnly = true)
    public List<DailyWorkHoursDto> getDailyWorkHoursForMonth(Long employeeId, Integer year, Integer month) {
        System.out.println(String.format("üìÖ Getting daily work hours for employee %d for month %d/%d",
                employeeId, month, year));

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –Ω–∞—á–∞–ª–æ—Ç–æ –∏ –∫—Ä–∞—è –Ω–∞ –º–µ—Å–µ—Ü–∞
        LocalDate startOfMonth = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());

        System.out.println(String.format("üìä Month period: %s to %s (%d days)",
                startOfMonth, endOfMonth, endOfMonth.getDayOfMonth()));

        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—è –º–µ—Ç–æ–¥
        return getDailyWorkHours(employeeId, startOfMonth, endOfMonth);
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–ª—É–∂–∏—Ç–µ–ª –∑–∞ —Ü—è–ª–∞ —Å–µ–¥–º–∏—Ü–∞
     * –£–¥–æ–±–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —á–∞—Å–æ–≤–µ—Ç–µ –∑–∞ –µ–¥–Ω–∞ —Å–µ–¥–º–∏—Ü–∞
     *
     * @param employeeId - ID –Ω–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è
     * @param weekStartDate - –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
     * @return —Å–ø–∏—Å—ä–∫ —Å –¥–Ω–µ–≤–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏ —á–∞—Å–æ–≤–µ –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (7 –¥–Ω–∏)
     */
    @Transactional(readOnly = true)
    public List<DailyWorkHoursDto> getDailyWorkHoursForWeek(Long employeeId, LocalDate weekStartDate) {
        System.out.println(String.format("üìÖ Getting daily work hours for employee %d for week starting %s",
                employeeId, weekStartDate));

        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫—Ä–∞—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞ (–Ω–µ–¥–µ–ª—è)
        LocalDate weekEndDate = weekStartDate.plusDays(6);

        System.out.println(String.format("üìä Week period: %s to %s", weekStartDate, weekEndDate));

        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—è –º–µ—Ç–æ–¥
        return getDailyWorkHours(employeeId, weekStartDate, weekEndDate);
    }
}